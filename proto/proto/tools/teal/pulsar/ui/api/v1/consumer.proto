syntax = "proto3";

package tools.teal.pulsar.ui.api.v1;

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

message MessageId {
  int64 ledger_id = 1;
  int64 entry_id = 2;
  int32 batch_id = 3;
  int32 partition_idx = 4;
}

message Message {
  map<string, string> properties = 1;
  bytes data = 2;
  int64 size = 3;
  string value = 4; // JSON string
  // MessageId messageId = 5;

  google.protobuf.Timestamp publish_time = 6;
  google.protobuf.Timestamp event_time = 7;
  double broker_publish_time = 22;

  bytes message_id = 30;
  double sequence_id = 8;
  string producer_name = 9;
  string key = 10;
  string ordering_key = 11;
  string topic = 12;
  int32 redelivery_count = 13;
  bytes schema_version = 14;

  bool is_replicated = 20;
  string replicated_from = 21;
}

enum SubscriptionMode {
  SUBSCRIPTION_MODE_UNSPECIFIED = 0;
  SUBSCRIPTION_MODE_DURABLE = 1;
  SUBSCRIPTION_MODE_NON_DURABLE = 2;
}

enum SubscriptionType {
  SUBSCRIPTION_TYPE_UNSPECIFIED = 0;
  SUBSCRIPTION_TYPE_EXCLUSIVE = 1;
  SUBSCRIPTION_TYPE_FAILOVER = 2;
  SUBSCRIPTION_TYPE_SHARED = 3;
  SUBSCRIPTION_TYPE_KEY_SHARED = 4;
}

message TopicSelector {
  oneof selector {
    string topic = 1;
  }
}

message CreateConsumerRequest {
  TopicSelector topic_selector = 10;
  optional string consumer_name = 1;
  optional string subscription_name = 2;
  optional int32 priority_level = 3;
  optional bool start_paused = 4;
  optional SubscriptionMode subscription_mode = 5;
  optional SubscriptionType subscription_type = 6;
}

message CreateConsumerResponse {
  google.rpc.Status status = 1;
}

message DeleteConsumerRequest {
  string consumer_name = 1;
}

message DeleteConsumerResponse {
  google.rpc.Status status = 1;
}

message ResumeRequest {
  string consumer_name = 1;
}

message ResumeResponse {
  optional google.rpc.Status status = 1;
  repeated Message messages = 2;
}

message PauseRequest {
  string consumer_name = 1;
}

message PauseResponse {
  google.rpc.Status status = 1;
}

service ConsumerService {
  rpc CreateConsumer(CreateConsumerRequest) returns (CreateConsumerResponse);
  rpc DeleteConsumer(DeleteConsumerRequest) returns (DeleteConsumerResponse);
  rpc Resume(ResumeRequest) returns (stream ResumeResponse);
  rpc Pause(PauseRequest) returns (PauseResponse);
}
