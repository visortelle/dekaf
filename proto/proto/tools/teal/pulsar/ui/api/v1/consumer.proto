syntax = "proto3";

package tools.teal.pulsar.ui.api.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/rpc/status.proto";

message Message {
  // Message value as raw bytes.
  google.protobuf.BytesValue raw_value = 4;

  // Message value serialized as JSON.
  google.protobuf.StringValue value = 5;

  // The state, accumulated during applying message filters for all messages sequencially.
  // Not a part of Pulsar message.
  google.protobuf.StringValue accumulator = 50;

  // Evaluated message filter code can produce logs or errors.
  // We need to store them in the message to be able to show them in the UI.
  // Both, stdout and stderr are stored in the same field.
  google.protobuf.StringValue debug_stdout = 51;

  map<string, string> properties = 1;

  google.protobuf.Int64Value event_time = 7;
  google.protobuf.Int64Value publish_time = 6;
  google.protobuf.Int64Value broker_publish_time = 22;

  google.protobuf.BytesValue message_id = 30;
  google.protobuf.Int64Value sequence_id = 8;
  google.protobuf.StringValue producer_name = 9;
  google.protobuf.StringValue key = 10;
  google.protobuf.BytesValue ordering_key = 11;
  google.protobuf.StringValue topic = 12;
  google.protobuf.Int32Value redelivery_count = 13;
  google.protobuf.Int64Value schema_version = 14;
  google.protobuf.Int32Value size = 15;

  google.protobuf.BoolValue is_replicated = 20;
  google.protobuf.StringValue replicated_from = 21;
}

enum SubscriptionMode {
  SUBSCRIPTION_MODE_UNSPECIFIED = 0;
  SUBSCRIPTION_MODE_DURABLE = 1;
  SUBSCRIPTION_MODE_NON_DURABLE = 2;
}

enum SubscriptionType {
  SUBSCRIPTION_TYPE_UNSPECIFIED = 0;
  SUBSCRIPTION_TYPE_EXCLUSIVE = 1;
  SUBSCRIPTION_TYPE_FAILOVER = 2;
  SUBSCRIPTION_TYPE_SHARED = 3;
  SUBSCRIPTION_TYPE_KEY_SHARED = 4;
}

enum RegexSubscriptionMode {
  REGEX_SUBSCRIPTION_MODE_UNSPECIFIED = 0;
  REGEX_SUBSCRIPTION_MODE_PERSISTENT_ONLY = 1;
  REGEX_SUBSCRIPTION_MODE_NON_PERSISTENT_ONLY = 2;
  REGEX_SUBSCRIPTION_MODE_ALL_TOPICS = 3;
}

message TopicsSelectorByNames {
  repeated string topics = 1;
}

message TopicsSelectorByRegex {
  optional string pattern = 2;
  optional RegexSubscriptionMode regex_subscription_mode = 3;
}

message TopicsSelector {
  oneof topics_selector {
    TopicsSelectorByNames by_names = 1;
    TopicsSelectorByRegex by_regex = 2;
  }
}

enum DateTimeUnit {
  DATE_TIME_UNIT_UNSPECIFIED = 0;
  DATE_TIME_UNIT_YEAR = 1;
  DATE_TIME_UNIT_MONTH = 2;
  DATE_TIME_UNIT_WEEK = 3;
  DATE_TIME_UNIT_DAY = 4;
  DATE_TIME_UNIT_HOUR = 5;
  DATE_TIME_UNIT_MINUTE = 6;
  DATE_TIME_UNIT_SECOND = 7;
}

message EarliestMessage {}
message LatestMessage {}

message MessageId {
  bytes message_id = 1;
}

message DateTime {
  google.protobuf.Timestamp date_time = 1;
}

message RelativeDateTime {
  int32 value = 1;
  DateTimeUnit unit = 2;
  bool is_round_to_unit_start = 3;
}

message ConsumerSessionConfigStartFrom {
  oneof value {
    EarliestMessage earliest_message = 1;
    LatestMessage latest_message = 2;
    MessageId message_id = 3;
    DateTime date_time = 4;
    RelativeDateTime relative_date_time = 5;
  }
}

message ConsumerSessionConfigPauseTrigger {
  oneof trigger {
    int64 on_messages_processed = 1;
    int64 on_messages_delivered = 2;
    int64 on_bytes_processed = 3;
    int64 on_bytes_delivered = 4;
    int64 on_message_decode_fails = 7;
    int64 on_elapsed_time_ms = 5;
    bool on_topic_end_reached = 6;
    DateTime on_date_time = 8;
    RelativeDateTime on_relative_date_time = 9;
    MessageId on_message_id = 10;
    MessageFilter on_message_filter_pass = 11;
    MessageFilterChain on_message_filter_chain_pass = 12;
  }
}

message ConsumerSessionConfig {
  ConsumerSessionConfigStartFrom start_from = 1;
  MessageFilterChain message_filter_chain = 2;
  repeated ConsumerSessionConfigPauseTrigger pause_triggers = 3;
}

message CreateConsumerRequest {
  TopicsSelector topics_selector = 100;
  optional string consumer_name = 1;
  optional string subscription_name = 2;
  optional int32 priority_level = 3;
  optional bool start_paused = 4;
  optional SubscriptionMode subscription_mode = 5;
  optional SubscriptionType subscription_type = 6;
  optional int64 ack_timeout_ms = 8;
  optional int64 ack_timeout_tick_time_ms = 9;
  optional int64 expire_time_of_incomplete_chunked_message_ms = 10;
  optional int64 acknowledgment_group_time_ms = 11;
  optional int64 negative_ack_redelivery_delay_ms = 12;
  ConsumerSessionConfig consumer_session_config = 13;
}

message CreateConsumerResponse {
  google.rpc.Status status = 1;
}

message DeleteConsumerRequest {
  string consumer_name = 1;
}

message DeleteConsumerResponse {
  google.rpc.Status status = 1;
}

message JsMessageFilter {
  string js_code = 1;
}

message BasicMessageFilter {}

message MessageFilter {
  bool is_enabled = 10;
  bool is_negated = 11;
  oneof value {
    JsMessageFilter js = 1;
    BasicMessageFilter basic = 2;
  }
}

enum MessageFilterChainMode {
  MESSAGE_FILTER_CHAIN_MODE_UNSPECIFIED = 0;
  MESSAGE_FILTER_CHAIN_MODE_ALL = 1;
  MESSAGE_FILTER_CHAIN_MODE_ANY = 2;
}

message MessageFilterChain {
  bool is_enabled = 10;
  bool is_negated = 11;
  map<string, MessageFilter> filters = 1;
  MessageFilterChainMode mode = 2;
}

message ResumeRequest {
  string consumer_name = 1;
  bool include_consumer_stats = 2;
}

message ConsumerStats {}

message ResumeResponse {
  optional google.rpc.Status status = 1;
  repeated Message messages = 2;
  int64 processed_messages = 3;
  optional ConsumerStats consumer_stats = 4;
}

message PauseRequest {
  string consumer_name = 1;
}

message PauseResponse {
  google.rpc.Status status = 1;
}

message SeekRequest {
  string consumer_name = 1;
  oneof seek {
    google.protobuf.Timestamp timestamp = 2;
    bytes message_id = 3;
  }
}

message SeekResponse {
  google.rpc.Status status = 1;
}

message SkipMessagesRequest {
  string consumer_name = 1;
  string subscription_name = 2;
  int64 count = 3;
}

message SkipMessagesResponse {
  google.rpc.Status status = 1;
}

message RunCodeRequest {
  string consumer_name = 1;
  string code = 2;
}

message RunCodeResponse {
  google.rpc.Status status = 1;
  google.protobuf.StringValue result = 2;
}

service ConsumerService {
  rpc CreateConsumer(CreateConsumerRequest) returns (CreateConsumerResponse);
  rpc DeleteConsumer(DeleteConsumerRequest) returns (DeleteConsumerResponse);
  rpc Resume(ResumeRequest) returns (stream ResumeResponse);
  rpc Pause(PauseRequest) returns (PauseResponse);
  rpc Seek(SeekRequest) returns (SeekResponse);
  rpc SkipMessages(SkipMessagesRequest) returns (SkipMessagesResponse);
  rpc RunCode(RunCodeRequest) returns (RunCodeResponse);
}
