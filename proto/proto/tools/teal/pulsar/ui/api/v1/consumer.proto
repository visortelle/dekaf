syntax = "proto3";

package tools.teal.pulsar.ui.api.v1;

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";

message MessageId {
  int64 ledger_id = 1;
  int64 entry_id = 2;
  int32 batch_id = 3;
  int32 partition_idx = 4;
}

message Message {
  map<string, string> properties = 1;
  optional bytes value = 4;
  optional string json_value = 5;

  optional google.protobuf.Timestamp event_time = 7;
  optional google.protobuf.Timestamp publish_time = 6;
  optional google.protobuf.Timestamp broker_publish_time = 22;

  optional bytes message_id = 30;
  optional int64 sequence_id = 8;
  optional string producer_name = 9;
  optional string key = 10;
  optional bytes ordering_key = 11;
  optional string topic = 12;
  optional int32 redelivery_count = 13;
  optional int64 schema_version = 14;
  int32 size = 15;

  optional bool is_replicated = 20;
  optional string replicated_from = 21;

  string fold_like_json_accum = 50; // not a part of Pulsar message
}

enum SubscriptionMode {
  SUBSCRIPTION_MODE_UNSPECIFIED = 0;
  SUBSCRIPTION_MODE_DURABLE = 1;
  SUBSCRIPTION_MODE_NON_DURABLE = 2;
}

enum SubscriptionType {
  SUBSCRIPTION_TYPE_UNSPECIFIED = 0;
  SUBSCRIPTION_TYPE_EXCLUSIVE = 1;
  SUBSCRIPTION_TYPE_FAILOVER = 2;
  SUBSCRIPTION_TYPE_SHARED = 3;
  SUBSCRIPTION_TYPE_KEY_SHARED = 4;
}

enum SubscriptionInitialPosition {
  SUBSCRIPTION_INITIAL_POSITION_UNSPECIFIED = 0;
  SUBSCRIPTION_INITIAL_POSITION_EARLIEST = 1;
  SUBSCRIPTION_INITIAL_POSITION_LATEST = 2;
}

enum RegexSubscriptionMode {
  REGEX_SUBSCRIPTION_MODE_UNSPECIFIED = 0;
  REGEX_SUBSCRIPTION_MODE_PERSISTENT_ONLY = 1;
  REGEX_SUBSCRIPTION_MODE_NON_PERSISTENT_ONLY = 2;
  REGEX_SUBSCRIPTION_MODE_ALL_TOPICS = 3;
}

message TopicsSelectorByNames {
    repeated string topics = 1;
}

message TopicsSelectorByRegex {
  optional string pattern = 2;
  optional RegexSubscriptionMode regex_subscription_mode = 3;
}

message TopicsSelector {
  oneof topics_selector {
    TopicsSelectorByNames by_names = 1;
    TopicsSelectorByRegex by_regex = 2;
  }
}

message CreateConsumerRequest {
  TopicsSelector topics_selector = 100;
  optional string consumer_name = 1;
  optional string subscription_name = 2;
  optional int32 priority_level = 3;
  optional bool start_paused = 4;
  optional SubscriptionMode subscription_mode = 5;
  optional SubscriptionType subscription_type = 6;
  optional SubscriptionInitialPosition subscription_initial_position = 7;
  optional int64 ack_timeout_ms = 8;
  optional int64 ack_timeout_tick_time_ms = 9;
  optional int64 expire_time_of_incomplete_chunked_message_ms = 10;
  optional int64 acknowledgment_group_time_ms = 11;
  optional int64 negative_ack_redelivery_delay_ms = 12;
}

message CreateConsumerResponse {
  google.rpc.Status status = 1;
}

message DeleteConsumerRequest {
  string consumer_name = 1;
}

message DeleteConsumerResponse {
  google.rpc.Status status = 1;
}

message MessageFilter {
  string value = 1;
}

enum MessageFilterChainMode {
  MESSAGE_FILTER_CHAIN_MODE_UNSPECIFIED = 0;
  MESSAGE_FILTER_CHAIN_MODE_ALL = 1;
  MESSAGE_FILTER_CHAIN_MODE_ANY = 2;
}

message MessageFilterChain {
  map<string, MessageFilter> filters = 1;
  MessageFilterChainMode mode = 2;
}

message ResumeRequest {
  string consumer_name = 1;
  bool include_consumer_stats = 2;
  optional MessageFilterChain message_filter_chain = 3;
}

message ConsumerStats {
}

message ResumeResponse {
  optional google.rpc.Status status = 1;
  repeated Message messages = 2;
  int64 processed_messages = 3;
  optional ConsumerStats consumer_stats = 4;
}

message PauseRequest {
  string consumer_name = 1;
}

message PauseResponse {
  google.rpc.Status status = 1;
}

message SeekRequest {
  string consumer_name = 1;
  oneof seek {
    google.protobuf.Timestamp timestamp = 2;
    bytes message_id = 3;
  }
}

message SeekResponse {
  google.rpc.Status status = 1;
}

message SkipMessagesRequest {
  string consumer_name = 1;
  string subscription_name = 2;
  int64 count = 3;
}

message SkipMessagesResponse {
  google.rpc.Status status = 1;
}

service ConsumerService {
  rpc CreateConsumer(CreateConsumerRequest) returns (CreateConsumerResponse);
  rpc DeleteConsumer(DeleteConsumerRequest) returns (DeleteConsumerResponse);
  rpc Resume(ResumeRequest) returns (stream ResumeResponse);
  rpc Pause(PauseRequest) returns (PauseResponse);
  rpc Seek(SeekRequest) returns (SeekResponse);
  rpc SkipMessages(SkipMessagesRequest) returns (SkipMessagesResponse);
}
