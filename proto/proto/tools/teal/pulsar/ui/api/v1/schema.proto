syntax = "proto3";

package tools.teal.pulsar.ui.api.v1;

import "google/rpc/status.proto";

enum SchemaType {
  SCHEMA_TYPE_UNSPECIFIED = 0;
  SCHEMA_TYPE_NONE = 1;
  SCHEMA_TYPE_STRING = 2;
  SCHEMA_TYPE_JSON = 3;
  SCHEMA_TYPE_PROTOBUF = 4;
  SCHEMA_TYPE_AVRO = 5;
  SCHEMA_TYPE_BOOLEAN = 6;
  SCHEMA_TYPE_INT8 = 7;
  SCHEMA_TYPE_INT16 = 8;
  SCHEMA_TYPE_INT32 = 9;
  SCHEMA_TYPE_INT64 = 10;
  SCHEMA_TYPE_FLOAT = 11;
  SCHEMA_TYPE_DOUBLE = 12;
  SCHEMA_TYPE_DATE = 13;
  SCHEMA_TYPE_TIME = 14;
  SCHEMA_TYPE_TIMESTAMP = 15;
  SCHEMA_TYPE_KEY_VALUE = 16;
  SCHEMA_TYPE_INSTANT = 17;
  SCHEMA_TYPE_LOCAL_DATE = 18;
  SCHEMA_TYPE_LOCAL_TIME = 19;
  SCHEMA_TYPE_LOCAL_DATE_TIME = 20;
  SCHEMA_TYPE_PROTOBUF_NATIVE = 21;

  // Schemas that don't have schema info.
  SCHEMA_TYPE_BYTES = 22;
  SCHEMA_TYPE_AUTO_CONSUME = 23;
  SCHEMA_TYPE_AUTO_PUBLISH = 24;
}

message SchemaInfo {
  string name = 1;
  SchemaType type = 2;
  bytes schema = 3;
  map<string, string> properties = 4;
}

message FileEntry {
  string relative_path = 1;
  string content = 2;
}

message ProtobufNativeSchema {
  bytes raw_schema = 1;
  string human_readable_schema = 2;
}

message CompiledProtobufNativeFile {
  map<string, ProtobufNativeSchema> schemas = 1; // Schema for each message in the file.
  optional string compilation_error = 2;
}

message CreateSchemaRequest {
  string topic = 1;
  SchemaInfo schema_info = 2;
}

message CreateSchemaResponse {
  google.rpc.Status status = 1;
}

message GetLatestSchemaInfoRequest {
  string topic = 1;
}

message GetLatestSchemaInfoResponse {
  google.rpc.Status status = 1;
  SchemaInfo schema_info = 2;
  optional int64 schema_version = 3;
}

message DeleteSchemaRequest {
  string topic = 1;
}

message DeleteSchemaResponse {
  google.rpc.Status status = 1;
}

message ListSchemasRequest {
  string topic = 1;
}

message ListSchemasResponse {
  google.rpc.Status status = 1;
  repeated SchemaInfo schema_infos = 2;
}

message CompileProtobufNativeRequest {
  repeated FileEntry files = 1;
}

message CompileProtobufNativeResponse {
  google.rpc.Status status = 1;
  map<string, CompiledProtobufNativeFile> files = 2; // Compilation result for each file.
}

service SchemaService {
  rpc CreateSchema(CreateSchemaRequest) returns (CreateSchemaResponse);
  rpc GetLatestSchemaInfo(GetLatestSchemaInfoRequest) returns (GetLatestSchemaInfoResponse);
  rpc DeleteSchema(DeleteSchemaRequest) returns (DeleteSchemaResponse);
  rpc ListSchemas(ListSchemasRequest) returns (ListSchemasResponse);

  rpc CompileProtobufNative(CompileProtobufNativeRequest) returns (CompileProtobufNativeResponse);
}
