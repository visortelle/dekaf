syntax = "proto3";

package tools.teal.pulsar.ui.api.v1;

import "google/rpc/status.proto";

message FixedJsonGenerator {
  string json = 1;
}

message JsJsonGenerator {
  string js_code = 1;
}

enum InterpretJsonAs {
  INTERPRET_JSON_AS_UNSPECIFIED = 0;
  INTERPRET_JSON_AS_JSON = 1;
  INTERPRET_JSON_AS_BASE64_ENCODED_BYTES = 2;
  INTERPRET_JSON_AS_HEX_ENCODED_BYTES = 3;
}

message JsonGenerator {
  oneof generator {
    FixedJsonGenerator fixed_generator = 11;
    JsJsonGenerator js_generator = 12;
  }
  InterpretJsonAs interpret_json_as = 2;
}

message EmptyEventTimeGenerator {}
message AutoEventTimeGenerator {}
message FixedEventTimeGenerator {
  int64 event_time = 1;
}

message EventTimeGenerator {
  oneof generator {
    EmptyEventTimeGenerator empty_generator = 10;
    AutoEventTimeGenerator auto_generator = 11;
    FixedEventTimeGenerator fixed_generator = 12;
    JsonGenerator json_generator = 13;
  }
}

message EmptyKeyGenerator {}
message RandomKeyGenerator {
  int32 min_chars = 1;
  int32 max_chars = 2;
}
message FixedKeyGenerator {
  string key = 1;
}

message KeyGenerator {
  oneof generator {
    EmptyKeyGenerator empty_generator = 10;
    RandomKeyGenerator random_generator = 11;
    FixedKeyGenerator fixed_generator = 12;
    JsonGenerator json_generator = 13;
  }
}

message EmptyValueGenerator {}
message RandomBytesGenerator {
  int32 min_bytes = 1;
  int32 max_bytes = 2;
}

message ValueGenerator {
  oneof generator {
    EmptyValueGenerator empty_generator = 10;
    RandomBytesGenerator random_bytes_generator = 11;
    JsonGenerator json_generator = 12;
  }
}

message EmptyPropertiesGenerator {}

message PropertiesGenerator {
  oneof generator {
    EmptyPropertiesGenerator empty_generator = 10;
    JsonGenerator json_generator = 11;
  }
}

message MessageGenerator {
  KeyGenerator key_generator = 1;
  ValueGenerator value_generator = 2;
  PropertiesGenerator properties_generator = 3;
  EventTimeGenerator event_time_generator = 4;
}

message LocalScheduleRecurs {
  int64 n = 1;
}

message LocalScheduleSpaced {
  int64 duration_nanos = 2;
}

message LocalScheduleFixed {
  int64 duration_nanos = 2;
}

message LocalScheduleExponential {
  int64 base_duration_nanos = 1;
  int64 factor = 2;
}

message LocalScheduleFibonacci {
  int64 base_duration_nanos = 1;
}

enum LocalScheduleCombinator {
  LOCAL_SCHEDULE_COMBINATOR_UNSPECIFIED = 0;
  LOCAL_SCHEDULE_COMBINATOR_UNION = 1;
  LOCAL_SCHEDULE_COMBINATOR_INTERSECTION = 2;
  LOCAL_SCHEDULE_COMBINATOR_SEQUENCING = 3;
}

message LocalScheduleJittering {
  int32 min = 1; // 0.0
  int32 max = 2; // 1.0
}

enum CompressionType {
  COMPRESSION_TYPE_UNSPECIFIED = 0;
  COMPRESSION_TYPE_NONE = 1;
  COMPRESSION_TYPE_LZ4 = 2;
  COMPRESSION_TYPE_ZLIB = 3;
  COMPRESSION_TYPE_ZSTD = 4;
  COMPRESSION_TYPE_SNAPPY = 5;
}

enum HashingScheme {
  HASHING_SCHEME_UNSPECIFIED = 0;
  HASHING_SCHEME_JAVA_STRING_HASH = 1;
  HASHING_SCHEME_MURMUR3_32_HASH = 2;
}

message LocalSchedule {
  oneof schedule {
    LocalScheduleRecurs schedule_recurs = 1;
    LocalScheduleSpaced schedule_spaced = 2;
    LocalScheduleFixed schedule_fixed = 3;
    LocalScheduleExponential schedule_exponential = 4;
    LocalScheduleFibonacci schedule_fibonacci = 5;
    LocalSchedule schedule_schedule = 6;
  }
  LocalScheduleCombinator combinator = 7;
  LocalScheduleJittering jittering = 8;
}

message ProduceMessagesTask {
  string target_topic = 1;
  MessageGenerator generator = 2;
  LocalSchedule schedule = 3;
  int64 batch_time_window = 9;
  int64 batch_max_messages = 10;
  int64 batch_max_bytes = 11;
  int64 batch_max_publish_delay = 12;
  bool is_chunking_enabled = 13;
  CompressionType compression_type = 14;
  HashingScheme hashing_scheme = 15;
  map<string, string> producer_extra_properties = 16;
  int64 send_timeout_nanos = 17;
  int64 warmup_duration_nanos = 18;
  int64 warmup_messages = 19;
}

message ProducerStats {
  int64 num_messages_sent = 1;
  int64 num_bytes_sent = 2;
  int64 num_send_failed = 3;
  int64 num_acks_received = 4;
  double send_messages_rate = 5;
  double send_bytes_rate = 6;
  int64 total_messages_sent = 7;
  int64 total_bytes_sent = 8;
  int64 total_send_failed = 9;
  int64 total_acks_received = 10;
  int32 pending_queue_size = 11;
}

message ProducerSession {
  string session_id = 1;
  ProduceMessagesTask task = 2;
}

message CreateProducerSessionRequest {
  string session_id = 1;
  ProducerSession session = 2;
}

message CreateProducerSessionResponse {
  google.rpc.Status status = 1;
}

message DeleteProducerSessionRequest {
  string session_id = 1;
}

message DeleteProducerSessionResponse {
  google.rpc.Status status = 1;
}

message ProducerSessionStats {
  map<string, ProducerStats> stats_per_producer = 1;
}

message GetProducerSessionStatsRequest {
  string session_id = 1;
}

message GetProducerSessionStatsResponse {
  google.rpc.Status status = 1;
  ProducerSessionStats stats = 2;
}

message PauseProducerSessionRequest {
  string session_id = 1;
}

message PauseProducerSessionResponse {
  google.rpc.Status status = 1;
}

message ResumeProducerSessionRequest {
  string session_id = 1;
}

message ResumeProducerSessionResponse {
  google.rpc.Status status = 1;
}

service ProducerService {
  rpc CreateProducerSession(CreateProducerSessionRequest) returns (CreateProducerSessionResponse);
  rpc DeleteProducerSession(DeleteProducerSessionRequest) returns (DeleteProducerSessionResponse);
  rpc GetProducerSessionStats(GetProducerSessionStatsRequest) returns (GetProducerSessionStatsResponse);
  rpc PauseProducerSession(PauseProducerSessionRequest) returns (PauseProducerSessionResponse);
  rpc ResumeProducerSession(ResumeProducerSessionRequest) returns (ResumeProducerSessionResponse);
}
