syntax = "proto3";

package tools.teal.pulsar.ui.io.v1;

import "google/rpc/status.proto";

message Resources {
  double cpu = 1;
  int64 ram = 2;
  int64 disk = 3;
}

enum SubscriptionInitialPosition {
  SUBSCRIPTION_INITIAL_POSITION_UNSPECIFIED = 0;
  SUBSCRIPTION_INITIAL_POSITION_LATEST = 1;
  SUBSCRIPTION_INITIAL_POSITION_EARLIEST = 2;
}

enum ProducerCryptoFailureAction {
  PRODUCER_CRYPTO_FAILURE_ACTION_UNSPECIFIED = 0;
  PRODUCER_CRYPTO_FAILURE_ACTION_FAIL = 1;
  PRODUCER_CRYPTO_FAILURE_ACTION_SEND = 2;
}
enum ConsumerCryptoFailureAction {
  CONSUMER_CRYPTO_FAILURE_ACTION_UNSPECIFIED = 0;
  CONSUMER_CRYPTO_FAILURE_ACTION_FAIL = 1;
  CONSUMER_CRYPTO_FAILURE_ACTION_DISCARD = 2;
  CONSUMER_CRYPTO_FAILURE_ACTION_CONSUME = 3;
}

message CryptoConfig {
  string crypto_key_reader_class_name = 1;
  string crypto_key_reader_config = 2; // map<String, Json(Object)>
  repeated string encryption_keys = 3;
  ProducerCryptoFailureAction producer_crypto_failure_action = 4;
  ConsumerCryptoFailureAction consumer_crypto_failure_action = 5;
}

message InputsSpecs {
  string schema_type = 1;
  string serde_class_name = 2;
  bool is_regex_pattern = 3;
  map<string, string> schema_properties = 4;
  map<string, string> consumer_properties = 5;
  int32 receiver_queue_size = 6;
  CryptoConfig crypto_config = 7;
  bool pool_messages = 8;
}

enum ProcessingGuarantees {
  PROCESSING_GUARANTEES_UNSPECIFIED = 0;
  PROCESSING_GUARANTEES_ATLEAST_ONCE = 1;
  PROCESSING_GUARANTEES_ATMOST_ONCE = 2;
  PROCESSING_GUARANTEES_EFFECTIVELY_ONCE = 3;
  PROCESSING_GUARANTEES_MANUAL = 4;
}

enum PathType {
  PATH_TYPE_UNSPECIFIED = 0;
  PATH_TYPE_URL = 1;
  PATH_TYPE_FOLDER = 2;
}

message PathToConnector {
  PathType type = 1;
  string path = 2;
}

enum SinkType {
  SINK_TYPE_UNSPECIFIED = 0;
  SINK_TYPE_AEROSPIKE = 1;
  SINK_TYPE_ALLUXIO = 2;
  SINK_TYPE_CASSANDRA = 3;
  SINK_TYPE_ELASTIC_SEARCH = 4;
  SINK_TYPE_FLUME = 5;
  SINK_TYPE_HBASE = 6;
  SINK_TYPE_HDFS2 = 7;
  SINK_TYPE_HDFS3 = 8;
  SINK_TYPE_HTTP = 9;
  SINK_TYPE_INFLUXDB_V1 = 10;
  SINK_TYPE_INFLUXDB_V2 = 11;
  SINK_TYPE_JDBC_CLICK_HOUSE = 12;
  SINK_TYPE_JDBC_MARIA_DB = 13;
  SINK_TYPE_JDBC_OPEN_MLDB = 14;
  SINK_TYPE_JDBC_POSTRGRES = 15;
  SINK_TYPE_JDBC_SQLITE = 16;
  SINK_TYPE_KAFKA = 17;
  SINK_TYPE_KINESIS = 18;
  SINK_TYPE_MONGODB = 19;
  SINK_TYPE_RABBITMQ = 20;
  SINK_TYPE_REDIS = 21;
  SINK_TYPE_SOLR = 22;
}

enum ClassName {
  CLASS_NAME_UNSPECIFIED = 0;
  CLASS_NAME_AEROSPIKE_STRING_SINK = 1;
  CLASS_NAME_ALLUXIO_SINK = 2;
  CLASS_NAME_CASSANDRA_STRING_SINK = 3;
  CLASS_NAME_ELASTIC_SEARCH_SINK = 4;
  CLASS_NAME_STRING_SINK = 5;
  CLASS_NAME_HBASE_ABSTRACT_CONFIG = 6;
  CLASS_NAME_ABSTRACT_HDFS2_CONNECTOR = 7;
  CLASS_NAME_ABSTRACT_HDFS3_CONNECTOR = 8;
  CLASS_NAME_HTTP_SINK = 9;
  CLASS_NAME_CLICK_HOUSE_JDBC_AUTO_SCHEMA_SINK = 10;
  CLASS_NAME_INFLUXDB_GENERIC_RECORD_SINK = 11;
  CLASS_NAME_MARIADB_JDBC_AUTO_SCHEMA_SINK = 12;
  CLASS_NAME_OPEN_MLDB_JDBC_AUTO_SCHEMA_SINK = 13;
  CLASS_NAME_POSTGRES_JDBC_AUTO_SCHEMA_SINK = 14;
  CLASS_NAME_SQLITE_JDBC_AUTO_SCHEMA_SINK = 15;
  CLASS_NAME_KAFKA_ABSTRACT_SINK = 16;
  CLASS_NAME_KINESIS_SINK = 17;
  CLASS_NAME_MONGO_SINK = 18;
  CLASS_NAME_RABBIT_MQ_SINK = 19;
  CLASS_NAME_REDIS_ABSTRACT_CONFIG = 20;
  CLASS_NAME_SOLR_SINK_CONFIG = 21;
}

message SinkConfig {
  string tenant = 1;
  string namespace = 2;
  string name = 3;
  ClassName class_name = 4;
  string source_subscription_name = 5;
  SubscriptionInitialPosition source_subscription_position = 6;
  repeated string inputs = 7;
  map<string, string> topic_to_serde_class_name = 8;
  string topics_pattern = 9;
  map<string, string> topic_to_schema_type = 10;
  map<string, string> topic_to_schema_properties = 11;
  map<string, InputsSpecs> input_specs = 12;
  int32 max_message_retries = 13;
  string dead_letter_topic = 14;
  string configs = 15; // map<String, Json(Object)>
  string secrets = 16; // map<String, Json(Object)>
  int32 parallelism = 17;
  ProcessingGuarantees processing_guarantees = 18;
  bool retain_ordering = 19;
  bool retain_key_ordering = 20;
  Resources resources = 21;
  bool auto_ack = 22;
  int64 timeout_ms = 23;
  int64 negative_ack_redelivery_delay_ms = 24;
  string archive = 25;
  bool cleanup_subscription = 26;
  string runtime_flags = 27;
  string custom_runtime_options = 28;
  PathToConnector path_to_connector = 29;
  SinkType sink_type = 30;
}

message Sinks {
  string name = 1;
  int32 running = 5;
  int32 num_instances = 6;
  int32 num_running = 7;
  int32 reads = 8;
  int32 writes = 9;
}

message ProducerConfig {
  int32 max_pending_messages = 1;
  int32 max_pending_messages_across_partitions = 2;
  bool use_thread_local_producers = 3;
  CryptoConfig crypto_config = 4;
  string batch_builder = 5;
}

message BatchSourceConfig {
  string batchsource_config_key = 1;
  string batchsource_classname_key = 2;
  string discovery_triggerer_class_name = 3;
  string discovery_triggerer_config = 4; // map<String, Json(Object)>
}

message Source {
  string tenant = 1;
  string namespace = 2;
  string name = 3;
  string class_name = 4;
  string topic_name = 5;
  ProducerConfig producer_config = 6;
  string serde_class_name = 7;
  string schema_type = 8;
  string configs = 9; // map<String, Json(Object)>
  string secrets = 10; // map<String, Json(Object)>
  int32 parallelism = 11;
  ProcessingGuarantees processing_guarantees = 12;
  Resources resources = 13;
  string archive = 14;
  string runtime_flags = 15;
  string custom_runtime_options = 16;
  BatchSourceConfig batch_source_config = 17;
  string batch_builder = 18;
}

message CreateSinkRequest {
  google.rpc.Status status = 1;
  SinkConfig sink_config = 2;
}
message CreateSinkResponse {
  google.rpc.Status status = 1;
}

message GetSinksRequest {
  google.rpc.Status status = 1;
  string tenant = 2;
  string namespace = 3;
}
message GetSinksResponse {
  google.rpc.Status status = 1;
  repeated Sinks sinks = 2;
}

message GetSinkRequest {
  google.rpc.Status status = 1;
  string tenant = 2;
  string namespace = 3;
  string sink = 4;
}
message GetSinkResponse {
  google.rpc.Status status = 1;
  SinkConfig sink_config = 2;
}

message UpdateSinkRequest {
  google.rpc.Status status = 1;
  SinkConfig sink_config = 2;
}
message UpdateSinkResponse {
  google.rpc.Status status = 1;
}

message DeleteSinkRequest {
  google.rpc.Status status = 1;
  string tenant = 2;
  string namespace = 3;
  string sink = 4;
}
message DeleteSinkResponse {
  google.rpc.Status status = 1;
}

message CreateSourceRequest {
  google.rpc.Status status = 1;
  Source source = 2;
}
message CreateSourceResponse {
  google.rpc.Status status = 1;
}

message GetListSourcesRequest {
  google.rpc.Status status = 1;
  string tenant = 2;
  string namespace = 3;
}
message GetListSourcesResponse {
  google.rpc.Status status = 1;
  repeated string sources = 2;
}

message GetSourceRequest {
  google.rpc.Status status = 1;
  string tenant = 2;
  string namespace = 3;
  string source = 4;
}
message GetSourceResponse {
  google.rpc.Status status = 1;
  Source source = 2;
}

message UpdateSourceRequest {
  google.rpc.Status status = 1;
  Source source = 2;
}
message UpdateSourceResponse {
  google.rpc.Status status = 1;
}

message DeleteSourceRequest {
  google.rpc.Status status = 1;
  string tenant = 2;
  string namespace = 3;
  string source = 4;
}

message DeleteSourceResponse {
  google.rpc.Status status = 1;
}

service IoService {
  rpc CreateSink(CreateSinkRequest) returns (CreateSinkResponse);
  rpc GetSinks(GetSinksRequest) returns (GetSinksResponse);
  rpc GetSink(GetSinkRequest) returns (GetSinkResponse);
  rpc UpdateSink(UpdateSinkRequest) returns (UpdateSinkResponse);
  rpc DeleteSink(DeleteSinkRequest) returns (DeleteSinkResponse);

  rpc CreateSource(CreateSourceRequest) returns (CreateSourceResponse);
  rpc GetListSources(GetListSourcesRequest) returns (GetListSourcesResponse);
  rpc GetSource(GetSourceRequest) returns (GetSourceResponse);
  rpc UpdateSource(UpdateSourceRequest) returns (UpdateSourceResponse);
  rpc DeleteSource(DeleteSourceRequest) returns (DeleteSourceResponse);
}