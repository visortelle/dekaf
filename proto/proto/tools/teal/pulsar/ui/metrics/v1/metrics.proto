syntax = "proto3";

package tools.teal.pulsar.ui.metrics.v1;

import "google/rpc/status.proto";

message TenantMetrics {
  double in_rate = 2;
  double in_tp_rate = 3;
  double max_replication_delay_second = 4;
  double msg_backlog = 5;
  double no_of_consumers = 6;
  double no_of_producers = 7;
  double no_of_replicators = 8;
  double no_of_subscriptions = 9;
  double out_rate = 10;
  double out_tp_rate = 11;
  double replication_backlog = 12;
  double storage_size = 13;
  map<string, double> add_entry_latency_buckets = 14;
}

message NamespaceMetrics {
  double in_rate = 2;
  double in_tp_rate = 3;
  double max_replication_delay_second = 4;
  double msg_backlog = 5;
  double no_of_consumers = 6;
  double no_of_producers = 7;
  double no_of_replicators = 8;
  double no_of_subscriptions = 9;
  double out_rate = 10;
  double out_tp_rate = 11;
  double replication_backlog = 12;
  double storage_size = 13;
  map<string, double> add_entry_latency_buckets = 14;
}

message OptionalNamespaceMetrics {
  optional NamespaceMetrics metrics = 1;
}

message NamespacePersistentMetrics {
  double add_entry_bytes_rate = 1;
  double add_entry_errors = 2;
  map<string, double> add_entry_latency_buckets = 3;
  double add_entry_messages_rate = 4;
  double add_entry_succeed = 5;
  double add_entry_with_replicas_bytes_rate = 6;
  map<string, double> entry_size_buckets = 7;
  map<string, double> ledger_add_entry_latency_buckets = 8;
  map<string, double> ledger_switch_latency_buckets = 9;
  double mark_delete_rate = 10;
  double number_of_messages_in_backlog = 11;
  double read_entries_bytes_rate = 12;
  double read_entries_errors = 13;
  double read_entries_rate = 14;
  double read_entries_succeeded = 15;
  double stored_messages_size = 16;
}

message OptionalNamespacePersistentMetrics {
  optional NamespacePersistentMetrics metrics = 1;
}

message GetTenantsMetricsRequest {
  repeated string tenants = 1;
}

message GetTenantsMetricsResponse {
  google.rpc.Status status = 1;
  map<string, TenantMetrics> tenants_metrics = 2;
}

message GetNamespacesMetricsRequest {
  repeated string namespaces = 1;
}

message GetNamespacesMetricsResponse {
  google.rpc.Status status = 1;
  map<string, OptionalNamespaceMetrics> namespaces_metrics = 2;
  map<string, OptionalNamespacePersistentMetrics> namespaces_persistent_metrics = 3;
}

service MetricsService {
  rpc GetTenantsMetrics(GetTenantsMetricsRequest) returns (GetTenantsMetricsResponse);
  rpc GetNamespacesMetrics(GetNamespacesMetricsRequest) returns (GetNamespacesMetricsResponse);
}
