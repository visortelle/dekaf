on:
  push:
    tags:
      - '**'

jobs:
  # build-desktop-app:
  #   strategy:
  #     matrix:
  #       include:
  #         - runner: ubuntu-22.04
  #           release-platform: linux-x86
  #         # - runner: macos-13 # Intel
  #             # release-platform: macos-x64
  #         # - runner: macos-14 # M1
  #             # release-platform: macos-aarch64

  #   runs-on: ["${{ matrix.runner }}"]

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Git LFS Pull
  #       run: git lfs pull

  #     - uses: DeterminateSystems/nix-installer-action@main
  #     - uses: DeterminateSystems/magic-nix-cache-action@main
  #     - uses: DeterminateSystems/flake-checker-action@main

  #     - name: Build Desktop App
  #       run: |
  #         uname -a
  #         nix build -L
  #         nix-shell --run 'make build-desktop-app'

  #     - uses: aws-actions/configure-aws-credentials@v1
  #       name: Upload Dekaf Desktop release to S3
  #       with:
  #         aws-access-key-id: ${{ secrets.DEKAF_AWS_RELEASE_MANAGER_SECRET_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.DEKAF_AWS_RELEASE_MANAGER_SECRET_KEY }}
  #         aws-region: us-east-2
  #     - run: aws s3 sync desktop/electron/release/build/ s3://dekaf-desktop-releases/${{ github.ref_name }}/${{ matrix.release-platform }} --delete

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: dekaf-tgz-${{ matrix.runner }}
  #         path: server/target/universal/dekaf.tgz
  #         compression-level: 0
  #         overwrite: true
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: dekaf-demoapp-tgz-${{ matrix.runner }}
  #         path: demoapp/target/universal/dekaf-demoapp.tgz
  #         compression-level: 0
  #         overwrite: true

  # build-desktop-app-windows:
  #   needs: [build-desktop-app]
  #   strategy:
  #     matrix:
  #       include:
  #         - runner: windows-2022

  #   runs-on: ["${{ matrix.runner }}"]

  #   env:
  #     NODE_OPTIONS: "--max-old-space-size=4096"

  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Git LFS Pull
  #       run: git lfs pull

  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20.x'

  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: dekaf-tgz-ubuntu-22.04
  #         path: server/target/universal/
  #     - uses: actions/download-artifact@v4
  #       with:
  #         name: dekaf-demoapp-tgz-ubuntu-22.04
  #         path: demoapp/target/universal/

  #     - name: Build Desktop App
  #       shell: pwsh
  #       run: |
  #         cd desktop/electron
  #         npm ci
  #         npm run package

  #     - uses: aws-actions/configure-aws-credentials@v1
  #       name: Upload Dekaf Desktop release to S3
  #       with:
  #         aws-access-key-id: ${{ secrets.DEKAF_AWS_RELEASE_MANAGER_SECRET_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.DEKAF_AWS_RELEASE_MANAGER_SECRET_KEY }}
  #         aws-region: us-east-2
  #     - run: aws s3 sync desktop/electron/release/build/ s3://dekaf-desktop-releases/${{ github.ref_name }}/windows-x64 --delete

  build-docker-images:
    strategy:
      matrix:
        include:
          - runner: ubuntu-22.04
            release-platform: linux-x86

    runs-on: ["${{ matrix.runner }}"]

    env:
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Git LFS Pull
        run: git lfs pull

      - name: Installing Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          install_options: --no-daemon
          extra_nix_config: experimental-features = nix-command flakes

      - name: Build Docker images
        shell: bash
        run: nix-shell --run 'make build-docker-images'

  post-build-docker-images:
    runs-on: ubuntu-22.04
    needs: build-docker-images

    env:
      # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
      # EKS_CLUSTER_REGION: ${{ secrets.EKS_CLUSTER_REGION }}
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      # PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Git LFS Pull
        run: git lfs pull

      - name: Installing Nix
        uses: cachix/install-nix-action@v22
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          install_options: --no-daemon
          extra_nix_config: experimental-features = nix-command flakes

      - name: Create multiarch Docker manifest
        shell: bash
        run: nix-shell --run 'make create-multiarch-docker-manifest'

      # - name: Publish Helm chart
      #   shell: bash
      #   run: nix-shell --run 'make publish-helm-chart'

      # - name: Deploy Dekaf demo
      #   shell: bash
      #   run: nix-shell --run 'cd ./deployment/dekaf && make deploy'
