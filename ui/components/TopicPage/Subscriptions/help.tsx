import React, { ReactNode } from "react";
import { ColumnKey } from "./Subscriptions";
import A from "../../ui/A/A";

export const help: Record<ColumnKey, ReactNode> = {
  activeConsumerName: "The name of the consumer that is active for single active consumer subscriptions (such as failover or exclusive).",
  backlogSize: "The size of backlog for this subscription.",
  bytesOutCounter: "The total bytes delivered to a consumer.",
  chunkedMessageRate: "	The total rate of chunked messages delivered to this consumer.",
  consumersAfterMarkDeletePosition: <div>Get <code>recentJoinedConsumers</code> for the Key_Shared subscription.</div>,
  consumersCount: "Count of consumers for this subscription.",
  delayedMessageIndexSizeInBytes: <div>The size of <code>DelayedDeliveryTracer</code> memory usage.</div>,
  earliestMsgPublishTimeInBacklog: "The publish time of the earliest message in the backlog for the subscription.",
  filterAcceptedMsgCount: <div>The number of messages accepted by <code>EntryFilter</code>.</div>,
  filterProcessedMsgCount: <div>The number of messages processed by <code>EntryFilter</code>.</div>,
  filterRejectedMsgCount: <div>The number of messages rejected by <code>EntryFilter</code>.</div>,
  filterRescheduledMsgCount: <div>The number of messages rescheduled by <code>EntryFilter</code>.</div>,
  isAllowOutOfOrderDelivery: "Whether out of order delivery is allowed on the Key_Shared subscription.",
  isBlockedSubscriptionOnUnackedMsgs: "Flag to verify if subscription is blocked due to reaching threshold of unacked messages.",
  isDurable: "Tells whether this subscription is durable or ephemeral (eg.: from a reader).",
  isReplicated: "Mark that the subscription state is kept in sync across different regions, allowing consumers to resume at the last failure point across clusters during failover",
  keySharedMode: <div>Whether the Key_Shared subscription mode is <code>AUTO_SPLIT</code> or <code>STICKY</code>.</div>,
  lastAckedTimestamp: "Last acked message timestamp.",
  lastConsumedFlowTimestamp: "Last received consume flow command timestamp.",
  lastConsumedTimestamp: "Last consume message timestamp.",
  lastExpireTimestamp: "Last message expire execution timestamp.",
  lastMarkDeleteAdvancedTimestamp: "Last MarkDelete position advanced timesetamp.",
  messageAckRate: "Total rate of message ack.",
  msgBacklog: "Number of entries in the subscription backlog.",
  msgBacklogNoDelayed: "Number of entries in the subscription backlog that do not contain the delay messages.",
  msgDelayed: "Number of delayed messages currently being tracked.",
  msgOutCounter: "Total messages delivered to consumer.",
  msgRateExpired: "Total rate of messages expired on this subscription.",
  msgRateOut: "Total rate of messages delivered on this subscription.",
  msgRateRedeliver: "Total rate of messages redelivered on this subscription.",
  msgThroughputOut: "Total throughput delivered on this subscription.",
  nonContiguousDeletedMessagesRanges: "The number of non-contiguous deleted messages ranges.",
  nonContiguousDeletedMessagesRangesSerializedSize: "The serialized size of non-contiguous deleted messages ranges.",
  subscriptionName: "The name of the subscription.",
  subscriptionProperties: "SubscriptionProperties (key/value strings) associated with this subscribe.",
  totalMsgExpired: "Total messages expired on this subscription.",
  type: <div>The subscription type. Can be <code>Exclusive</code>, <code>Shared</code>, <code>Failover</code>, or <code>Key Shared</code>.</div>,
  unackedMessages: "Number of unacknowledged messages for the subscription, where an unacknowledged message is one that has been sent to a consumer but not yet acknowledged."
};
