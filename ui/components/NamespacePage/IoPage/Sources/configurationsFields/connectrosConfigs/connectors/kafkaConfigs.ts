import { IoConfigField } from "../../../../IoConfigField/IoConfigField";
import { StringMap } from "../../../../Sinks/configurationsFields/configurationsFields";

export const kafkaFields: IoConfigField[] = [
  {
    name: 'bootstrapServers',
    type: 'string',
    isRequired: true,
    help: 'help',
    label: 'Bootstrap servers',
  },
  {
    name: 'groupId',
    type: 'string',
    isRequired: true,
    help: 'help',
    label: 'Group id',
  },
  {
    name: 'topic',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Topic',
  },
  {
    name: 'securityProtocol',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Security protocol',
  },
  {
    name: 'saslMechanism',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Sasl mechanism',
  },
  {
    name: 'saslJaasConfig',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Sasl jaas config',
  },
  {
    name: 'sslEnabledProtocols',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Ssl enabled protocols',
  },
  {
    name: 'sslEndpointIdentificationAlgorithm',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Ssl endpoint identification algorithm',
  },
  {
    name: 'sslTruststoreLocation',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Ssl truststore location',
  },
  {
    name: 'sslTruststorePassword',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Ssl truststore password',
  },
  {
    name: 'fetchMinBytes',
    type: 'int',
    isRequired: false,
    help: 'help',
    label: 'Fetch min bytes',
  },
  {
    name: 'autoCommitEnabled',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Auto commit enabled',
  },
  {
    name: 'autoCommitIntervalMs',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Auto commit interval',
  },
  {
    name: 'heartbeatIntervalMs',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Heartbeat interval',
  },
  {
    name: 'sessionTimeoutMs',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Session timeout',
  },
  {
    name: 'consumerConfigProperties',
    type: 'map',
    isRequired: false,
    help: 'help',
    label: 'Consumer config properties',
  },
  {
    name: 'keyDeserializationClass',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Key deserialization class',
  },
  {
    name: 'valueDeserializationClass',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Value deserialization class',
  },
  {
    name: 'autoOffsetReset',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Auto offset reset',
  },
];

export type KafkaConfigs = {
  [key: string]: string | number | boolean | StringMap,
  bootstrapServers: string,
  groupId: string,
  topic: string,
  securityProtocol: string,
  saslMechanism: string,
  saslJaasConfig: string,
  sslEnabledProtocols: string,
  sslEndpointIdentificationAlgorithm: string,
  sslTruststoreLocation: string,
  sslTruststorePassword: string,
  fetchMinBytes: number,
  autoCommitEnabled: boolean,
  autoCommitIntervalMs: number,
  heartbeatIntervalMs: number,
  sessionTimeoutMs: number,
  consumerConfigProperties: StringMap,
  keyDeserializationClass: string,
  valueDeserializationClass: string,
  autoOffsetReset: string,
}

export const kafkaDefault: KafkaConfigs = {
  bootstrapServers: '',
  groupId: '',
  topic: '',
  securityProtocol: '',
  saslMechanism: '',
  saslJaasConfig: '',
  sslEnabledProtocols: '',
  sslEndpointIdentificationAlgorithm: '',
  sslTruststoreLocation: '',
  sslTruststorePassword: '',
  fetchMinBytes: 0,
  autoCommitEnabled: true,
  autoCommitIntervalMs: 0,
  heartbeatIntervalMs: 0,
  sessionTimeoutMs: 0,
  consumerConfigProperties: {},
  keyDeserializationClass: '',
  valueDeserializationClass: '',
  autoOffsetReset: '',
}