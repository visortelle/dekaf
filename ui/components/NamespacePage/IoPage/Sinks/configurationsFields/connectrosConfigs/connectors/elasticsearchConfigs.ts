import { IoConfigField } from "../../../../IoConfigField/IoConfigField";

const NULL_VALUE_ACTION = [ { value: 'ignore', label: 'Ignore' }, { value: 'delete', label: 'Delete' }, { value: 'fail', label: 'Fail' } ]; // IGNORE DELETE FAIL
type NullValueAction = 'ignore' | 'delete' | 'fail';

const MALFORMED_DOC_ACTION = [ { value: 'ignore', label: 'Ignore' }, { value: 'warn', label: 'Warn' }, { value: 'fail', label: 'Fail' } ]; // IGNORE WARN FAIL
type MalformedDocAction = 'ignore' | 'warn' | 'fail';

const COMPATIBILITY_MODE = [ { value: 'auto', label: 'Auto' }, { value: 'elasticsearch', label: 'Elastic search' }, { value: 'elasticsearch_7', label: 'Elastic search 7' }, { value: 'opensearch', label: 'Open search' } ]; // AUTO ELASTICSEARCH ELASTICSEARCH_7 OPENSEARCH
type CompatibilityMode = 'auto' | 'elasticsearch' | 'elasticsearch_7' | 'opensearch';

const ID_HASHING_ALGORITHM = [ { value: 'none', label: 'None' }, { value: 'sha256', label: 'sha256' }, { value: 'sha512', label: 'sha512' } ]; // NONE,SHA256,SHA512
type IdHashingAlgorithm = 'none' | 'sha256' | 'sha512';

export type ElasticSearchSslConfigs = {
  [key: string]: string | boolean,
  enabled: boolean,
  hostnameVerification: boolean,
  disableCertificateValidation: boolean,
  truststorePath: string,
  truststorePassword: string,
  keystorePath: string,
  keystorePassword: string,
  cipherSuites: string,
  protocols: string,
}

export type ElasticSearchConfigs = {
  [key: string]: string | boolean | number | ElasticSearchSslConfigs,
  elasticSearchUrl: string,
  indexName: string,
  schemaEnable: boolean,
  createIndexIfNeeded: boolean,
  maxRetries: number,
  retryBackoffInMs: number,
  maxRetryTimeInSec: number,
  bulkEnabled: boolean,
  bulkActions: number,
  bulkSizeInMb: number,
  bulkConcurrentRequests: number,
  bulkFlushIntervalInMs: number,
  compressionEnabled: boolean,
  connectTimeoutInMs: number,
  connectionRequestTimeoutInMs: number,
  connectionIdleTimeoutInMs: number,
  keyIgnore: boolean,
  primaryFields: string,
  nullValueAction: NullValueAction,
  malformedDocAction: MalformedDocAction,
  stripNulls: boolean,
  socketTimeoutInMs: number,
  typeName: string,
  indexNumberOfShards: number,
  indexNumberOfReplicas: number,
  username: string,
  password: string,
  compatibilityMode: CompatibilityMode,
  token: string,
  apiKey: string,
  canonicalKeyFields: boolean,
  stripNonPrintableCharacters: boolean,
  idHashingAlgorithm: IdHashingAlgorithm,
  conditionalIdHashing: boolean,
  copyKeyFields: boolean,
  ssl: ElasticSearchSslConfigs,
}

export const elasticSearchFields: IoConfigField[] = [
  {
    name: 'elasticSearchUrl',
    type: 'string',
    isRequired: true,
    help: 'help',
    label: 'Elastic search url',
  },
  {
    name: 'indexName',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Index name',
  },
  {
    name: 'schemaEnable',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Schema enable',
  },
  {
    name: 'createIndexIfNeeded',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Create index if needed',
  },
  {
    name: 'maxRetries',
    type: 'int',
    isRequired: false,
    help: 'help',
    label: 'Max retries',
  },
  {
    name: 'retryBackoffInMs',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Retry backoff',
  },
  {
    name: 'maxRetryTimeInSec',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Max retry time',
  },
  {
    name: 'bulkEnabled',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Bulk enabled',
  },
  {
    name: 'bulkActions',
    type: 'int',
    isRequired: false,
    help: 'help',
    label: 'Bulk actions',
  },
  {
    name: 'bulkSizeInMb',
    type: 'bytes',
    isRequired: false,
    help: 'help',
    label: 'Bulk size',
  },
  {
    name: 'bulkConcurrentRequests',
    type: 'int',
    isRequired: false,
    help: 'help',
    label: 'Bulk concurrent requests',
  },
  {
    name: 'bulkFlushIntervalInMs',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Bulk flush interval',
  },
  {
    name: 'compressionEnabled',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Compression enabled',
  },
  {
    name: 'connectTimeoutInMs',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Connect timeout',
  },
  {
    name: 'connectionRequestTimeoutInMs',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Connection request timeout',
  },
  {
    name: 'connectionIdleTimeoutInMs',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Connection idle timeout',
  },
  {
    name: 'keyIgnore',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Key ignore',
  },
  {
    name: 'primaryFields',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Primary fields',
  },
  {
    name: 'nullValueAction',
    type: 'enum',
    isRequired: false,
    help: 'help',
    label: 'Null value action',
    enum: NULL_VALUE_ACTION
  },
  {
    name: 'malformedDocAction',
    type: 'enum',
    isRequired: false,
    help: 'help',
    label: 'Malformed doc action',
    enum: MALFORMED_DOC_ACTION,
  },
  {
    name: 'stripNulls',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Strip nulls',
  },
  {
    name: 'socketTimeoutInMs',
    type: 'duration',
    isRequired: false,
    help: 'help',
    label: 'Socket timeout',
  },
  {
    name: 'typeName',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Type name',
  },
  {
    name: 'indexNumberOfShards',
    type: 'int',
    isRequired: false,
    help: 'help',
    label: 'Index number of shards',
  },
  {
    name: 'indexNumberOfReplicas',
    type: 'int',
    isRequired: false,
    help: 'help',
    label: 'Index number of replicas',
  },
  {
    name: 'username',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Username',
  },
  {
    name: 'password',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Password',
  },
  {
    name: 'compatibilityMode',
    type: 'enum',
    isRequired: false,
    help: 'help',
    label: 'Compatibility mode',
    enum: COMPATIBILITY_MODE,
  },
  {
    name: 'token',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Token',
  },
  {
    name: 'apiKey',
    type: 'string',
    isRequired: false,
    help: 'help',
    label: 'Api key',
  },
  {
    name: 'canonicalKeyFields',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Canonical key fields',
  },
  {
    name: 'stripNonPrintableCharacters',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Strip non printable characters',
  },
  {
    name: 'idHashingAlgorithm',
    type: 'enum',
    isRequired: false,
    help: 'help',
    label: 'Id hashing algorithm',
    enum: ID_HASHING_ALGORITHM
  },
  {
    name: 'conditionalIdHashing',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Conditional id hashing',
  },
  {
    name: 'copyKeyFields',
    type: 'boolean',
    isRequired: false,
    help: 'help',
    label: 'Copy key fields',
  },
  {
    name: 'ssl',
    type: 'attachments',
    isRequired: false,
    help: 'help',
    label: 'SSL',
    attachments: [
      {
        name: 'enabled',
        type: 'boolean',
        isRequired: false,
        help: 'help',
        label: 'Enabled',
      },
      {
        name: 'hostnameVerification',
        type: 'boolean',
        isRequired: false,
        help: 'help',
        label: 'Hostname verification',
      },
      {
        name: 'disableCertificateValidation',
        type: 'boolean',
        isRequired: false,
        help: 'help',
        label: 'Disable certificate validation',
      },
      {
        name: 'truststorePath',
        type: 'string',
        isRequired: false,
        help: 'help',
        label: 'Truststore path',
      },
      {
        name: 'truststorePassword',
        type: 'string',
        isRequired: false,
        help: 'help',
        label: 'Truststore password',
      },
      {
        name: 'keystorePath',
        type: 'string',
        isRequired: false,
        help: 'help',
        label: 'Keystore path',
      },
      {
        name: 'keystorePassword',
        type: 'string',
        isRequired: false,
        help: 'help',
        label: 'Keystore password',
      },
      {
        name: 'cipherSuites',
        type: 'string',
        isRequired: false,
        help: 'help',
        label: 'Cipher suites',
      },
      {
        name: 'protocols',
        type: 'string',
        isRequired: false,
        help: 'help',
        label: 'Protocols',
      },
    ],
  },
]

export const elasticSearchDefault: ElasticSearchConfigs = {
  elasticSearchUrl: '',
  indexName: '',
  schemaEnable: false,
  createIndexIfNeeded: false,
  maxRetries: 1,
  retryBackoffInMs: 100,
  maxRetryTimeInSec: 86400,
  bulkEnabled: false,
  bulkActions: 1000,
  bulkSizeInMb: 5,
  bulkConcurrentRequests: 0,
  bulkFlushIntervalInMs: 1000,
  compressionEnabled: false,
  connectTimeoutInMs: 5000,
  connectionRequestTimeoutInMs: 1000,
  connectionIdleTimeoutInMs: 5,
  keyIgnore: true,
  primaryFields: 'id',
  nullValueAction: 'ignore',
  malformedDocAction: 'fail',
  stripNulls: true,
  socketTimeoutInMs: 60000,
  typeName: '_doc',
  indexNumberOfShards: 1,
  indexNumberOfReplicas: 1,
  username: '',
  password: '',
  compatibilityMode: 'auto',
  token: '',
  apiKey: '',
  canonicalKeyFields: false,
  stripNonPrintableCharacters: true,
  idHashingAlgorithm: 'none',
  conditionalIdHashing: false,
  copyKeyFields: false,
  ssl: {
    enabled: false,
    hostnameVerification: true,
    disableCertificateValidation: true,
    truststorePath: '',
    truststorePassword: '',
    keystorePath: '',
    keystorePassword: '',
    cipherSuites: '',
    protocols: 'TLSv1.2',
  },
}