// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

@SerialVersionUID(0L)
final case class MessageId(
    ledgerId: _root_.scala.Long = 0L,
    entryId: _root_.scala.Long = 0L,
    batchId: _root_.scala.Int = 0,
    partitionIdx: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MessageId] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = ledgerId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = entryId
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = batchId
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      
      {
        val __value = partitionIdx
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = ledgerId
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = entryId
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = batchId
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = partitionIdx
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withLedgerId(__v: _root_.scala.Long): MessageId = copy(ledgerId = __v)
    def withEntryId(__v: _root_.scala.Long): MessageId = copy(entryId = __v)
    def withBatchId(__v: _root_.scala.Int): MessageId = copy(batchId = __v)
    def withPartitionIdx(__v: _root_.scala.Int): MessageId = copy(partitionIdx = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = ledgerId
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = entryId
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = batchId
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = partitionIdx
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(ledgerId)
        case 2 => _root_.scalapb.descriptors.PLong(entryId)
        case 3 => _root_.scalapb.descriptors.PInt(batchId)
        case 4 => _root_.scalapb.descriptors.PInt(partitionIdx)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.tools.teal.pulsar.ui.api.v1.consumer.MessageId.type = com.tools.teal.pulsar.ui.api.v1.consumer.MessageId
    // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.MessageId])
}

object MessageId extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.MessageId] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.MessageId] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.consumer.MessageId = {
    var __ledgerId: _root_.scala.Long = 0L
    var __entryId: _root_.scala.Long = 0L
    var __batchId: _root_.scala.Int = 0
    var __partitionIdx: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __ledgerId = _input__.readInt64()
        case 16 =>
          __entryId = _input__.readInt64()
        case 24 =>
          __batchId = _input__.readInt32()
        case 32 =>
          __partitionIdx = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.tools.teal.pulsar.ui.api.v1.consumer.MessageId(
        ledgerId = __ledgerId,
        entryId = __entryId,
        batchId = __batchId,
        partitionIdx = __partitionIdx,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.consumer.MessageId] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.tools.teal.pulsar.ui.api.v1.consumer.MessageId(
        ledgerId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        entryId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        batchId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        partitionIdx = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsumerProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsumerProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.consumer.MessageId(
    ledgerId = 0L,
    entryId = 0L,
    batchId = 0,
    partitionIdx = 0
  )
  implicit class MessageIdLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.MessageId]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.MessageId](_l) {
    def ledgerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.ledgerId)((c_, f_) => c_.copy(ledgerId = f_))
    def entryId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.entryId)((c_, f_) => c_.copy(entryId = f_))
    def batchId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.batchId)((c_, f_) => c_.copy(batchId = f_))
    def partitionIdx: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.partitionIdx)((c_, f_) => c_.copy(partitionIdx = f_))
  }
  final val LEDGER_ID_FIELD_NUMBER = 1
  final val ENTRY_ID_FIELD_NUMBER = 2
  final val BATCH_ID_FIELD_NUMBER = 3
  final val PARTITION_IDX_FIELD_NUMBER = 4
  def of(
    ledgerId: _root_.scala.Long,
    entryId: _root_.scala.Long,
    batchId: _root_.scala.Int,
    partitionIdx: _root_.scala.Int
  ): _root_.com.tools.teal.pulsar.ui.api.v1.consumer.MessageId = _root_.com.tools.teal.pulsar.ui.api.v1.consumer.MessageId(
    ledgerId,
    entryId,
    batchId,
    partitionIdx
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.MessageId])
}
