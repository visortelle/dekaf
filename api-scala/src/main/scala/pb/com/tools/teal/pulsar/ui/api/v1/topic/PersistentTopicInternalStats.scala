// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.topic

@SerialVersionUID(0L)
final case class PersistentTopicInternalStats(
    managedLedgerInternalStats: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats] = _root_.scala.None,
    schemaLedgers: _root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] = _root_.scala.Seq.empty,
    compactedLedger: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PersistentTopicInternalStats] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (managedLedgerInternalStats.isDefined) {
        val __value = managedLedgerInternalStats.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      schemaLedgers.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (compactedLedger.isDefined) {
        val __value = compactedLedger.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      managedLedgerInternalStats.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      schemaLedgers.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      compactedLedger.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getManagedLedgerInternalStats: com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats = managedLedgerInternalStats.getOrElse(com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.defaultInstance)
    def clearManagedLedgerInternalStats: PersistentTopicInternalStats = copy(managedLedgerInternalStats = _root_.scala.None)
    def withManagedLedgerInternalStats(__v: com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats): PersistentTopicInternalStats = copy(managedLedgerInternalStats = Option(__v))
    def clearSchemaLedgers = copy(schemaLedgers = _root_.scala.Seq.empty)
    def addSchemaLedgers(__vs: com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo *): PersistentTopicInternalStats = addAllSchemaLedgers(__vs)
    def addAllSchemaLedgers(__vs: Iterable[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]): PersistentTopicInternalStats = copy(schemaLedgers = schemaLedgers ++ __vs)
    def withSchemaLedgers(__v: _root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]): PersistentTopicInternalStats = copy(schemaLedgers = __v)
    def getCompactedLedger: com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo = compactedLedger.getOrElse(com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo.defaultInstance)
    def clearCompactedLedger: PersistentTopicInternalStats = copy(compactedLedger = _root_.scala.None)
    def withCompactedLedger(__v: com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo): PersistentTopicInternalStats = copy(compactedLedger = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => managedLedgerInternalStats.orNull
        case 2 => schemaLedgers
        case 3 => compactedLedger.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => managedLedgerInternalStats.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(schemaLedgers.iterator.map(_.toPMessage).toVector)
        case 3 => compactedLedger.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats.type = com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats
    // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.PersistentTopicInternalStats])
}

object PersistentTopicInternalStats extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats = {
    var __managedLedgerInternalStats: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats] = _root_.scala.None
    val __schemaLedgers: _root_.scala.collection.immutable.VectorBuilder[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] = new _root_.scala.collection.immutable.VectorBuilder[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]
    var __compactedLedger: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __managedLedgerInternalStats = Option(__managedLedgerInternalStats.fold(_root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __schemaLedgers += _root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo](_input__)
        case 26 =>
          __compactedLedger = Option(__compactedLedger.fold(_root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats(
        managedLedgerInternalStats = __managedLedgerInternalStats,
        schemaLedgers = __schemaLedgers.result(),
        compactedLedger = __compactedLedger,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats(
        managedLedgerInternalStats = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats]]),
        schemaLedgers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]]).getOrElse(_root_.scala.Seq.empty),
        compactedLedger = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TopicProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TopicProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats
      case 2 => __out = com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo
      case 3 => __out = com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats(
    managedLedgerInternalStats = _root_.scala.None,
    schemaLedgers = _root_.scala.Seq.empty,
    compactedLedger = _root_.scala.None
  )
  implicit class PersistentTopicInternalStatsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats](_l) {
    def managedLedgerInternalStats: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats] = field(_.getManagedLedgerInternalStats)((c_, f_) => c_.copy(managedLedgerInternalStats = Option(f_)))
    def optionalManagedLedgerInternalStats: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats]] = field(_.managedLedgerInternalStats)((c_, f_) => c_.copy(managedLedgerInternalStats = f_))
    def schemaLedgers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]] = field(_.schemaLedgers)((c_, f_) => c_.copy(schemaLedgers = f_))
    def compactedLedger: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] = field(_.getCompactedLedger)((c_, f_) => c_.copy(compactedLedger = Option(f_)))
    def optionalCompactedLedger: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]] = field(_.compactedLedger)((c_, f_) => c_.copy(compactedLedger = f_))
  }
  final val MANAGED_LEDGER_INTERNAL_STATS_FIELD_NUMBER = 1
  final val SCHEMA_LEDGERS_FIELD_NUMBER = 2
  final val COMPACTED_LEDGER_FIELD_NUMBER = 3
  def of(
    managedLedgerInternalStats: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats],
    schemaLedgers: _root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo],
    compactedLedger: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]
  ): _root_.com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats = _root_.com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats(
    managedLedgerInternalStats,
    schemaLedgers,
    compactedLedger
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.PersistentTopicInternalStats])
}
