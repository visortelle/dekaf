// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.topic

@SerialVersionUID(0L)
final case class ManagedLedgerInternalStats(
    entriesAddedCounter: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    numberOfEntries: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    totalSize: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    currentLedgerEntries: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    currentLedgerSize: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    lastLedgerCreatedTimestamp: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    lastLedgerCreationFailureTimestamp: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    waitingCursorsCount: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    pendingEntriesCount: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    lastConfirmedEntry: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    state: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    ledgers: _root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] = _root_.scala.Seq.empty,
    cursors: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ManagedLedgerInternalStats] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (entriesAddedCounter.isDefined) {
        val __value = entriesAddedCounter.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      };
      if (numberOfEntries.isDefined) {
        val __value = numberOfEntries.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
      };
      if (totalSize.isDefined) {
        val __value = totalSize.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
      };
      if (currentLedgerEntries.isDefined) {
        val __value = currentLedgerEntries.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(4, __value)
      };
      if (currentLedgerSize.isDefined) {
        val __value = currentLedgerSize.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
      };
      if (lastLedgerCreatedTimestamp.isDefined) {
        val __value = lastLedgerCreatedTimestamp.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      };
      if (lastLedgerCreationFailureTimestamp.isDefined) {
        val __value = lastLedgerCreationFailureTimestamp.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      };
      if (waitingCursorsCount.isDefined) {
        val __value = waitingCursorsCount.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, __value)
      };
      if (pendingEntriesCount.isDefined) {
        val __value = pendingEntriesCount.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(9, __value)
      };
      if (lastConfirmedEntry.isDefined) {
        val __value = lastConfirmedEntry.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
      };
      if (state.isDefined) {
        val __value = state.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
      };
      ledgers.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      cursors.foreach { __item =>
        val __value = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats._typemapper_cursors.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      entriesAddedCounter.foreach { __v =>
        val __m = __v
        _output__.writeInt64(1, __m)
      };
      numberOfEntries.foreach { __v =>
        val __m = __v
        _output__.writeInt64(2, __m)
      };
      totalSize.foreach { __v =>
        val __m = __v
        _output__.writeInt64(3, __m)
      };
      currentLedgerEntries.foreach { __v =>
        val __m = __v
        _output__.writeInt64(4, __m)
      };
      currentLedgerSize.foreach { __v =>
        val __m = __v
        _output__.writeInt64(5, __m)
      };
      lastLedgerCreatedTimestamp.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      lastLedgerCreationFailureTimestamp.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      waitingCursorsCount.foreach { __v =>
        val __m = __v
        _output__.writeInt32(8, __m)
      };
      pendingEntriesCount.foreach { __v =>
        val __m = __v
        _output__.writeInt32(9, __m)
      };
      lastConfirmedEntry.foreach { __v =>
        val __m = __v
        _output__.writeString(10, __m)
      };
      state.foreach { __v =>
        val __m = __v
        _output__.writeString(11, __m)
      };
      ledgers.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      cursors.foreach { __v =>
        val __m = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats._typemapper_cursors.toBase(__v)
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getEntriesAddedCounter: _root_.scala.Long = entriesAddedCounter.getOrElse(0L)
    def clearEntriesAddedCounter: ManagedLedgerInternalStats = copy(entriesAddedCounter = _root_.scala.None)
    def withEntriesAddedCounter(__v: _root_.scala.Long): ManagedLedgerInternalStats = copy(entriesAddedCounter = Option(__v))
    def getNumberOfEntries: _root_.scala.Long = numberOfEntries.getOrElse(0L)
    def clearNumberOfEntries: ManagedLedgerInternalStats = copy(numberOfEntries = _root_.scala.None)
    def withNumberOfEntries(__v: _root_.scala.Long): ManagedLedgerInternalStats = copy(numberOfEntries = Option(__v))
    def getTotalSize: _root_.scala.Long = totalSize.getOrElse(0L)
    def clearTotalSize: ManagedLedgerInternalStats = copy(totalSize = _root_.scala.None)
    def withTotalSize(__v: _root_.scala.Long): ManagedLedgerInternalStats = copy(totalSize = Option(__v))
    def getCurrentLedgerEntries: _root_.scala.Long = currentLedgerEntries.getOrElse(0L)
    def clearCurrentLedgerEntries: ManagedLedgerInternalStats = copy(currentLedgerEntries = _root_.scala.None)
    def withCurrentLedgerEntries(__v: _root_.scala.Long): ManagedLedgerInternalStats = copy(currentLedgerEntries = Option(__v))
    def getCurrentLedgerSize: _root_.scala.Long = currentLedgerSize.getOrElse(0L)
    def clearCurrentLedgerSize: ManagedLedgerInternalStats = copy(currentLedgerSize = _root_.scala.None)
    def withCurrentLedgerSize(__v: _root_.scala.Long): ManagedLedgerInternalStats = copy(currentLedgerSize = Option(__v))
    def getLastLedgerCreatedTimestamp: _root_.scala.Predef.String = lastLedgerCreatedTimestamp.getOrElse("")
    def clearLastLedgerCreatedTimestamp: ManagedLedgerInternalStats = copy(lastLedgerCreatedTimestamp = _root_.scala.None)
    def withLastLedgerCreatedTimestamp(__v: _root_.scala.Predef.String): ManagedLedgerInternalStats = copy(lastLedgerCreatedTimestamp = Option(__v))
    def getLastLedgerCreationFailureTimestamp: _root_.scala.Predef.String = lastLedgerCreationFailureTimestamp.getOrElse("")
    def clearLastLedgerCreationFailureTimestamp: ManagedLedgerInternalStats = copy(lastLedgerCreationFailureTimestamp = _root_.scala.None)
    def withLastLedgerCreationFailureTimestamp(__v: _root_.scala.Predef.String): ManagedLedgerInternalStats = copy(lastLedgerCreationFailureTimestamp = Option(__v))
    def getWaitingCursorsCount: _root_.scala.Int = waitingCursorsCount.getOrElse(0)
    def clearWaitingCursorsCount: ManagedLedgerInternalStats = copy(waitingCursorsCount = _root_.scala.None)
    def withWaitingCursorsCount(__v: _root_.scala.Int): ManagedLedgerInternalStats = copy(waitingCursorsCount = Option(__v))
    def getPendingEntriesCount: _root_.scala.Int = pendingEntriesCount.getOrElse(0)
    def clearPendingEntriesCount: ManagedLedgerInternalStats = copy(pendingEntriesCount = _root_.scala.None)
    def withPendingEntriesCount(__v: _root_.scala.Int): ManagedLedgerInternalStats = copy(pendingEntriesCount = Option(__v))
    def getLastConfirmedEntry: _root_.scala.Predef.String = lastConfirmedEntry.getOrElse("")
    def clearLastConfirmedEntry: ManagedLedgerInternalStats = copy(lastConfirmedEntry = _root_.scala.None)
    def withLastConfirmedEntry(__v: _root_.scala.Predef.String): ManagedLedgerInternalStats = copy(lastConfirmedEntry = Option(__v))
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: ManagedLedgerInternalStats = copy(state = _root_.scala.None)
    def withState(__v: _root_.scala.Predef.String): ManagedLedgerInternalStats = copy(state = Option(__v))
    def clearLedgers = copy(ledgers = _root_.scala.Seq.empty)
    def addLedgers(__vs: com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo *): ManagedLedgerInternalStats = addAllLedgers(__vs)
    def addAllLedgers(__vs: Iterable[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]): ManagedLedgerInternalStats = copy(ledgers = ledgers ++ __vs)
    def withLedgers(__v: _root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]): ManagedLedgerInternalStats = copy(ledgers = __v)
    def clearCursors = copy(cursors = _root_.scala.collection.immutable.Map.empty)
    def addCursors(__vs: (_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats) *): ManagedLedgerInternalStats = addAllCursors(__vs)
    def addAllCursors(__vs: Iterable[(_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats)]): ManagedLedgerInternalStats = copy(cursors = cursors ++ __vs)
    def withCursors(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats]): ManagedLedgerInternalStats = copy(cursors = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => entriesAddedCounter.orNull
        case 2 => numberOfEntries.orNull
        case 3 => totalSize.orNull
        case 4 => currentLedgerEntries.orNull
        case 5 => currentLedgerSize.orNull
        case 6 => lastLedgerCreatedTimestamp.orNull
        case 7 => lastLedgerCreationFailureTimestamp.orNull
        case 8 => waitingCursorsCount.orNull
        case 9 => pendingEntriesCount.orNull
        case 10 => lastConfirmedEntry.orNull
        case 11 => state.orNull
        case 12 => ledgers
        case 13 => cursors.iterator.map(com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats._typemapper_cursors.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => entriesAddedCounter.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => numberOfEntries.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => totalSize.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => currentLedgerEntries.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => currentLedgerSize.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => lastLedgerCreatedTimestamp.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => lastLedgerCreationFailureTimestamp.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => waitingCursorsCount.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => pendingEntriesCount.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => lastConfirmedEntry.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => state.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => _root_.scalapb.descriptors.PRepeated(ledgers.iterator.map(_.toPMessage).toVector)
        case 13 => _root_.scalapb.descriptors.PRepeated(cursors.iterator.map(com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats._typemapper_cursors.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.type = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats
    // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.ManagedLedgerInternalStats])
}

object ManagedLedgerInternalStats extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats = {
    var __entriesAddedCounter: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __numberOfEntries: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __totalSize: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __currentLedgerEntries: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __currentLedgerSize: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __lastLedgerCreatedTimestamp: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __lastLedgerCreationFailureTimestamp: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __waitingCursorsCount: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    var __pendingEntriesCount: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    var __lastConfirmedEntry: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __state: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    val __ledgers: _root_.scala.collection.immutable.VectorBuilder[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] = new _root_.scala.collection.immutable.VectorBuilder[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]
    val __cursors: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __entriesAddedCounter = Option(_input__.readInt64())
        case 16 =>
          __numberOfEntries = Option(_input__.readInt64())
        case 24 =>
          __totalSize = Option(_input__.readInt64())
        case 32 =>
          __currentLedgerEntries = Option(_input__.readInt64())
        case 40 =>
          __currentLedgerSize = Option(_input__.readInt64())
        case 50 =>
          __lastLedgerCreatedTimestamp = Option(_input__.readStringRequireUtf8())
        case 58 =>
          __lastLedgerCreationFailureTimestamp = Option(_input__.readStringRequireUtf8())
        case 64 =>
          __waitingCursorsCount = Option(_input__.readInt32())
        case 72 =>
          __pendingEntriesCount = Option(_input__.readInt32())
        case 82 =>
          __lastConfirmedEntry = Option(_input__.readStringRequireUtf8())
        case 90 =>
          __state = Option(_input__.readStringRequireUtf8())
        case 98 =>
          __ledgers += _root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo](_input__)
        case 106 =>
          __cursors += com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats._typemapper_cursors.toCustom(_root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats(
        entriesAddedCounter = __entriesAddedCounter,
        numberOfEntries = __numberOfEntries,
        totalSize = __totalSize,
        currentLedgerEntries = __currentLedgerEntries,
        currentLedgerSize = __currentLedgerSize,
        lastLedgerCreatedTimestamp = __lastLedgerCreatedTimestamp,
        lastLedgerCreationFailureTimestamp = __lastLedgerCreationFailureTimestamp,
        waitingCursorsCount = __waitingCursorsCount,
        pendingEntriesCount = __pendingEntriesCount,
        lastConfirmedEntry = __lastConfirmedEntry,
        state = __state,
        ledgers = __ledgers.result(),
        cursors = __cursors.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats(
        entriesAddedCounter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        numberOfEntries = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        totalSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        currentLedgerEntries = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        currentLedgerSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        lastLedgerCreatedTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        lastLedgerCreationFailureTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        waitingCursorsCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        pendingEntriesCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        lastConfirmedEntry = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        state = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        ledgers = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]]).getOrElse(_root_.scala.Seq.empty),
        cursors = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats._typemapper_cursors.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TopicProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TopicProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 12 => __out = com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo
      case 13 => __out = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats(
    entriesAddedCounter = _root_.scala.None,
    numberOfEntries = _root_.scala.None,
    totalSize = _root_.scala.None,
    currentLedgerEntries = _root_.scala.None,
    currentLedgerSize = _root_.scala.None,
    lastLedgerCreatedTimestamp = _root_.scala.None,
    lastLedgerCreationFailureTimestamp = _root_.scala.None,
    waitingCursorsCount = _root_.scala.None,
    pendingEntriesCount = _root_.scala.None,
    lastConfirmedEntry = _root_.scala.None,
    state = _root_.scala.None,
    ledgers = _root_.scala.Seq.empty,
    cursors = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class CursorsEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CursorsEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): CursorsEntry = copy(key = __v)
      def getValue: com.tools.teal.pulsar.ui.api.v1.topic.CursorStats = value.getOrElse(com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.defaultInstance)
      def clearValue: CursorsEntry = copy(value = _root_.scala.None)
      def withValue(__v: com.tools.teal.pulsar.ui.api.v1.topic.CursorStats): CursorsEntry = copy(value = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry.type = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry
      // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.ManagedLedgerInternalStats.CursorsEntry])
  }
  
  object CursorsEntry extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 18 =>
            __value = Option(__value.fold(_root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry(
      key = "",
      value = _root_.scala.None
    )
    implicit class CursorsEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry, (_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats)] =
      _root_.scalapb.TypeMapper[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry, (_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats)](__m => (__m.key, __m.getValue))(__p => com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry(__p._1, Some(__p._2)))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats]
    ): _root_.com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry = _root_.com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.ManagedLedgerInternalStats.CursorsEntry])
  }
  
  implicit class ManagedLedgerInternalStatsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats](_l) {
    def entriesAddedCounter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getEntriesAddedCounter)((c_, f_) => c_.copy(entriesAddedCounter = Option(f_)))
    def optionalEntriesAddedCounter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.entriesAddedCounter)((c_, f_) => c_.copy(entriesAddedCounter = f_))
    def numberOfEntries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getNumberOfEntries)((c_, f_) => c_.copy(numberOfEntries = Option(f_)))
    def optionalNumberOfEntries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.numberOfEntries)((c_, f_) => c_.copy(numberOfEntries = f_))
    def totalSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getTotalSize)((c_, f_) => c_.copy(totalSize = Option(f_)))
    def optionalTotalSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.totalSize)((c_, f_) => c_.copy(totalSize = f_))
    def currentLedgerEntries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCurrentLedgerEntries)((c_, f_) => c_.copy(currentLedgerEntries = Option(f_)))
    def optionalCurrentLedgerEntries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.currentLedgerEntries)((c_, f_) => c_.copy(currentLedgerEntries = f_))
    def currentLedgerSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCurrentLedgerSize)((c_, f_) => c_.copy(currentLedgerSize = Option(f_)))
    def optionalCurrentLedgerSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.currentLedgerSize)((c_, f_) => c_.copy(currentLedgerSize = f_))
    def lastLedgerCreatedTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLastLedgerCreatedTimestamp)((c_, f_) => c_.copy(lastLedgerCreatedTimestamp = Option(f_)))
    def optionalLastLedgerCreatedTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.lastLedgerCreatedTimestamp)((c_, f_) => c_.copy(lastLedgerCreatedTimestamp = f_))
    def lastLedgerCreationFailureTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLastLedgerCreationFailureTimestamp)((c_, f_) => c_.copy(lastLedgerCreationFailureTimestamp = Option(f_)))
    def optionalLastLedgerCreationFailureTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.lastLedgerCreationFailureTimestamp)((c_, f_) => c_.copy(lastLedgerCreationFailureTimestamp = f_))
    def waitingCursorsCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getWaitingCursorsCount)((c_, f_) => c_.copy(waitingCursorsCount = Option(f_)))
    def optionalWaitingCursorsCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.waitingCursorsCount)((c_, f_) => c_.copy(waitingCursorsCount = f_))
    def pendingEntriesCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getPendingEntriesCount)((c_, f_) => c_.copy(pendingEntriesCount = Option(f_)))
    def optionalPendingEntriesCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.pendingEntriesCount)((c_, f_) => c_.copy(pendingEntriesCount = f_))
    def lastConfirmedEntry: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLastConfirmedEntry)((c_, f_) => c_.copy(lastConfirmedEntry = Option(f_)))
    def optionalLastConfirmedEntry: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.lastConfirmedEntry)((c_, f_) => c_.copy(lastConfirmedEntry = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def ledgers: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]] = field(_.ledgers)((c_, f_) => c_.copy(ledgers = f_))
    def cursors: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats]] = field(_.cursors)((c_, f_) => c_.copy(cursors = f_))
  }
  final val ENTRIES_ADDED_COUNTER_FIELD_NUMBER = 1
  final val NUMBER_OF_ENTRIES_FIELD_NUMBER = 2
  final val TOTAL_SIZE_FIELD_NUMBER = 3
  final val CURRENT_LEDGER_ENTRIES_FIELD_NUMBER = 4
  final val CURRENT_LEDGER_SIZE_FIELD_NUMBER = 5
  final val LAST_LEDGER_CREATED_TIMESTAMP_FIELD_NUMBER = 6
  final val LAST_LEDGER_CREATION_FAILURE_TIMESTAMP_FIELD_NUMBER = 7
  final val WAITING_CURSORS_COUNT_FIELD_NUMBER = 8
  final val PENDING_ENTRIES_COUNT_FIELD_NUMBER = 9
  final val LAST_CONFIRMED_ENTRY_FIELD_NUMBER = 10
  final val STATE_FIELD_NUMBER = 11
  final val LEDGERS_FIELD_NUMBER = 12
  final val CURSORS_FIELD_NUMBER = 13
  @transient
  private[topic] val _typemapper_cursors: _root_.scalapb.TypeMapper[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry, (_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats)] = implicitly[_root_.scalapb.TypeMapper[com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats.CursorsEntry, (_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats)]]
  def of(
    entriesAddedCounter: _root_.scala.Option[_root_.scala.Long],
    numberOfEntries: _root_.scala.Option[_root_.scala.Long],
    totalSize: _root_.scala.Option[_root_.scala.Long],
    currentLedgerEntries: _root_.scala.Option[_root_.scala.Long],
    currentLedgerSize: _root_.scala.Option[_root_.scala.Long],
    lastLedgerCreatedTimestamp: _root_.scala.Option[_root_.scala.Predef.String],
    lastLedgerCreationFailureTimestamp: _root_.scala.Option[_root_.scala.Predef.String],
    waitingCursorsCount: _root_.scala.Option[_root_.scala.Int],
    pendingEntriesCount: _root_.scala.Option[_root_.scala.Int],
    lastConfirmedEntry: _root_.scala.Option[_root_.scala.Predef.String],
    state: _root_.scala.Option[_root_.scala.Predef.String],
    ledgers: _root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo],
    cursors: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats]
  ): _root_.com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats = _root_.com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats(
    entriesAddedCounter,
    numberOfEntries,
    totalSize,
    currentLedgerEntries,
    currentLedgerSize,
    lastLedgerCreatedTimestamp,
    lastLedgerCreationFailureTimestamp,
    waitingCursorsCount,
    pendingEntriesCount,
    lastConfirmedEntry,
    state,
    ledgers,
    cursors
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.ManagedLedgerInternalStats])
}
