// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.topic

@SerialVersionUID(0L)
final case class CursorStats(
    markDeletePosition: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    readPosition: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    waitingReadOp: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    pendingReadOps: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    messagesConsumedCounter: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    cursorLedger: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    cursorLedgerLastEntry: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    individuallyDeletedMessages: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    lastLedgerSwitchTimestamp: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    state: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    numberOfEntriesSinceFirstNotAckedMessage: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    totalNonContiguousDeletedMessagesRange: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    subscriptionHavePendingRead: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    subscriptionHavePendingReplayRead: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    properties: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long] = _root_.scala.collection.immutable.Map.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CursorStats] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (markDeletePosition.isDefined) {
        val __value = markDeletePosition.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (readPosition.isDefined) {
        val __value = readPosition.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (waitingReadOp.isDefined) {
        val __value = waitingReadOp.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
      };
      if (pendingReadOps.isDefined) {
        val __value = pendingReadOps.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
      };
      if (messagesConsumedCounter.isDefined) {
        val __value = messagesConsumedCounter.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(5, __value)
      };
      if (cursorLedger.isDefined) {
        val __value = cursorLedger.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(6, __value)
      };
      if (cursorLedgerLastEntry.isDefined) {
        val __value = cursorLedgerLastEntry.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
      };
      if (individuallyDeletedMessages.isDefined) {
        val __value = individuallyDeletedMessages.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
      };
      if (lastLedgerSwitchTimestamp.isDefined) {
        val __value = lastLedgerSwitchTimestamp.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
      };
      if (state.isDefined) {
        val __value = state.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
      };
      if (numberOfEntriesSinceFirstNotAckedMessage.isDefined) {
        val __value = numberOfEntriesSinceFirstNotAckedMessage.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(11, __value)
      };
      if (totalNonContiguousDeletedMessagesRange.isDefined) {
        val __value = totalNonContiguousDeletedMessagesRange.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(12, __value)
      };
      if (subscriptionHavePendingRead.isDefined) {
        val __value = subscriptionHavePendingRead.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(13, __value)
      };
      if (subscriptionHavePendingReplayRead.isDefined) {
        val __value = subscriptionHavePendingReplayRead.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(14, __value)
      };
      properties.foreach { __item =>
        val __value = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats._typemapper_properties.toBase(__item)
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      markDeletePosition.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      readPosition.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      waitingReadOp.foreach { __v =>
        val __m = __v
        _output__.writeBool(3, __m)
      };
      pendingReadOps.foreach { __v =>
        val __m = __v
        _output__.writeInt32(4, __m)
      };
      messagesConsumedCounter.foreach { __v =>
        val __m = __v
        _output__.writeInt64(5, __m)
      };
      cursorLedger.foreach { __v =>
        val __m = __v
        _output__.writeInt64(6, __m)
      };
      cursorLedgerLastEntry.foreach { __v =>
        val __m = __v
        _output__.writeInt64(7, __m)
      };
      individuallyDeletedMessages.foreach { __v =>
        val __m = __v
        _output__.writeString(8, __m)
      };
      lastLedgerSwitchTimestamp.foreach { __v =>
        val __m = __v
        _output__.writeString(9, __m)
      };
      state.foreach { __v =>
        val __m = __v
        _output__.writeString(10, __m)
      };
      numberOfEntriesSinceFirstNotAckedMessage.foreach { __v =>
        val __m = __v
        _output__.writeInt64(11, __m)
      };
      totalNonContiguousDeletedMessagesRange.foreach { __v =>
        val __m = __v
        _output__.writeInt32(12, __m)
      };
      subscriptionHavePendingRead.foreach { __v =>
        val __m = __v
        _output__.writeBool(13, __m)
      };
      subscriptionHavePendingReplayRead.foreach { __v =>
        val __m = __v
        _output__.writeBool(14, __m)
      };
      properties.foreach { __v =>
        val __m = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats._typemapper_properties.toBase(__v)
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getMarkDeletePosition: _root_.scala.Predef.String = markDeletePosition.getOrElse("")
    def clearMarkDeletePosition: CursorStats = copy(markDeletePosition = _root_.scala.None)
    def withMarkDeletePosition(__v: _root_.scala.Predef.String): CursorStats = copy(markDeletePosition = Option(__v))
    def getReadPosition: _root_.scala.Predef.String = readPosition.getOrElse("")
    def clearReadPosition: CursorStats = copy(readPosition = _root_.scala.None)
    def withReadPosition(__v: _root_.scala.Predef.String): CursorStats = copy(readPosition = Option(__v))
    def getWaitingReadOp: _root_.scala.Boolean = waitingReadOp.getOrElse(false)
    def clearWaitingReadOp: CursorStats = copy(waitingReadOp = _root_.scala.None)
    def withWaitingReadOp(__v: _root_.scala.Boolean): CursorStats = copy(waitingReadOp = Option(__v))
    def getPendingReadOps: _root_.scala.Int = pendingReadOps.getOrElse(0)
    def clearPendingReadOps: CursorStats = copy(pendingReadOps = _root_.scala.None)
    def withPendingReadOps(__v: _root_.scala.Int): CursorStats = copy(pendingReadOps = Option(__v))
    def getMessagesConsumedCounter: _root_.scala.Long = messagesConsumedCounter.getOrElse(0L)
    def clearMessagesConsumedCounter: CursorStats = copy(messagesConsumedCounter = _root_.scala.None)
    def withMessagesConsumedCounter(__v: _root_.scala.Long): CursorStats = copy(messagesConsumedCounter = Option(__v))
    def getCursorLedger: _root_.scala.Long = cursorLedger.getOrElse(0L)
    def clearCursorLedger: CursorStats = copy(cursorLedger = _root_.scala.None)
    def withCursorLedger(__v: _root_.scala.Long): CursorStats = copy(cursorLedger = Option(__v))
    def getCursorLedgerLastEntry: _root_.scala.Long = cursorLedgerLastEntry.getOrElse(0L)
    def clearCursorLedgerLastEntry: CursorStats = copy(cursorLedgerLastEntry = _root_.scala.None)
    def withCursorLedgerLastEntry(__v: _root_.scala.Long): CursorStats = copy(cursorLedgerLastEntry = Option(__v))
    def getIndividuallyDeletedMessages: _root_.scala.Predef.String = individuallyDeletedMessages.getOrElse("")
    def clearIndividuallyDeletedMessages: CursorStats = copy(individuallyDeletedMessages = _root_.scala.None)
    def withIndividuallyDeletedMessages(__v: _root_.scala.Predef.String): CursorStats = copy(individuallyDeletedMessages = Option(__v))
    def getLastLedgerSwitchTimestamp: _root_.scala.Predef.String = lastLedgerSwitchTimestamp.getOrElse("")
    def clearLastLedgerSwitchTimestamp: CursorStats = copy(lastLedgerSwitchTimestamp = _root_.scala.None)
    def withLastLedgerSwitchTimestamp(__v: _root_.scala.Predef.String): CursorStats = copy(lastLedgerSwitchTimestamp = Option(__v))
    def getState: _root_.scala.Predef.String = state.getOrElse("")
    def clearState: CursorStats = copy(state = _root_.scala.None)
    def withState(__v: _root_.scala.Predef.String): CursorStats = copy(state = Option(__v))
    def getNumberOfEntriesSinceFirstNotAckedMessage: _root_.scala.Long = numberOfEntriesSinceFirstNotAckedMessage.getOrElse(0L)
    def clearNumberOfEntriesSinceFirstNotAckedMessage: CursorStats = copy(numberOfEntriesSinceFirstNotAckedMessage = _root_.scala.None)
    def withNumberOfEntriesSinceFirstNotAckedMessage(__v: _root_.scala.Long): CursorStats = copy(numberOfEntriesSinceFirstNotAckedMessage = Option(__v))
    def getTotalNonContiguousDeletedMessagesRange: _root_.scala.Int = totalNonContiguousDeletedMessagesRange.getOrElse(0)
    def clearTotalNonContiguousDeletedMessagesRange: CursorStats = copy(totalNonContiguousDeletedMessagesRange = _root_.scala.None)
    def withTotalNonContiguousDeletedMessagesRange(__v: _root_.scala.Int): CursorStats = copy(totalNonContiguousDeletedMessagesRange = Option(__v))
    def getSubscriptionHavePendingRead: _root_.scala.Boolean = subscriptionHavePendingRead.getOrElse(false)
    def clearSubscriptionHavePendingRead: CursorStats = copy(subscriptionHavePendingRead = _root_.scala.None)
    def withSubscriptionHavePendingRead(__v: _root_.scala.Boolean): CursorStats = copy(subscriptionHavePendingRead = Option(__v))
    def getSubscriptionHavePendingReplayRead: _root_.scala.Boolean = subscriptionHavePendingReplayRead.getOrElse(false)
    def clearSubscriptionHavePendingReplayRead: CursorStats = copy(subscriptionHavePendingReplayRead = _root_.scala.None)
    def withSubscriptionHavePendingReplayRead(__v: _root_.scala.Boolean): CursorStats = copy(subscriptionHavePendingReplayRead = Option(__v))
    def clearProperties = copy(properties = _root_.scala.collection.immutable.Map.empty)
    def addProperties(__vs: (_root_.scala.Predef.String, _root_.scala.Long) *): CursorStats = addAllProperties(__vs)
    def addAllProperties(__vs: Iterable[(_root_.scala.Predef.String, _root_.scala.Long)]): CursorStats = copy(properties = properties ++ __vs)
    def withProperties(__v: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]): CursorStats = copy(properties = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => markDeletePosition.orNull
        case 2 => readPosition.orNull
        case 3 => waitingReadOp.orNull
        case 4 => pendingReadOps.orNull
        case 5 => messagesConsumedCounter.orNull
        case 6 => cursorLedger.orNull
        case 7 => cursorLedgerLastEntry.orNull
        case 8 => individuallyDeletedMessages.orNull
        case 9 => lastLedgerSwitchTimestamp.orNull
        case 10 => state.orNull
        case 11 => numberOfEntriesSinceFirstNotAckedMessage.orNull
        case 12 => totalNonContiguousDeletedMessagesRange.orNull
        case 13 => subscriptionHavePendingRead.orNull
        case 14 => subscriptionHavePendingReplayRead.orNull
        case 15 => properties.iterator.map(com.tools.teal.pulsar.ui.api.v1.topic.CursorStats._typemapper_properties.toBase(_)).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => markDeletePosition.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => readPosition.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => waitingReadOp.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => pendingReadOps.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => messagesConsumedCounter.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => cursorLedger.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => cursorLedgerLastEntry.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => individuallyDeletedMessages.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => lastLedgerSwitchTimestamp.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => state.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => numberOfEntriesSinceFirstNotAckedMessage.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => totalNonContiguousDeletedMessagesRange.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => subscriptionHavePendingRead.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => subscriptionHavePendingReplayRead.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => _root_.scalapb.descriptors.PRepeated(properties.iterator.map(com.tools.teal.pulsar.ui.api.v1.topic.CursorStats._typemapper_properties.toBase(_).toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.type = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats
    // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.CursorStats])
}

object CursorStats extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.topic.CursorStats = {
    var __markDeletePosition: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __readPosition: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __waitingReadOp: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    var __pendingReadOps: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    var __messagesConsumedCounter: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __cursorLedger: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __cursorLedgerLastEntry: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __individuallyDeletedMessages: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __lastLedgerSwitchTimestamp: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __state: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __numberOfEntriesSinceFirstNotAckedMessage: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __totalNonContiguousDeletedMessagesRange: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    var __subscriptionHavePendingRead: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    var __subscriptionHavePendingReplayRead: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    val __properties: _root_.scala.collection.mutable.Builder[(_root_.scala.Predef.String, _root_.scala.Long), _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]] = _root_.scala.collection.immutable.Map.newBuilder[_root_.scala.Predef.String, _root_.scala.Long]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __markDeletePosition = Option(_input__.readStringRequireUtf8())
        case 18 =>
          __readPosition = Option(_input__.readStringRequireUtf8())
        case 24 =>
          __waitingReadOp = Option(_input__.readBool())
        case 32 =>
          __pendingReadOps = Option(_input__.readInt32())
        case 40 =>
          __messagesConsumedCounter = Option(_input__.readInt64())
        case 48 =>
          __cursorLedger = Option(_input__.readInt64())
        case 56 =>
          __cursorLedgerLastEntry = Option(_input__.readInt64())
        case 66 =>
          __individuallyDeletedMessages = Option(_input__.readStringRequireUtf8())
        case 74 =>
          __lastLedgerSwitchTimestamp = Option(_input__.readStringRequireUtf8())
        case 82 =>
          __state = Option(_input__.readStringRequireUtf8())
        case 88 =>
          __numberOfEntriesSinceFirstNotAckedMessage = Option(_input__.readInt64())
        case 96 =>
          __totalNonContiguousDeletedMessagesRange = Option(_input__.readInt32())
        case 104 =>
          __subscriptionHavePendingRead = Option(_input__.readBool())
        case 112 =>
          __subscriptionHavePendingReplayRead = Option(_input__.readBool())
        case 122 =>
          __properties += com.tools.teal.pulsar.ui.api.v1.topic.CursorStats._typemapper_properties.toCustom(_root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry](_input__))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.tools.teal.pulsar.ui.api.v1.topic.CursorStats(
        markDeletePosition = __markDeletePosition,
        readPosition = __readPosition,
        waitingReadOp = __waitingReadOp,
        pendingReadOps = __pendingReadOps,
        messagesConsumedCounter = __messagesConsumedCounter,
        cursorLedger = __cursorLedger,
        cursorLedgerLastEntry = __cursorLedgerLastEntry,
        individuallyDeletedMessages = __individuallyDeletedMessages,
        lastLedgerSwitchTimestamp = __lastLedgerSwitchTimestamp,
        state = __state,
        numberOfEntriesSinceFirstNotAckedMessage = __numberOfEntriesSinceFirstNotAckedMessage,
        totalNonContiguousDeletedMessagesRange = __totalNonContiguousDeletedMessagesRange,
        subscriptionHavePendingRead = __subscriptionHavePendingRead,
        subscriptionHavePendingReplayRead = __subscriptionHavePendingReplayRead,
        properties = __properties.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.tools.teal.pulsar.ui.api.v1.topic.CursorStats(
        markDeletePosition = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        readPosition = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        waitingReadOp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        pendingReadOps = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        messagesConsumedCounter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        cursorLedger = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        cursorLedgerLastEntry = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        individuallyDeletedMessages = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        lastLedgerSwitchTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        state = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        numberOfEntriesSinceFirstNotAckedMessage = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        totalNonContiguousDeletedMessagesRange = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        subscriptionHavePendingRead = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        subscriptionHavePendingReplayRead = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        properties = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Seq[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry]]).getOrElse(_root_.scala.Seq.empty).iterator.map(com.tools.teal.pulsar.ui.api.v1.topic.CursorStats._typemapper_properties.toCustom(_)).toMap
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TopicProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TopicProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 15 => __out = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats(
    markDeletePosition = _root_.scala.None,
    readPosition = _root_.scala.None,
    waitingReadOp = _root_.scala.None,
    pendingReadOps = _root_.scala.None,
    messagesConsumedCounter = _root_.scala.None,
    cursorLedger = _root_.scala.None,
    cursorLedgerLastEntry = _root_.scala.None,
    individuallyDeletedMessages = _root_.scala.None,
    lastLedgerSwitchTimestamp = _root_.scala.None,
    state = _root_.scala.None,
    numberOfEntriesSinceFirstNotAckedMessage = _root_.scala.None,
    totalNonContiguousDeletedMessagesRange = _root_.scala.None,
    subscriptionHavePendingRead = _root_.scala.None,
    subscriptionHavePendingReplayRead = _root_.scala.None,
    properties = _root_.scala.collection.immutable.Map.empty
  )
  @SerialVersionUID(0L)
  final case class PropertiesEntry(
      key: _root_.scala.Predef.String = "",
      value: _root_.scala.Long = 0L,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[PropertiesEntry] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = key
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = value
          if (__value != 0L) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = key
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = value
          if (__v != 0L) {
            _output__.writeInt64(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withKey(__v: _root_.scala.Predef.String): PropertiesEntry = copy(key = __v)
      def withValue(__v: _root_.scala.Long): PropertiesEntry = copy(value = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = key
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = value
            if (__t != 0L) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(key)
          case 2 => _root_.scalapb.descriptors.PLong(value)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry.type = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry
      // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.CursorStats.PropertiesEntry])
  }
  
  object PropertiesEntry extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry = {
      var __key: _root_.scala.Predef.String = ""
      var __value: _root_.scala.Long = 0L
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readStringRequireUtf8()
          case 16 =>
            __value = _input__.readInt64()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry(
          key = __key,
          value = __value,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry(
          key = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          value = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry(
      key = "",
      value = 0L
    )
    implicit class PropertiesEntryLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry](_l) {
      def key: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.key)((c_, f_) => c_.copy(key = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val KEY_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    @transient
    implicit val keyValueMapper: _root_.scalapb.TypeMapper[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry, (_root_.scala.Predef.String, _root_.scala.Long)] =
      _root_.scalapb.TypeMapper[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry, (_root_.scala.Predef.String, _root_.scala.Long)](__m => (__m.key, __m.value))(__p => com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry(__p._1, __p._2))
    def of(
      key: _root_.scala.Predef.String,
      value: _root_.scala.Long
    ): _root_.com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry = _root_.com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry(
      key,
      value
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.CursorStats.PropertiesEntry])
  }
  
  implicit class CursorStatsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.CursorStats](_l) {
    def markDeletePosition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMarkDeletePosition)((c_, f_) => c_.copy(markDeletePosition = Option(f_)))
    def optionalMarkDeletePosition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.markDeletePosition)((c_, f_) => c_.copy(markDeletePosition = f_))
    def readPosition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getReadPosition)((c_, f_) => c_.copy(readPosition = Option(f_)))
    def optionalReadPosition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.readPosition)((c_, f_) => c_.copy(readPosition = f_))
    def waitingReadOp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getWaitingReadOp)((c_, f_) => c_.copy(waitingReadOp = Option(f_)))
    def optionalWaitingReadOp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.waitingReadOp)((c_, f_) => c_.copy(waitingReadOp = f_))
    def pendingReadOps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getPendingReadOps)((c_, f_) => c_.copy(pendingReadOps = Option(f_)))
    def optionalPendingReadOps: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.pendingReadOps)((c_, f_) => c_.copy(pendingReadOps = f_))
    def messagesConsumedCounter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getMessagesConsumedCounter)((c_, f_) => c_.copy(messagesConsumedCounter = Option(f_)))
    def optionalMessagesConsumedCounter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.messagesConsumedCounter)((c_, f_) => c_.copy(messagesConsumedCounter = f_))
    def cursorLedger: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCursorLedger)((c_, f_) => c_.copy(cursorLedger = Option(f_)))
    def optionalCursorLedger: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.cursorLedger)((c_, f_) => c_.copy(cursorLedger = f_))
    def cursorLedgerLastEntry: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getCursorLedgerLastEntry)((c_, f_) => c_.copy(cursorLedgerLastEntry = Option(f_)))
    def optionalCursorLedgerLastEntry: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.cursorLedgerLastEntry)((c_, f_) => c_.copy(cursorLedgerLastEntry = f_))
    def individuallyDeletedMessages: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIndividuallyDeletedMessages)((c_, f_) => c_.copy(individuallyDeletedMessages = Option(f_)))
    def optionalIndividuallyDeletedMessages: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.individuallyDeletedMessages)((c_, f_) => c_.copy(individuallyDeletedMessages = f_))
    def lastLedgerSwitchTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getLastLedgerSwitchTimestamp)((c_, f_) => c_.copy(lastLedgerSwitchTimestamp = Option(f_)))
    def optionalLastLedgerSwitchTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.lastLedgerSwitchTimestamp)((c_, f_) => c_.copy(lastLedgerSwitchTimestamp = f_))
    def state: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getState)((c_, f_) => c_.copy(state = Option(f_)))
    def optionalState: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.state)((c_, f_) => c_.copy(state = f_))
    def numberOfEntriesSinceFirstNotAckedMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getNumberOfEntriesSinceFirstNotAckedMessage)((c_, f_) => c_.copy(numberOfEntriesSinceFirstNotAckedMessage = Option(f_)))
    def optionalNumberOfEntriesSinceFirstNotAckedMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.numberOfEntriesSinceFirstNotAckedMessage)((c_, f_) => c_.copy(numberOfEntriesSinceFirstNotAckedMessage = f_))
    def totalNonContiguousDeletedMessagesRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getTotalNonContiguousDeletedMessagesRange)((c_, f_) => c_.copy(totalNonContiguousDeletedMessagesRange = Option(f_)))
    def optionalTotalNonContiguousDeletedMessagesRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.totalNonContiguousDeletedMessagesRange)((c_, f_) => c_.copy(totalNonContiguousDeletedMessagesRange = f_))
    def subscriptionHavePendingRead: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getSubscriptionHavePendingRead)((c_, f_) => c_.copy(subscriptionHavePendingRead = Option(f_)))
    def optionalSubscriptionHavePendingRead: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.subscriptionHavePendingRead)((c_, f_) => c_.copy(subscriptionHavePendingRead = f_))
    def subscriptionHavePendingReplayRead: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getSubscriptionHavePendingReplayRead)((c_, f_) => c_.copy(subscriptionHavePendingReplayRead = Option(f_)))
    def optionalSubscriptionHavePendingReplayRead: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.subscriptionHavePendingReplayRead)((c_, f_) => c_.copy(subscriptionHavePendingReplayRead = f_))
    def properties: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]] = field(_.properties)((c_, f_) => c_.copy(properties = f_))
  }
  final val MARK_DELETE_POSITION_FIELD_NUMBER = 1
  final val READ_POSITION_FIELD_NUMBER = 2
  final val WAITING_READ_OP_FIELD_NUMBER = 3
  final val PENDING_READ_OPS_FIELD_NUMBER = 4
  final val MESSAGES_CONSUMED_COUNTER_FIELD_NUMBER = 5
  final val CURSOR_LEDGER_FIELD_NUMBER = 6
  final val CURSOR_LEDGER_LAST_ENTRY_FIELD_NUMBER = 7
  final val INDIVIDUALLY_DELETED_MESSAGES_FIELD_NUMBER = 8
  final val LAST_LEDGER_SWITCH_TIMESTAMP_FIELD_NUMBER = 9
  final val STATE_FIELD_NUMBER = 10
  final val NUMBER_OF_ENTRIES_SINCE_FIRST_NOT_ACKED_MESSAGE_FIELD_NUMBER = 11
  final val TOTAL_NON_CONTIGUOUS_DELETED_MESSAGES_RANGE_FIELD_NUMBER = 12
  final val SUBSCRIPTION_HAVE_PENDING_READ_FIELD_NUMBER = 13
  final val SUBSCRIPTION_HAVE_PENDING_REPLAY_READ_FIELD_NUMBER = 14
  final val PROPERTIES_FIELD_NUMBER = 15
  @transient
  private[topic] val _typemapper_properties: _root_.scalapb.TypeMapper[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry, (_root_.scala.Predef.String, _root_.scala.Long)] = implicitly[_root_.scalapb.TypeMapper[com.tools.teal.pulsar.ui.api.v1.topic.CursorStats.PropertiesEntry, (_root_.scala.Predef.String, _root_.scala.Long)]]
  def of(
    markDeletePosition: _root_.scala.Option[_root_.scala.Predef.String],
    readPosition: _root_.scala.Option[_root_.scala.Predef.String],
    waitingReadOp: _root_.scala.Option[_root_.scala.Boolean],
    pendingReadOps: _root_.scala.Option[_root_.scala.Int],
    messagesConsumedCounter: _root_.scala.Option[_root_.scala.Long],
    cursorLedger: _root_.scala.Option[_root_.scala.Long],
    cursorLedgerLastEntry: _root_.scala.Option[_root_.scala.Long],
    individuallyDeletedMessages: _root_.scala.Option[_root_.scala.Predef.String],
    lastLedgerSwitchTimestamp: _root_.scala.Option[_root_.scala.Predef.String],
    state: _root_.scala.Option[_root_.scala.Predef.String],
    numberOfEntriesSinceFirstNotAckedMessage: _root_.scala.Option[_root_.scala.Long],
    totalNonContiguousDeletedMessagesRange: _root_.scala.Option[_root_.scala.Int],
    subscriptionHavePendingRead: _root_.scala.Option[_root_.scala.Boolean],
    subscriptionHavePendingReplayRead: _root_.scala.Option[_root_.scala.Boolean],
    properties: _root_.scala.collection.immutable.Map[_root_.scala.Predef.String, _root_.scala.Long]
  ): _root_.com.tools.teal.pulsar.ui.api.v1.topic.CursorStats = _root_.com.tools.teal.pulsar.ui.api.v1.topic.CursorStats(
    markDeletePosition,
    readPosition,
    waitingReadOp,
    pendingReadOps,
    messagesConsumedCounter,
    cursorLedger,
    cursorLedgerLastEntry,
    individuallyDeletedMessages,
    lastLedgerSwitchTimestamp,
    state,
    numberOfEntriesSinceFirstNotAckedMessage,
    totalNonContiguousDeletedMessagesRange,
    subscriptionHavePendingRead,
    subscriptionHavePendingReplayRead,
    properties
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.CursorStats])
}
