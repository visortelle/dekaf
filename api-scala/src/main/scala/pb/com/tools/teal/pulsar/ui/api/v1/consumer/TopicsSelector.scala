// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

@SerialVersionUID(0L)
final case class TopicsSelector(
    topicsSelector: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TopicsSelector] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (topicsSelector.byNames.isDefined) {
        val __value = topicsSelector.byNames.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (topicsSelector.byRegex.isDefined) {
        val __value = topicsSelector.byRegex.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      topicsSelector.byNames.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      topicsSelector.byRegex.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getByNames: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames = topicsSelector.byNames.getOrElse(com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames.defaultInstance)
    def withByNames(__v: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames): TopicsSelector = copy(topicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.ByNames(__v))
    def getByRegex: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex = topicsSelector.byRegex.getOrElse(com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex.defaultInstance)
    def withByRegex(__v: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex): TopicsSelector = copy(topicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.ByRegex(__v))
    def clearTopicsSelector: TopicsSelector = copy(topicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.Empty)
    def withTopicsSelector(__v: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector): TopicsSelector = copy(topicsSelector = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => topicsSelector.byNames.orNull
        case 2 => topicsSelector.byRegex.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => topicsSelector.byNames.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => topicsSelector.byRegex.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.type = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector
    // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.TopicsSelector])
}

object TopicsSelector extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector = {
    var __topicsSelector: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __topicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.ByNames(__topicsSelector.byNames.fold(_root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __topicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.ByRegex(__topicsSelector.byRegex.fold(_root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector(
        topicsSelector = __topicsSelector,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector(
        topicsSelector = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames]]).map(com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.ByNames(_))
            .orElse[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex]]).map(com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.ByRegex(_)))
            .getOrElse(com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsumerProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsumerProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames
      case 2 => __out = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector(
    topicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.Empty
  )
  sealed trait TopicsSelector extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isByNames: _root_.scala.Boolean = false
    def isByRegex: _root_.scala.Boolean = false
    def byNames: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames] = _root_.scala.None
    def byRegex: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex] = _root_.scala.None
  }
  object TopicsSelector {
    @SerialVersionUID(0L)
    case object Empty extends com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ByNames(value: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames) extends com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector {
      type ValueType = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames
      override def isByNames: _root_.scala.Boolean = true
      override def byNames: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class ByRegex(value: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex) extends com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector {
      type ValueType = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex
      override def isByRegex: _root_.scala.Boolean = true
      override def byRegex: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class TopicsSelectorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector](_l) {
    def byNames: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames] = field(_.getByNames)((c_, f_) => c_.copy(topicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.ByNames(f_)))
    def byRegex: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex] = field(_.getByRegex)((c_, f_) => c_.copy(topicsSelector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector.ByRegex(f_)))
    def topicsSelector: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector] = field(_.topicsSelector)((c_, f_) => c_.copy(topicsSelector = f_))
  }
  final val BY_NAMES_FIELD_NUMBER = 1
  final val BY_REGEX_FIELD_NUMBER = 2
  def of(
    topicsSelector: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector.TopicsSelector
  ): _root_.com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector = _root_.com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector(
    topicsSelector
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.TopicsSelector])
}
