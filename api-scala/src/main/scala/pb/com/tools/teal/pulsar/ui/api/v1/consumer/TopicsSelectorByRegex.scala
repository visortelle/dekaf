// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

@SerialVersionUID(0L)
final case class TopicsSelectorByRegex(
    pattern: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    regexSubscriptionMode: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TopicsSelectorByRegex] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (pattern.isDefined) {
        val __value = pattern.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (regexSubscriptionMode.isDefined) {
        val __value = regexSubscriptionMode.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      pattern.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      regexSubscriptionMode.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getPattern: _root_.scala.Predef.String = pattern.getOrElse("")
    def clearPattern: TopicsSelectorByRegex = copy(pattern = _root_.scala.None)
    def withPattern(__v: _root_.scala.Predef.String): TopicsSelectorByRegex = copy(pattern = Option(__v))
    def getRegexSubscriptionMode: com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode = regexSubscriptionMode.getOrElse(com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode.REGEX_SUBSCRIPTION_MODE_UNSPECIFIED)
    def clearRegexSubscriptionMode: TopicsSelectorByRegex = copy(regexSubscriptionMode = _root_.scala.None)
    def withRegexSubscriptionMode(__v: com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode): TopicsSelectorByRegex = copy(regexSubscriptionMode = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => pattern.orNull
        case 3 => regexSubscriptionMode.map(_.javaValueDescriptor).orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 2 => pattern.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => regexSubscriptionMode.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex.type = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex
    // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.TopicsSelectorByRegex])
}

object TopicsSelectorByRegex extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex = {
    var __pattern: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __regexSubscriptionMode: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 18 =>
          __pattern = Option(_input__.readStringRequireUtf8())
        case 24 =>
          __regexSubscriptionMode = Option(com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode.fromValue(_input__.readEnum()))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex(
        pattern = __pattern,
        regexSubscriptionMode = __regexSubscriptionMode,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex(
        pattern = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        regexSubscriptionMode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode.fromValue(__e.number))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsumerProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsumerProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode
    }
  }
  lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex(
    pattern = _root_.scala.None,
    regexSubscriptionMode = _root_.scala.None
  )
  implicit class TopicsSelectorByRegexLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex](_l) {
    def pattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPattern)((c_, f_) => c_.copy(pattern = Option(f_)))
    def optionalPattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.pattern)((c_, f_) => c_.copy(pattern = f_))
    def regexSubscriptionMode: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode] = field(_.getRegexSubscriptionMode)((c_, f_) => c_.copy(regexSubscriptionMode = Option(f_)))
    def optionalRegexSubscriptionMode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode]] = field(_.regexSubscriptionMode)((c_, f_) => c_.copy(regexSubscriptionMode = f_))
  }
  final val PATTERN_FIELD_NUMBER = 2
  final val REGEX_SUBSCRIPTION_MODE_FIELD_NUMBER = 3
  def of(
    pattern: _root_.scala.Option[_root_.scala.Predef.String],
    regexSubscriptionMode: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.RegexSubscriptionMode]
  ): _root_.com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex = _root_.com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex(
    pattern,
    regexSubscriptionMode
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.TopicsSelectorByRegex])
}
