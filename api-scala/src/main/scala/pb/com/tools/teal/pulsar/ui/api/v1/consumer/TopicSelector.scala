// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

@SerialVersionUID(0L)
final case class TopicSelector(
    selector: com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TopicSelector] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (selector.topic.isDefined) {
        val __value = selector.topic.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      selector.topic.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getTopic: _root_.scala.Predef.String = selector.topic.getOrElse("")
    def withTopic(__v: _root_.scala.Predef.String): TopicSelector = copy(selector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector.Topic(__v))
    def clearSelector: TopicSelector = copy(selector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector.Empty)
    def withSelector(__v: com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector): TopicSelector = copy(selector = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => selector.topic.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => selector.topic.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.type = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector
    // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.TopicSelector])
}

object TopicSelector extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector = {
    var __selector: com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __selector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector.Topic(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector(
        selector = __selector,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector(
        selector = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector.Topic(_))
            .getOrElse(com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsumerProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsumerProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector(
    selector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector.Empty
  )
  sealed trait Selector extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isTopic: _root_.scala.Boolean = false
    def topic: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
  }
  object Selector {
    @SerialVersionUID(0L)
    case object Empty extends com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Topic(value: _root_.scala.Predef.String) extends com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector {
      type ValueType = _root_.scala.Predef.String
      override def isTopic: _root_.scala.Boolean = true
      override def topic: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 1
    }
  }
  implicit class TopicSelectorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector](_l) {
    def topic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTopic)((c_, f_) => c_.copy(selector = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector.Topic(f_)))
    def selector: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector] = field(_.selector)((c_, f_) => c_.copy(selector = f_))
  }
  final val TOPIC_FIELD_NUMBER = 1
  def of(
    selector: com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.Selector
  ): _root_.com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector = _root_.com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector(
    selector
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.TopicSelector])
}
