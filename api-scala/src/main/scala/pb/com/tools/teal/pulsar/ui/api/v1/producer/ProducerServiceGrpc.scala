// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.producer


object ProducerServiceGrpc {
  val METHOD_CREATE_PRODUCER: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerRequest, com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ProducerService", "CreateProducer"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.producer.ProducerProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_DELETE_PRODUCER: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerRequest, com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ProducerService", "DeleteProducer"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.producer.ProducerProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_SEND: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.producer.SendRequest, com.tools.teal.pulsar.ui.api.v1.producer.SendResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ProducerService", "Send"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.producer.SendRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.producer.SendResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.producer.ProducerProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_GET_STATS: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.producer.GetStatsRequest, com.tools.teal.pulsar.ui.api.v1.producer.GetStatsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ProducerService", "GetStats"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.producer.GetStatsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.producer.GetStatsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.producer.ProducerProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("tools.teal.pulsar.ui.api.v1.ProducerService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(com.tools.teal.pulsar.ui.api.v1.producer.ProducerProto.javaDescriptor))
      .addMethod(METHOD_CREATE_PRODUCER)
      .addMethod(METHOD_DELETE_PRODUCER)
      .addMethod(METHOD_SEND)
      .addMethod(METHOD_GET_STATS)
      .build()
  
  trait ProducerService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = ProducerService
    def createProducer(request: com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerResponse]
    def deleteProducer(request: com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerResponse]
    def send(request: com.tools.teal.pulsar.ui.api.v1.producer.SendRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.producer.SendResponse]
    def getStats(request: com.tools.teal.pulsar.ui.api.v1.producer.GetStatsRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.producer.GetStatsResponse]
  }
  
  object ProducerService extends _root_.scalapb.grpc.ServiceCompanion[ProducerService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ProducerService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.tools.teal.pulsar.ui.api.v1.producer.ProducerProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = com.tools.teal.pulsar.ui.api.v1.producer.ProducerProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: ProducerService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_CREATE_PRODUCER,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerRequest, com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerResponse]): _root_.scala.Unit =
            serviceImpl.createProducer(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_DELETE_PRODUCER,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerRequest, com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerResponse]): _root_.scala.Unit =
            serviceImpl.deleteProducer(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEND,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.tools.teal.pulsar.ui.api.v1.producer.SendRequest, com.tools.teal.pulsar.ui.api.v1.producer.SendResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.producer.SendRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.producer.SendResponse]): _root_.scala.Unit =
            serviceImpl.send(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_GET_STATS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.tools.teal.pulsar.ui.api.v1.producer.GetStatsRequest, com.tools.teal.pulsar.ui.api.v1.producer.GetStatsResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.producer.GetStatsRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.producer.GetStatsResponse]): _root_.scala.Unit =
            serviceImpl.getStats(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait ProducerServiceBlockingClient {
    def serviceCompanion = ProducerService
    def createProducer(request: com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerRequest): com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerResponse
    def deleteProducer(request: com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerRequest): com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerResponse
    def send(request: com.tools.teal.pulsar.ui.api.v1.producer.SendRequest): com.tools.teal.pulsar.ui.api.v1.producer.SendResponse
    def getStats(request: com.tools.teal.pulsar.ui.api.v1.producer.GetStatsRequest): com.tools.teal.pulsar.ui.api.v1.producer.GetStatsResponse
  }
  
  class ProducerServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ProducerServiceBlockingStub](channel, options) with ProducerServiceBlockingClient {
    override def createProducer(request: com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerRequest): com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_PRODUCER, options, request)
    }
    
    override def deleteProducer(request: com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerRequest): com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DELETE_PRODUCER, options, request)
    }
    
    override def send(request: com.tools.teal.pulsar.ui.api.v1.producer.SendRequest): com.tools.teal.pulsar.ui.api.v1.producer.SendResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEND, options, request)
    }
    
    override def getStats(request: com.tools.teal.pulsar.ui.api.v1.producer.GetStatsRequest): com.tools.teal.pulsar.ui.api.v1.producer.GetStatsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_STATS, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ProducerServiceBlockingStub = new ProducerServiceBlockingStub(channel, options)
  }
  
  class ProducerServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ProducerServiceStub](channel, options) with ProducerService {
    override def createProducer(request: com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.producer.CreateProducerResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_PRODUCER, options, request)
    }
    
    override def deleteProducer(request: com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.producer.DeleteProducerResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DELETE_PRODUCER, options, request)
    }
    
    override def send(request: com.tools.teal.pulsar.ui.api.v1.producer.SendRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.producer.SendResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEND, options, request)
    }
    
    override def getStats(request: com.tools.teal.pulsar.ui.api.v1.producer.GetStatsRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.producer.GetStatsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_STATS, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ProducerServiceStub = new ProducerServiceStub(channel, options)
  }
  
  object ProducerServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[ProducerServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ProducerServiceStub = new ProducerServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[ProducerServiceStub] = this
  }
  
  def bindService(serviceImpl: ProducerService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = ProducerService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): ProducerServiceBlockingStub = new ProducerServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): ProducerServiceStub = new ProducerServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.tools.teal.pulsar.ui.api.v1.producer.ProducerProto.javaDescriptor.getServices().get(0)
  
}