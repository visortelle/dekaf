// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

@SerialVersionUID(0L)
final case class CreateConsumerRequest(
    topicSelector: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector] = _root_.scala.None,
    consumerName: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    subscriptionName: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    priorityLevel: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    startPaused: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    subscriptionMode: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode] = _root_.scala.None,
    subscriptionType: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CreateConsumerRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (topicSelector.isDefined) {
        val __value = topicSelector.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (consumerName.isDefined) {
        val __value = consumerName.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      if (subscriptionName.isDefined) {
        val __value = subscriptionName.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (priorityLevel.isDefined) {
        val __value = priorityLevel.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
      };
      if (startPaused.isDefined) {
        val __value = startPaused.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
      };
      if (subscriptionMode.isDefined) {
        val __value = subscriptionMode.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, __value)
      };
      if (subscriptionType.isDefined) {
        val __value = subscriptionType.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(6, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      consumerName.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      subscriptionName.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      priorityLevel.foreach { __v =>
        val __m = __v
        _output__.writeInt32(3, __m)
      };
      startPaused.foreach { __v =>
        val __m = __v
        _output__.writeBool(4, __m)
      };
      subscriptionMode.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(5, __m)
      };
      subscriptionType.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(6, __m)
      };
      topicSelector.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getTopicSelector: com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector = topicSelector.getOrElse(com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector.defaultInstance)
    def clearTopicSelector: CreateConsumerRequest = copy(topicSelector = _root_.scala.None)
    def withTopicSelector(__v: com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector): CreateConsumerRequest = copy(topicSelector = Option(__v))
    def getConsumerName: _root_.scala.Predef.String = consumerName.getOrElse("")
    def clearConsumerName: CreateConsumerRequest = copy(consumerName = _root_.scala.None)
    def withConsumerName(__v: _root_.scala.Predef.String): CreateConsumerRequest = copy(consumerName = Option(__v))
    def getSubscriptionName: _root_.scala.Predef.String = subscriptionName.getOrElse("")
    def clearSubscriptionName: CreateConsumerRequest = copy(subscriptionName = _root_.scala.None)
    def withSubscriptionName(__v: _root_.scala.Predef.String): CreateConsumerRequest = copy(subscriptionName = Option(__v))
    def getPriorityLevel: _root_.scala.Int = priorityLevel.getOrElse(0)
    def clearPriorityLevel: CreateConsumerRequest = copy(priorityLevel = _root_.scala.None)
    def withPriorityLevel(__v: _root_.scala.Int): CreateConsumerRequest = copy(priorityLevel = Option(__v))
    def getStartPaused: _root_.scala.Boolean = startPaused.getOrElse(false)
    def clearStartPaused: CreateConsumerRequest = copy(startPaused = _root_.scala.None)
    def withStartPaused(__v: _root_.scala.Boolean): CreateConsumerRequest = copy(startPaused = Option(__v))
    def getSubscriptionMode: com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode = subscriptionMode.getOrElse(com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode.SUBSCRIPTION_MODE_UNSPECIFIED)
    def clearSubscriptionMode: CreateConsumerRequest = copy(subscriptionMode = _root_.scala.None)
    def withSubscriptionMode(__v: com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode): CreateConsumerRequest = copy(subscriptionMode = Option(__v))
    def getSubscriptionType: com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType = subscriptionType.getOrElse(com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType.SUBSCRIPTION_TYPE_UNSPECIFIED)
    def clearSubscriptionType: CreateConsumerRequest = copy(subscriptionType = _root_.scala.None)
    def withSubscriptionType(__v: com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType): CreateConsumerRequest = copy(subscriptionType = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 10 => topicSelector.orNull
        case 1 => consumerName.orNull
        case 2 => subscriptionName.orNull
        case 3 => priorityLevel.orNull
        case 4 => startPaused.orNull
        case 5 => subscriptionMode.map(_.javaValueDescriptor).orNull
        case 6 => subscriptionType.map(_.javaValueDescriptor).orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 10 => topicSelector.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 1 => consumerName.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => subscriptionName.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => priorityLevel.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => startPaused.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => subscriptionMode.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => subscriptionType.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest.type = com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest
    // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.CreateConsumerRequest])
}

object CreateConsumerRequest extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest = {
    var __topicSelector: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector] = _root_.scala.None
    var __consumerName: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __subscriptionName: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __priorityLevel: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    var __startPaused: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    var __subscriptionMode: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode] = _root_.scala.None
    var __subscriptionType: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 82 =>
          __topicSelector = Option(__topicSelector.fold(_root_.scalapb.LiteParser.readMessage[com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 10 =>
          __consumerName = Option(_input__.readStringRequireUtf8())
        case 18 =>
          __subscriptionName = Option(_input__.readStringRequireUtf8())
        case 24 =>
          __priorityLevel = Option(_input__.readInt32())
        case 32 =>
          __startPaused = Option(_input__.readBool())
        case 40 =>
          __subscriptionMode = Option(com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode.fromValue(_input__.readEnum()))
        case 48 =>
          __subscriptionType = Option(com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType.fromValue(_input__.readEnum()))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest(
        topicSelector = __topicSelector,
        consumerName = __consumerName,
        subscriptionName = __subscriptionName,
        priorityLevel = __priorityLevel,
        startPaused = __startPaused,
        subscriptionMode = __subscriptionMode,
        subscriptionType = __subscriptionType,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest(
        topicSelector = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector]]),
        consumerName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        subscriptionName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        priorityLevel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        startPaused = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        subscriptionMode = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode.fromValue(__e.number)),
        subscriptionType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType.fromValue(__e.number))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsumerProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsumerProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 10 => __out = com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode
      case 6 => com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType
    }
  }
  lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest(
    topicSelector = _root_.scala.None,
    consumerName = _root_.scala.None,
    subscriptionName = _root_.scala.None,
    priorityLevel = _root_.scala.None,
    startPaused = _root_.scala.None,
    subscriptionMode = _root_.scala.None,
    subscriptionType = _root_.scala.None
  )
  implicit class CreateConsumerRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest](_l) {
    def topicSelector: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector] = field(_.getTopicSelector)((c_, f_) => c_.copy(topicSelector = Option(f_)))
    def optionalTopicSelector: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector]] = field(_.topicSelector)((c_, f_) => c_.copy(topicSelector = f_))
    def consumerName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getConsumerName)((c_, f_) => c_.copy(consumerName = Option(f_)))
    def optionalConsumerName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.consumerName)((c_, f_) => c_.copy(consumerName = f_))
    def subscriptionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSubscriptionName)((c_, f_) => c_.copy(subscriptionName = Option(f_)))
    def optionalSubscriptionName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.subscriptionName)((c_, f_) => c_.copy(subscriptionName = f_))
    def priorityLevel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getPriorityLevel)((c_, f_) => c_.copy(priorityLevel = Option(f_)))
    def optionalPriorityLevel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.priorityLevel)((c_, f_) => c_.copy(priorityLevel = f_))
    def startPaused: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getStartPaused)((c_, f_) => c_.copy(startPaused = Option(f_)))
    def optionalStartPaused: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.startPaused)((c_, f_) => c_.copy(startPaused = f_))
    def subscriptionMode: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode] = field(_.getSubscriptionMode)((c_, f_) => c_.copy(subscriptionMode = Option(f_)))
    def optionalSubscriptionMode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode]] = field(_.subscriptionMode)((c_, f_) => c_.copy(subscriptionMode = f_))
    def subscriptionType: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType] = field(_.getSubscriptionType)((c_, f_) => c_.copy(subscriptionType = Option(f_)))
    def optionalSubscriptionType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType]] = field(_.subscriptionType)((c_, f_) => c_.copy(subscriptionType = f_))
  }
  final val TOPIC_SELECTOR_FIELD_NUMBER = 10
  final val CONSUMER_NAME_FIELD_NUMBER = 1
  final val SUBSCRIPTION_NAME_FIELD_NUMBER = 2
  final val PRIORITY_LEVEL_FIELD_NUMBER = 3
  final val START_PAUSED_FIELD_NUMBER = 4
  final val SUBSCRIPTION_MODE_FIELD_NUMBER = 5
  final val SUBSCRIPTION_TYPE_FIELD_NUMBER = 6
  def of(
    topicSelector: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector],
    consumerName: _root_.scala.Option[_root_.scala.Predef.String],
    subscriptionName: _root_.scala.Option[_root_.scala.Predef.String],
    priorityLevel: _root_.scala.Option[_root_.scala.Int],
    startPaused: _root_.scala.Option[_root_.scala.Boolean],
    subscriptionMode: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionMode],
    subscriptionType: _root_.scala.Option[com.tools.teal.pulsar.ui.api.v1.consumer.SubscriptionType]
  ): _root_.com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest = _root_.com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest(
    topicSelector,
    consumerName,
    subscriptionName,
    priorityLevel,
    startPaused,
    subscriptionMode,
    subscriptionType
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.CreateConsumerRequest])
}
