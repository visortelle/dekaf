// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

object ConsumerProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.timestamp.TimestampProto,
    com.google.rpc.status.StatusProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.tools.teal.pulsar.ui.api.v1.consumer.MessageId,
      com.tools.teal.pulsar.ui.api.v1.consumer.Message,
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByNames,
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex,
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.SkipMessagesRequest
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cip0b29scy90ZWFsL3B1bHNhci91aS9hcGkvdjEvY29uc3VtZXIucHJvdG8SG3Rvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52M
  RofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoXZ29vZ2xlL3JwYy9zdGF0dXMucHJvdG8iwQEKCU1lc3NhZ2VJZBIqC
  glsZWRnZXJfaWQYASABKANCDeI/ChIIbGVkZ2VySWRSCGxlZGdlcklkEicKCGVudHJ5X2lkGAIgASgDQgziPwkSB2VudHJ5SWRSB
  2VudHJ5SWQSJwoIYmF0Y2hfaWQYAyABKAVCDOI/CRIHYmF0Y2hJZFIHYmF0Y2hJZBI2Cg1wYXJ0aXRpb25faWR4GAQgASgFQhHiP
  w4SDHBhcnRpdGlvbklkeFIMcGFydGl0aW9uSWR4IukKCgdNZXNzYWdlEmUKCnByb3BlcnRpZXMYASADKAsyNC50b29scy50ZWFsL
  nB1bHNhci51aS5hcGkudjEuTWVzc2FnZS5Qcm9wZXJ0aWVzRW50cnlCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxIiCgRkY
  XRhGAIgASgMQgniPwYSBGRhdGFIAFIEZGF0YYgBARIiCgRzaXplGAMgASgDQgniPwYSBHNpemVIAVIEc2l6ZYgBARIlCgV2YWx1Z
  RgEIAEoCUIK4j8HEgV2YWx1ZUgCUgV2YWx1ZYgBARJOCgpldmVudF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzd
  GFtcEIO4j8LEglldmVudFRpbWVIA1IJZXZlbnRUaW1liAEBElQKDHB1Ymxpc2hfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Z
  i5UaW1lc3RhbXBCEOI/DRILcHVibGlzaFRpbWVIBFILcHVibGlzaFRpbWWIAQESZwoTYnJva2VyX3B1Ymxpc2hfdGltZRgWIAEoC
  zIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCFuI/ExIRYnJva2VyUHVibGlzaFRpbWVIBVIRYnJva2VyUHVibGlzaFRpbWWIA
  QESMgoKbWVzc2FnZV9pZBgeIAEoDEIO4j8LEgltZXNzYWdlSWRIBlIJbWVzc2FnZUlkiAEBEjUKC3NlcXVlbmNlX2lkGAggASgBQ
  g/iPwwSCnNlcXVlbmNlSWRIB1IKc2VxdWVuY2VJZIgBARI7Cg1wcm9kdWNlcl9uYW1lGAkgASgJQhHiPw4SDHByb2R1Y2VyTmFtZ
  UgIUgxwcm9kdWNlck5hbWWIAQESHwoDa2V5GAogASgJQgjiPwUSA2tleUgJUgNrZXmIAQESOAoMb3JkZXJpbmdfa2V5GAsgASgMQ
  hDiPw0SC29yZGVyaW5nS2V5SApSC29yZGVyaW5nS2V5iAEBEiUKBXRvcGljGAwgASgJQgriPwcSBXRvcGljSAtSBXRvcGljiAEBE
  kQKEHJlZGVsaXZlcnlfY291bnQYDSABKAVCFOI/ERIPcmVkZWxpdmVyeUNvdW50SAxSD3JlZGVsaXZlcnlDb3VudIgBARI+Cg5zY
  2hlbWFfdmVyc2lvbhgOIAEoDEIS4j8PEg1zY2hlbWFWZXJzaW9uSA1SDXNjaGVtYVZlcnNpb26IAQESOwoNaXNfcmVwbGljYXRlZ
  BgUIAEoCEIR4j8OEgxpc1JlcGxpY2F0ZWRIDlIMaXNSZXBsaWNhdGVkiAEBEkEKD3JlcGxpY2F0ZWRfZnJvbRgVIAEoCUIT4j8QE
  g5yZXBsaWNhdGVkRnJvbUgPUg5yZXBsaWNhdGVkRnJvbYgBARpTCg9Qcm9wZXJ0aWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA
  2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAFCBwoFX2RhdGFCBwoFX3NpemVCCAoGX3ZhbHVlQ
  g0KC19ldmVudF90aW1lQg8KDV9wdWJsaXNoX3RpbWVCFgoUX2Jyb2tlcl9wdWJsaXNoX3RpbWVCDQoLX21lc3NhZ2VfaWRCDgoMX
  3NlcXVlbmNlX2lkQhAKDl9wcm9kdWNlcl9uYW1lQgYKBF9rZXlCDwoNX29yZGVyaW5nX2tleUIICgZfdG9waWNCEwoRX3JlZGVsa
  XZlcnlfY291bnRCEQoPX3NjaGVtYV92ZXJzaW9uQhAKDl9pc19yZXBsaWNhdGVkQhIKEF9yZXBsaWNhdGVkX2Zyb20iPAoVVG9wa
  WNzU2VsZWN0b3JCeU5hbWVzEiMKBnRvcGljcxgBIAMoCUIL4j8IEgZ0b3BpY3NSBnRvcGljcyL6AQoVVG9waWNzU2VsZWN0b3JCe
  VJlZ2V4EisKB3BhdHRlcm4YAiABKAlCDOI/CRIHcGF0dGVybkgAUgdwYXR0ZXJuiAEBEosBChdyZWdleF9zdWJzY3JpcHRpb25fb
  W9kZRgDIAEoDjIyLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5SZWdleFN1YnNjcmlwdGlvbk1vZGVCGuI/FxIVcmVnZXhTd
  WJzY3JpcHRpb25Nb2RlSAFSFXJlZ2V4U3Vic2NyaXB0aW9uTW9kZYgBAUIKCghfcGF0dGVybkIaChhfcmVnZXhfc3Vic2NyaXB0a
  W9uX21vZGUi4QEKDlRvcGljc1NlbGVjdG9yEl0KCGJ5X25hbWVzGAEgASgLMjIudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxL
  lRvcGljc1NlbGVjdG9yQnlOYW1lc0IM4j8JEgdieU5hbWVzSABSB2J5TmFtZXMSXQoIYnlfcmVnZXgYAiABKAsyMi50b29scy50Z
  WFsLnB1bHNhci51aS5hcGkudjEuVG9waWNzU2VsZWN0b3JCeVJlZ2V4QgziPwkSB2J5UmVnZXhIAFIHYnlSZWdleEIRCg90b3BpY
  3Nfc2VsZWN0b3Ii1gwKFUNyZWF0ZUNvbnN1bWVyUmVxdWVzdBJpCg90b3BpY3Nfc2VsZWN0b3IYZCABKAsyKy50b29scy50ZWFsL
  nB1bHNhci51aS5hcGkudjEuVG9waWNzU2VsZWN0b3JCE+I/EBIOdG9waWNzU2VsZWN0b3JSDnRvcGljc1NlbGVjdG9yEjsKDWNvb
  nN1bWVyX25hbWUYASABKAlCEeI/DhIMY29uc3VtZXJOYW1lSABSDGNvbnN1bWVyTmFtZYgBARJHChFzdWJzY3JpcHRpb25fbmFtZ
  RgCIAEoCUIV4j8SEhBzdWJzY3JpcHRpb25OYW1lSAFSEHN1YnNjcmlwdGlvbk5hbWWIAQESPgoOcHJpb3JpdHlfbGV2ZWwYAyABK
  AVCEuI/DxINcHJpb3JpdHlMZXZlbEgCUg1wcmlvcml0eUxldmVsiAEBEjgKDHN0YXJ0X3BhdXNlZBgEIAEoCEIQ4j8NEgtzdGFyd
  FBhdXNlZEgDUgtzdGFydFBhdXNlZIgBARJ2ChFzdWJzY3JpcHRpb25fbW9kZRgFIAEoDjItLnRvb2xzLnRlYWwucHVsc2FyLnVpL
  mFwaS52MS5TdWJzY3JpcHRpb25Nb2RlQhXiPxISEHN1YnNjcmlwdGlvbk1vZGVIBFIQc3Vic2NyaXB0aW9uTW9kZYgBARJ2ChFzd
  WJzY3JpcHRpb25fdHlwZRgGIAEoDjItLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5TdWJzY3JpcHRpb25UeXBlQhXiPxISE
  HN1YnNjcmlwdGlvblR5cGVIBVIQc3Vic2NyaXB0aW9uVHlwZYgBARKjAQodc3Vic2NyaXB0aW9uX2luaXRpYWxfcG9zaXRpb24YB
  yABKA4yOC50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuU3Vic2NyaXB0aW9uSW5pdGlhbFBvc2l0aW9uQiDiPx0SG3N1YnNjc
  mlwdGlvbkluaXRpYWxQb3NpdGlvbkgGUhtzdWJzY3JpcHRpb25Jbml0aWFsUG9zaXRpb26IAQESPAoOYWNrX3RpbWVvdXRfbXMYC
  CABKANCEeI/DhIMYWNrVGltZW91dE1zSAdSDGFja1RpbWVvdXRNc4gBARJWChhhY2tfdGltZW91dF90aWNrX3RpbWVfbXMYCSABK
  ANCGeI/FhIUYWNrVGltZW91dFRpY2tUaW1lTXNICFIUYWNrVGltZW91dFRpY2tUaW1lTXOIAQESjgEKLGV4cGlyZV90aW1lX29mX
  2luY29tcGxldGVfY2h1bmtlZF9tZXNzYWdlX21zGAogASgDQiviPygSJmV4cGlyZVRpbWVPZkluY29tcGxldGVDaHVua2VkTWVzc
  2FnZU1zSAlSJmV4cGlyZVRpbWVPZkluY29tcGxldGVDaHVua2VkTWVzc2FnZU1ziAEBEmQKHGFja25vd2xlZGdtZW50X2dyb3VwX
  3RpbWVfbXMYCyABKANCHuI/GxIZYWNrbm93bGVkZ21lbnRHcm91cFRpbWVNc0gKUhlhY2tub3dsZWRnbWVudEdyb3VwVGltZU1zi
  AEBEm4KIG5lZ2F0aXZlX2Fja19yZWRlbGl2ZXJ5X2RlbGF5X21zGAwgASgDQiHiPx4SHG5lZ2F0aXZlQWNrUmVkZWxpdmVyeURlb
  GF5TXNIC1IcbmVnYXRpdmVBY2tSZWRlbGl2ZXJ5RGVsYXlNc4gBAUIQCg5fY29uc3VtZXJfbmFtZUIUChJfc3Vic2NyaXB0aW9uX
  25hbWVCEQoPX3ByaW9yaXR5X2xldmVsQg8KDV9zdGFydF9wYXVzZWRCFAoSX3N1YnNjcmlwdGlvbl9tb2RlQhQKEl9zdWJzY3Jpc
  HRpb25fdHlwZUIgCh5fc3Vic2NyaXB0aW9uX2luaXRpYWxfcG9zaXRpb25CEQoPX2Fja190aW1lb3V0X21zQhsKGV9hY2tfdGltZ
  W91dF90aWNrX3RpbWVfbXNCLwotX2V4cGlyZV90aW1lX29mX2luY29tcGxldGVfY2h1bmtlZF9tZXNzYWdlX21zQh8KHV9hY2tub
  3dsZWRnbWVudF9ncm91cF90aW1lX21zQiMKIV9uZWdhdGl2ZV9hY2tfcmVkZWxpdmVyeV9kZWxheV9tcyJRChZDcmVhdGVDb25zd
  W1lclJlc3BvbnNlEjcKBnN0YXR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgviPwgSBnN0YXR1c1IGc3RhdHVzIk8KFURlb
  GV0ZUNvbnN1bWVyUmVxdWVzdBI2Cg1jb25zdW1lcl9uYW1lGAEgASgJQhHiPw4SDGNvbnN1bWVyTmFtZVIMY29uc3VtZXJOYW1lI
  lEKFkRlbGV0ZUNvbnN1bWVyUmVzcG9uc2USNwoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3RhdHVzU
  gZzdGF0dXMiRwoNUmVzdW1lUmVxdWVzdBI2Cg1jb25zdW1lcl9uYW1lGAEgASgJQhHiPw4SDGNvbnN1bWVyTmFtZVIMY29uc3VtZ
  XJOYW1lIvEBCg5SZXN1bWVSZXNwb25zZRI8CgZzdGF0dXMYASABKAsyEi5nb29nbGUucnBjLlN0YXR1c0IL4j8IEgZzdGF0dXNIA
  FIGc3RhdHVziAEBEk8KCG1lc3NhZ2VzGAIgAygLMiQudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLk1lc3NhZ2VCDeI/ChIIb
  WVzc2FnZXNSCG1lc3NhZ2VzEkUKEnByb2Nlc3NlZF9tZXNzYWdlcxgDIAEoA0IW4j8TEhFwcm9jZXNzZWRNZXNzYWdlc1IRcHJvY
  2Vzc2VkTWVzc2FnZXNCCQoHX3N0YXR1cyJGCgxQYXVzZVJlcXVlc3QSNgoNY29uc3VtZXJfbmFtZRgBIAEoCUIR4j8OEgxjb25zd
  W1lck5hbWVSDGNvbnN1bWVyTmFtZSJICg1QYXVzZVJlc3BvbnNlEjcKBnN0YXR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQ
  gviPwgSBnN0YXR1c1IGc3RhdHVzIsoBCgtTZWVrUmVxdWVzdBI2Cg1jb25zdW1lcl9uYW1lGAEgASgJQhHiPw4SDGNvbnN1bWVyT
  mFtZVIMY29uc3VtZXJOYW1lEkoKCXRpbWVzdGFtcBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDuI/CxIJdGltZ
  XN0YW1wSABSCXRpbWVzdGFtcBIvCgptZXNzYWdlX2lkGAMgASgMQg7iPwsSCW1lc3NhZ2VJZEgAUgltZXNzYWdlSWRCBgoEc2Vla
  yJHCgxTZWVrUmVzcG9uc2USNwoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3RhdHVzUgZzdGF0dXMik
  AEKE1NraXBNZXNzYWdlc1JlcXVlc3QSIAoFdG9waWMYASABKAlCCuI/BxIFdG9waWNSBXRvcGljEjUKDHN1YnNjcmlwdGlvbhgCI
  AEoCUIR4j8OEgxzdWJzY3JpcHRpb25SDHN1YnNjcmlwdGlvbhIgCgVjb3VudBgDIAEoA0IK4j8HEgVjb3VudFIFY291bnQq3wEKE
  FN1YnNjcmlwdGlvbk1vZGUSRQodU1VCU0NSSVBUSU9OX01PREVfVU5TUEVDSUZJRUQQABoi4j8fEh1TVUJTQ1JJUFRJT05fTU9ER
  V9VTlNQRUNJRklFRBI9ChlTVUJTQ1JJUFRJT05fTU9ERV9EVVJBQkxFEAEaHuI/GxIZU1VCU0NSSVBUSU9OX01PREVfRFVSQUJMR
  RJFCh1TVUJTQ1JJUFRJT05fTU9ERV9OT05fRFVSQUJMRRACGiLiPx8SHVNVQlNDUklQVElPTl9NT0RFX05PTl9EVVJBQkxFKt8CC
  hBTdWJzY3JpcHRpb25UeXBlEkUKHVNVQlNDUklQVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAAaIuI/HxIdU1VCU0NSSVBUSU9OX1RZU
  EVfVU5TUEVDSUZJRUQSQQobU1VCU0NSSVBUSU9OX1RZUEVfRVhDTFVTSVZFEAEaIOI/HRIbU1VCU0NSSVBUSU9OX1RZUEVfRVhDT
  FVTSVZFEj8KGlNVQlNDUklQVElPTl9UWVBFX0ZBSUxPVkVSEAIaH+I/HBIaU1VCU0NSSVBUSU9OX1RZUEVfRkFJTE9WRVISOwoYU
  1VCU0NSSVBUSU9OX1RZUEVfU0hBUkVEEAMaHeI/GhIYU1VCU0NSSVBUSU9OX1RZUEVfU0hBUkVEEkMKHFNVQlNDUklQVElPTl9UW
  VBFX0tFWV9TSEFSRUQQBBoh4j8eEhxTVUJTQ1JJUFRJT05fVFlQRV9LRVlfU0hBUkVEKqoCChtTdWJzY3JpcHRpb25Jbml0aWFsU
  G9zaXRpb24SXQopU1VCU0NSSVBUSU9OX0lOSVRJQUxfUE9TSVRJT05fVU5TUEVDSUZJRUQQABou4j8rEilTVUJTQ1JJUFRJT05fS
  U5JVElBTF9QT1NJVElPTl9VTlNQRUNJRklFRBJXCiZTVUJTQ1JJUFRJT05fSU5JVElBTF9QT1NJVElPTl9FQVJMSUVTVBABGiviP
  ygSJlNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUSU9OX0VBUkxJRVNUElMKJFNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUSU9OX
  0xBVEVTVBACGiniPyYSJFNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUSU9OX0xBVEVTVCr5AgoVUmVnZXhTdWJzY3JpcHRpb25Nb
  2RlElEKI1JFR0VYX1NVQlNDUklQVElPTl9NT0RFX1VOU1BFQ0lGSUVEEAAaKOI/JRIjUkVHRVhfU1VCU0NSSVBUSU9OX01PREVfV
  U5TUEVDSUZJRUQSWQonUkVHRVhfU1VCU0NSSVBUSU9OX01PREVfUEVSU0lTVEVOVF9PTkxZEAEaLOI/KRInUkVHRVhfU1VCU0NSS
  VBUSU9OX01PREVfUEVSU0lTVEVOVF9PTkxZEmEKK1JFR0VYX1NVQlNDUklQVElPTl9NT0RFX05PTl9QRVJTSVNURU5UX09OTFkQA
  how4j8tEitSRUdFWF9TVUJTQ1JJUFRJT05fTU9ERV9OT05fUEVSU0lTVEVOVF9PTkxZEk8KIlJFR0VYX1NVQlNDUklQVElPTl9NT
  0RFX0FMTF9UT1BJQ1MQAxon4j8kEiJSRUdFWF9TVUJTQ1JJUFRJT05fTU9ERV9BTExfVE9QSUNTMqkECg9Db25zdW1lclNlcnZpY
  2USeQoOQ3JlYXRlQ29uc3VtZXISMi50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuQ3JlYXRlQ29uc3VtZXJSZXF1ZXN0GjMud
  G9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkNyZWF0ZUNvbnN1bWVyUmVzcG9uc2USeQoORGVsZXRlQ29uc3VtZXISMi50b29sc
  y50ZWFsLnB1bHNhci51aS5hcGkudjEuRGVsZXRlQ29uc3VtZXJSZXF1ZXN0GjMudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxL
  kRlbGV0ZUNvbnN1bWVyUmVzcG9uc2USYwoGUmVzdW1lEioudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlJlc3VtZVJlcXVlc
  3QaKy50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuUmVzdW1lUmVzcG9uc2UwARJeCgVQYXVzZRIpLnRvb2xzLnRlYWwucHVsc
  2FyLnVpLmFwaS52MS5QYXVzZVJlcXVlc3QaKi50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuUGF1c2VSZXNwb25zZRJbCgRTZ
  WVrEigudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlNlZWtSZXF1ZXN0GikudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxL
  lNlZWtSZXNwb25zZULDAQofY29tLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MUINQ29uc3VtZXJQcm90b1ABogIFVFRQVUGqA
  htUb29scy5UZWFsLlB1bHNhci5VaS5BcGkuVjHKAhtUb29sc1xUZWFsXFB1bHNhclxVaVxBcGlcVjHiAidUb29sc1xUZWFsXFB1b
  HNhclxVaVxBcGlcVjFcR1BCTWV0YWRhdGHqAiBUb29sczo6VGVhbDo6UHVsc2FyOjpVaTo6QXBpOjpWMWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.rpc.status.StatusProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}