// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

object ConsumerProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.timestamp.TimestampProto,
    com.google.rpc.status.StatusProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.tools.teal.pulsar.ui.api.v1.consumer.MessageId,
      com.tools.teal.pulsar.ui.api.v1.consumer.Message,
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cip0b29scy90ZWFsL3B1bHNhci91aS9hcGkvdjEvY29uc3VtZXIucHJvdG8SG3Rvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52M
  RofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoXZ29vZ2xlL3JwYy9zdGF0dXMucHJvdG8iwQEKCU1lc3NhZ2VJZBIqC
  glsZWRnZXJfaWQYASABKANCDeI/ChIIbGVkZ2VySWRSCGxlZGdlcklkEicKCGVudHJ5X2lkGAIgASgDQgziPwkSB2VudHJ5SWRSB
  2VudHJ5SWQSJwoIYmF0Y2hfaWQYAyABKAVCDOI/CRIHYmF0Y2hJZFIHYmF0Y2hJZBI2Cg1wYXJ0aXRpb25faWR4GAQgASgFQhHiP
  w4SDHBhcnRpdGlvbklkeFIMcGFydGl0aW9uSWR4IqMICgdNZXNzYWdlEmUKCnByb3BlcnRpZXMYASADKAsyNC50b29scy50ZWFsL
  nB1bHNhci51aS5hcGkudjEuTWVzc2FnZS5Qcm9wZXJ0aWVzRW50cnlCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxIdCgRkY
  XRhGAIgASgMQgniPwYSBGRhdGFSBGRhdGESHQoEc2l6ZRgDIAEoA0IJ4j8GEgRzaXplUgRzaXplEiAKBXZhbHVlGAQgASgJQgriP
  wcSBXZhbHVlUgV2YWx1ZRJJCgpldmVudF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIO4j8LEglldmVud
  FRpbWVSCWV2ZW50VGltZRJPCgxwdWJsaXNoX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQhDiPw0SC3B1Y
  mxpc2hUaW1lUgtwdWJsaXNoVGltZRJiChNicm9rZXJfcHVibGlzaF90aW1lGBYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzd
  GFtcEIW4j8TEhFicm9rZXJQdWJsaXNoVGltZVIRYnJva2VyUHVibGlzaFRpbWUSLQoKbWVzc2FnZV9pZBgeIAEoDEIO4j8LEgltZ
  XNzYWdlSWRSCW1lc3NhZ2VJZBIwCgtzZXF1ZW5jZV9pZBgIIAEoAUIP4j8MEgpzZXF1ZW5jZUlkUgpzZXF1ZW5jZUlkEjYKDXByb
  2R1Y2VyX25hbWUYCSABKAlCEeI/DhIMcHJvZHVjZXJOYW1lUgxwcm9kdWNlck5hbWUSGgoDa2V5GAogASgJQgjiPwUSA2tleVIDa
  2V5EjMKDG9yZGVyaW5nX2tleRgLIAEoDEIQ4j8NEgtvcmRlcmluZ0tleVILb3JkZXJpbmdLZXkSIAoFdG9waWMYDCABKAlCCuI/B
  xIFdG9waWNSBXRvcGljEj8KEHJlZGVsaXZlcnlfY291bnQYDSABKAVCFOI/ERIPcmVkZWxpdmVyeUNvdW50Ug9yZWRlbGl2ZXJ5Q
  291bnQSOQoOc2NoZW1hX3ZlcnNpb24YDiABKAxCEuI/DxINc2NoZW1hVmVyc2lvblINc2NoZW1hVmVyc2lvbhI2Cg1pc19yZXBsa
  WNhdGVkGBQgASgIQhHiPw4SDGlzUmVwbGljYXRlZFIMaXNSZXBsaWNhdGVkEjwKD3JlcGxpY2F0ZWRfZnJvbRgVIAEoCUIT4j8QE
  g5yZXBsaWNhdGVkRnJvbVIOcmVwbGljYXRlZEZyb20aUwoPUHJvcGVydGllc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA
  2tleRIgCgV2YWx1ZRgCIAEoCUIK4j8HEgV2YWx1ZVIFdmFsdWU6AjgBIj8KDVRvcGljU2VsZWN0b3ISIgoFdG9waWMYASABKAlCC
  uI/BxIFdG9waWNIAFIFdG9waWNCCgoIc2VsZWN0b3Ii0gwKFUNyZWF0ZUNvbnN1bWVyUmVxdWVzdBJlCg50b3BpY19zZWxlY3Rvc
  hhkIAEoCzIqLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5Ub3BpY1NlbGVjdG9yQhLiPw8SDXRvcGljU2VsZWN0b3JSDXRvc
  GljU2VsZWN0b3ISOwoNY29uc3VtZXJfbmFtZRgBIAEoCUIR4j8OEgxjb25zdW1lck5hbWVIAFIMY29uc3VtZXJOYW1liAEBEkcKE
  XN1YnNjcmlwdGlvbl9uYW1lGAIgASgJQhXiPxISEHN1YnNjcmlwdGlvbk5hbWVIAVIQc3Vic2NyaXB0aW9uTmFtZYgBARI+Cg5wc
  mlvcml0eV9sZXZlbBgDIAEoBUIS4j8PEg1wcmlvcml0eUxldmVsSAJSDXByaW9yaXR5TGV2ZWyIAQESOAoMc3RhcnRfcGF1c2VkG
  AQgASgIQhDiPw0SC3N0YXJ0UGF1c2VkSANSC3N0YXJ0UGF1c2VkiAEBEnYKEXN1YnNjcmlwdGlvbl9tb2RlGAUgASgOMi0udG9vb
  HMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlN1YnNjcmlwdGlvbk1vZGVCFeI/EhIQc3Vic2NyaXB0aW9uTW9kZUgEUhBzdWJzY3Jpc
  HRpb25Nb2RliAEBEnYKEXN1YnNjcmlwdGlvbl90eXBlGAYgASgOMi0udG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlN1YnNjc
  mlwdGlvblR5cGVCFeI/EhIQc3Vic2NyaXB0aW9uVHlwZUgFUhBzdWJzY3JpcHRpb25UeXBliAEBEqMBCh1zdWJzY3JpcHRpb25fa
  W5pdGlhbF9wb3NpdGlvbhgHIAEoDjI4LnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5TdWJzY3JpcHRpb25Jbml0aWFsUG9za
  XRpb25CIOI/HRIbc3Vic2NyaXB0aW9uSW5pdGlhbFBvc2l0aW9uSAZSG3N1YnNjcmlwdGlvbkluaXRpYWxQb3NpdGlvbogBARI8C
  g5hY2tfdGltZW91dF9tcxgIIAEoA0IR4j8OEgxhY2tUaW1lb3V0TXNIB1IMYWNrVGltZW91dE1ziAEBElYKGGFja190aW1lb3V0X
  3RpY2tfdGltZV9tcxgJIAEoA0IZ4j8WEhRhY2tUaW1lb3V0VGlja1RpbWVNc0gIUhRhY2tUaW1lb3V0VGlja1RpbWVNc4gBARKOA
  QosZXhwaXJlX3RpbWVfb2ZfaW5jb21wbGV0ZV9jaHVua2VkX21lc3NhZ2VfbXMYCiABKANCK+I/KBImZXhwaXJlVGltZU9mSW5jb
  21wbGV0ZUNodW5rZWRNZXNzYWdlTXNICVImZXhwaXJlVGltZU9mSW5jb21wbGV0ZUNodW5rZWRNZXNzYWdlTXOIAQESZAocYWNrb
  m93bGVkZ21lbnRfZ3JvdXBfdGltZV9tcxgLIAEoA0Ie4j8bEhlhY2tub3dsZWRnbWVudEdyb3VwVGltZU1zSApSGWFja25vd2xlZ
  GdtZW50R3JvdXBUaW1lTXOIAQESbgogbmVnYXRpdmVfYWNrX3JlZGVsaXZlcnlfZGVsYXlfbXMYDCABKANCIeI/HhIcbmVnYXRpd
  mVBY2tSZWRlbGl2ZXJ5RGVsYXlNc0gLUhxuZWdhdGl2ZUFja1JlZGVsaXZlcnlEZWxheU1ziAEBQhAKDl9jb25zdW1lcl9uYW1lQ
  hQKEl9zdWJzY3JpcHRpb25fbmFtZUIRCg9fcHJpb3JpdHlfbGV2ZWxCDwoNX3N0YXJ0X3BhdXNlZEIUChJfc3Vic2NyaXB0aW9uX
  21vZGVCFAoSX3N1YnNjcmlwdGlvbl90eXBlQiAKHl9zdWJzY3JpcHRpb25faW5pdGlhbF9wb3NpdGlvbkIRCg9fYWNrX3RpbWVvd
  XRfbXNCGwoZX2Fja190aW1lb3V0X3RpY2tfdGltZV9tc0IvCi1fZXhwaXJlX3RpbWVfb2ZfaW5jb21wbGV0ZV9jaHVua2VkX21lc
  3NhZ2VfbXNCHwodX2Fja25vd2xlZGdtZW50X2dyb3VwX3RpbWVfbXNCIwohX25lZ2F0aXZlX2Fja19yZWRlbGl2ZXJ5X2RlbGF5X
  21zIlEKFkNyZWF0ZUNvbnN1bWVyUmVzcG9uc2USNwoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3Rhd
  HVzUgZzdGF0dXMiTwoVRGVsZXRlQ29uc3VtZXJSZXF1ZXN0EjYKDWNvbnN1bWVyX25hbWUYASABKAlCEeI/DhIMY29uc3VtZXJOY
  W1lUgxjb25zdW1lck5hbWUiUQoWRGVsZXRlQ29uc3VtZXJSZXNwb25zZRI3CgZzdGF0dXMYASABKAsyEi5nb29nbGUucnBjLlN0Y
  XR1c0IL4j8IEgZzdGF0dXNSBnN0YXR1cyJHCg1SZXN1bWVSZXF1ZXN0EjYKDWNvbnN1bWVyX25hbWUYASABKAlCEeI/DhIMY29uc
  3VtZXJOYW1lUgxjb25zdW1lck5hbWUiqgEKDlJlc3VtZVJlc3BvbnNlEjwKBnN0YXR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3Rhd
  HVzQgviPwgSBnN0YXR1c0gAUgZzdGF0dXOIAQESTwoIbWVzc2FnZXMYAiADKAsyJC50b29scy50ZWFsLnB1bHNhci51aS5hcGkud
  jEuTWVzc2FnZUIN4j8KEghtZXNzYWdlc1IIbWVzc2FnZXNCCQoHX3N0YXR1cyJGCgxQYXVzZVJlcXVlc3QSNgoNY29uc3VtZXJfb
  mFtZRgBIAEoCUIR4j8OEgxjb25zdW1lck5hbWVSDGNvbnN1bWVyTmFtZSJICg1QYXVzZVJlc3BvbnNlEjcKBnN0YXR1cxgBIAEoC
  zISLmdvb2dsZS5ycGMuU3RhdHVzQgviPwgSBnN0YXR1c1IGc3RhdHVzKt8BChBTdWJzY3JpcHRpb25Nb2RlEkUKHVNVQlNDUklQV
  ElPTl9NT0RFX1VOU1BFQ0lGSUVEEAAaIuI/HxIdU1VCU0NSSVBUSU9OX01PREVfVU5TUEVDSUZJRUQSPQoZU1VCU0NSSVBUSU9OX
  01PREVfRFVSQUJMRRABGh7iPxsSGVNVQlNDUklQVElPTl9NT0RFX0RVUkFCTEUSRQodU1VCU0NSSVBUSU9OX01PREVfTk9OX0RVU
  kFCTEUQAhoi4j8fEh1TVUJTQ1JJUFRJT05fTU9ERV9OT05fRFVSQUJMRSrfAgoQU3Vic2NyaXB0aW9uVHlwZRJFCh1TVUJTQ1JJU
  FRJT05fVFlQRV9VTlNQRUNJRklFRBAAGiLiPx8SHVNVQlNDUklQVElPTl9UWVBFX1VOU1BFQ0lGSUVEEkEKG1NVQlNDUklQVElPT
  l9UWVBFX0VYQ0xVU0lWRRABGiDiPx0SG1NVQlNDUklQVElPTl9UWVBFX0VYQ0xVU0lWRRI/ChpTVUJTQ1JJUFRJT05fVFlQRV9GQ
  UlMT1ZFUhACGh/iPxwSGlNVQlNDUklQVElPTl9UWVBFX0ZBSUxPVkVSEjsKGFNVQlNDUklQVElPTl9UWVBFX1NIQVJFRBADGh3iP
  xoSGFNVQlNDUklQVElPTl9UWVBFX1NIQVJFRBJDChxTVUJTQ1JJUFRJT05fVFlQRV9LRVlfU0hBUkVEEAQaIeI/HhIcU1VCU0NSS
  VBUSU9OX1RZUEVfS0VZX1NIQVJFRCqqAgobU3Vic2NyaXB0aW9uSW5pdGlhbFBvc2l0aW9uEl0KKVNVQlNDUklQVElPTl9JTklUS
  UFMX1BPU0lUSU9OX1VOU1BFQ0lGSUVEEAAaLuI/KxIpU1VCU0NSSVBUSU9OX0lOSVRJQUxfUE9TSVRJT05fVU5TUEVDSUZJRUQSV
  womU1VCU0NSSVBUSU9OX0lOSVRJQUxfUE9TSVRJT05fRUFSTElFU1QQARor4j8oEiZTVUJTQ1JJUFRJT05fSU5JVElBTF9QT1NJV
  ElPTl9FQVJMSUVTVBJTCiRTVUJTQ1JJUFRJT05fSU5JVElBTF9QT1NJVElPTl9MQVRFU1QQAhop4j8mEiRTVUJTQ1JJUFRJT05fS
  U5JVElBTF9QT1NJVElPTl9MQVRFU1QyzAMKD0NvbnN1bWVyU2VydmljZRJ5Cg5DcmVhdGVDb25zdW1lchIyLnRvb2xzLnRlYWwuc
  HVsc2FyLnVpLmFwaS52MS5DcmVhdGVDb25zdW1lclJlcXVlc3QaMy50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuQ3JlYXRlQ
  29uc3VtZXJSZXNwb25zZRJ5Cg5EZWxldGVDb25zdW1lchIyLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5EZWxldGVDb25zd
  W1lclJlcXVlc3QaMy50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuRGVsZXRlQ29uc3VtZXJSZXNwb25zZRJjCgZSZXN1bWUSK
  i50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuUmVzdW1lUmVxdWVzdBorLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5SZ
  XN1bWVSZXNwb25zZTABEl4KBVBhdXNlEikudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlBhdXNlUmVxdWVzdBoqLnRvb2xzL
  nRlYWwucHVsc2FyLnVpLmFwaS52MS5QYXVzZVJlc3BvbnNlQsMBCh9jb20udG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxQg1Db
  25zdW1lclByb3RvUAGiAgVUVFBVQaoCG1Rvb2xzLlRlYWwuUHVsc2FyLlVpLkFwaS5WMcoCG1Rvb2xzXFRlYWxcUHVsc2FyXFVpX
  EFwaVxWMeICJ1Rvb2xzXFRlYWxcUHVsc2FyXFVpXEFwaVxWMVxHUEJNZXRhZGF0YeoCIFRvb2xzOjpUZWFsOjpQdWxzYXI6OlVpO
  jpBcGk6OlYxYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.rpc.status.StatusProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}