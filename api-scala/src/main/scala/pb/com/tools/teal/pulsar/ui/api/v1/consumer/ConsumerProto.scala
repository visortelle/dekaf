// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

object ConsumerProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.timestamp.TimestampProto,
    com.google.rpc.status.StatusProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.tools.teal.pulsar.ui.api.v1.consumer.MessageId,
      com.tools.teal.pulsar.ui.api.v1.consumer.Message,
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByName,
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelectorByRegex,
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicsSelector,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscription,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cip0b29scy90ZWFsL3B1bHNhci91aS9hcGkvdjEvY29uc3VtZXIucHJvdG8SG3Rvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52M
  RofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoXZ29vZ2xlL3JwYy9zdGF0dXMucHJvdG8iwQEKCU1lc3NhZ2VJZBIqC
  glsZWRnZXJfaWQYASABKANCDeI/ChIIbGVkZ2VySWRSCGxlZGdlcklkEicKCGVudHJ5X2lkGAIgASgDQgziPwkSB2VudHJ5SWRSB
  2VudHJ5SWQSJwoIYmF0Y2hfaWQYAyABKAVCDOI/CRIHYmF0Y2hJZFIHYmF0Y2hJZBI2Cg1wYXJ0aXRpb25faWR4GAQgASgFQhHiP
  w4SDHBhcnRpdGlvbklkeFIMcGFydGl0aW9uSWR4IukKCgdNZXNzYWdlEmUKCnByb3BlcnRpZXMYASADKAsyNC50b29scy50ZWFsL
  nB1bHNhci51aS5hcGkudjEuTWVzc2FnZS5Qcm9wZXJ0aWVzRW50cnlCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxIiCgRkY
  XRhGAIgASgMQgniPwYSBGRhdGFIAFIEZGF0YYgBARIiCgRzaXplGAMgASgDQgniPwYSBHNpemVIAVIEc2l6ZYgBARIlCgV2YWx1Z
  RgEIAEoCUIK4j8HEgV2YWx1ZUgCUgV2YWx1ZYgBARJOCgpldmVudF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzd
  GFtcEIO4j8LEglldmVudFRpbWVIA1IJZXZlbnRUaW1liAEBElQKDHB1Ymxpc2hfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Z
  i5UaW1lc3RhbXBCEOI/DRILcHVibGlzaFRpbWVIBFILcHVibGlzaFRpbWWIAQESZwoTYnJva2VyX3B1Ymxpc2hfdGltZRgWIAEoC
  zIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCFuI/ExIRYnJva2VyUHVibGlzaFRpbWVIBVIRYnJva2VyUHVibGlzaFRpbWWIA
  QESMgoKbWVzc2FnZV9pZBgeIAEoDEIO4j8LEgltZXNzYWdlSWRIBlIJbWVzc2FnZUlkiAEBEjUKC3NlcXVlbmNlX2lkGAggASgBQ
  g/iPwwSCnNlcXVlbmNlSWRIB1IKc2VxdWVuY2VJZIgBARI7Cg1wcm9kdWNlcl9uYW1lGAkgASgJQhHiPw4SDHByb2R1Y2VyTmFtZ
  UgIUgxwcm9kdWNlck5hbWWIAQESHwoDa2V5GAogASgJQgjiPwUSA2tleUgJUgNrZXmIAQESOAoMb3JkZXJpbmdfa2V5GAsgASgMQ
  hDiPw0SC29yZGVyaW5nS2V5SApSC29yZGVyaW5nS2V5iAEBEiUKBXRvcGljGAwgASgJQgriPwcSBXRvcGljSAtSBXRvcGljiAEBE
  kQKEHJlZGVsaXZlcnlfY291bnQYDSABKAVCFOI/ERIPcmVkZWxpdmVyeUNvdW50SAxSD3JlZGVsaXZlcnlDb3VudIgBARI+Cg5zY
  2hlbWFfdmVyc2lvbhgOIAEoDEIS4j8PEg1zY2hlbWFWZXJzaW9uSA1SDXNjaGVtYVZlcnNpb26IAQESOwoNaXNfcmVwbGljYXRlZ
  BgUIAEoCEIR4j8OEgxpc1JlcGxpY2F0ZWRIDlIMaXNSZXBsaWNhdGVkiAEBEkEKD3JlcGxpY2F0ZWRfZnJvbRgVIAEoCUIT4j8QE
  g5yZXBsaWNhdGVkRnJvbUgPUg5yZXBsaWNhdGVkRnJvbYgBARpTCg9Qcm9wZXJ0aWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA
  2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAFCBwoFX2RhdGFCBwoFX3NpemVCCAoGX3ZhbHVlQ
  g0KC19ldmVudF90aW1lQg8KDV9wdWJsaXNoX3RpbWVCFgoUX2Jyb2tlcl9wdWJsaXNoX3RpbWVCDQoLX21lc3NhZ2VfaWRCDgoMX
  3NlcXVlbmNlX2lkQhAKDl9wcm9kdWNlcl9uYW1lQgYKBF9rZXlCDwoNX29yZGVyaW5nX2tleUIICgZfdG9waWNCEwoRX3JlZGVsa
  XZlcnlfY291bnRCEQoPX3NjaGVtYV92ZXJzaW9uQhAKDl9pc19yZXBsaWNhdGVkQhIKEF9yZXBsaWNhdGVkX2Zyb20iOwoUVG9wa
  WNzU2VsZWN0b3JCeU5hbWUSIwoGdG9waWNzGAEgAygJQgviPwgSBnRvcGljc1IGdG9waWNzIvoBChVUb3BpY3NTZWxlY3RvckJ5U
  mVnZXgSKwoHcGF0dGVybhgCIAEoCUIM4j8JEgdwYXR0ZXJuSABSB3BhdHRlcm6IAQESiwEKF3JlZ2V4X3N1YnNjcmlwdGlvbl9tb
  2RlGAMgASgOMjIudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlJlZ2V4U3Vic2NyaXB0aW9uTW9kZUIa4j8XEhVyZWdleFN1Y
  nNjcmlwdGlvbk1vZGVIAVIVcmVnZXhTdWJzY3JpcHRpb25Nb2RliAEBQgoKCF9wYXR0ZXJuQhoKGF9yZWdleF9zdWJzY3JpcHRpb
  25fbW9kZSLdAQoOVG9waWNzU2VsZWN0b3ISWQoHYnlfbmFtZRgBIAEoCzIxLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5Ub
  3BpY3NTZWxlY3RvckJ5TmFtZUIL4j8IEgZieU5hbWVIAFIGYnlOYW1lEl0KCGJ5X3JlZ2V4GAIgASgLMjIudG9vbHMudGVhbC5wd
  WxzYXIudWkuYXBpLnYxLlRvcGljc1NlbGVjdG9yQnlSZWdleEIM4j8JEgdieVJlZ2V4SABSB2J5UmVnZXhCEQoPdG9waWNzX3Nlb
  GVjdG9yItYMChVDcmVhdGVDb25zdW1lclJlcXVlc3QSaQoPdG9waWNzX3NlbGVjdG9yGGQgASgLMisudG9vbHMudGVhbC5wdWxzY
  XIudWkuYXBpLnYxLlRvcGljc1NlbGVjdG9yQhPiPxASDnRvcGljc1NlbGVjdG9yUg50b3BpY3NTZWxlY3RvchI7Cg1jb25zdW1lc
  l9uYW1lGAEgASgJQhHiPw4SDGNvbnN1bWVyTmFtZUgAUgxjb25zdW1lck5hbWWIAQESRwoRc3Vic2NyaXB0aW9uX25hbWUYAiABK
  AlCFeI/EhIQc3Vic2NyaXB0aW9uTmFtZUgBUhBzdWJzY3JpcHRpb25OYW1liAEBEj4KDnByaW9yaXR5X2xldmVsGAMgASgFQhLiP
  w8SDXByaW9yaXR5TGV2ZWxIAlINcHJpb3JpdHlMZXZlbIgBARI4CgxzdGFydF9wYXVzZWQYBCABKAhCEOI/DRILc3RhcnRQYXVzZ
  WRIA1ILc3RhcnRQYXVzZWSIAQESdgoRc3Vic2NyaXB0aW9uX21vZGUYBSABKA4yLS50b29scy50ZWFsLnB1bHNhci51aS5hcGkud
  jEuU3Vic2NyaXB0aW9uTW9kZUIV4j8SEhBzdWJzY3JpcHRpb25Nb2RlSARSEHN1YnNjcmlwdGlvbk1vZGWIAQESdgoRc3Vic2Nya
  XB0aW9uX3R5cGUYBiABKA4yLS50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuU3Vic2NyaXB0aW9uVHlwZUIV4j8SEhBzdWJzY
  3JpcHRpb25UeXBlSAVSEHN1YnNjcmlwdGlvblR5cGWIAQESowEKHXN1YnNjcmlwdGlvbl9pbml0aWFsX3Bvc2l0aW9uGAcgASgOM
  jgudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlN1YnNjcmlwdGlvbkluaXRpYWxQb3NpdGlvbkIg4j8dEhtzdWJzY3JpcHRpb
  25Jbml0aWFsUG9zaXRpb25IBlIbc3Vic2NyaXB0aW9uSW5pdGlhbFBvc2l0aW9uiAEBEjwKDmFja190aW1lb3V0X21zGAggASgDQ
  hHiPw4SDGFja1RpbWVvdXRNc0gHUgxhY2tUaW1lb3V0TXOIAQESVgoYYWNrX3RpbWVvdXRfdGlja190aW1lX21zGAkgASgDQhniP
  xYSFGFja1RpbWVvdXRUaWNrVGltZU1zSAhSFGFja1RpbWVvdXRUaWNrVGltZU1ziAEBEo4BCixleHBpcmVfdGltZV9vZl9pbmNvb
  XBsZXRlX2NodW5rZWRfbWVzc2FnZV9tcxgKIAEoA0Ir4j8oEiZleHBpcmVUaW1lT2ZJbmNvbXBsZXRlQ2h1bmtlZE1lc3NhZ2VNc
  0gJUiZleHBpcmVUaW1lT2ZJbmNvbXBsZXRlQ2h1bmtlZE1lc3NhZ2VNc4gBARJkChxhY2tub3dsZWRnbWVudF9ncm91cF90aW1lX
  21zGAsgASgDQh7iPxsSGWFja25vd2xlZGdtZW50R3JvdXBUaW1lTXNIClIZYWNrbm93bGVkZ21lbnRHcm91cFRpbWVNc4gBARJuC
  iBuZWdhdGl2ZV9hY2tfcmVkZWxpdmVyeV9kZWxheV9tcxgMIAEoA0Ih4j8eEhxuZWdhdGl2ZUFja1JlZGVsaXZlcnlEZWxheU1zS
  AtSHG5lZ2F0aXZlQWNrUmVkZWxpdmVyeURlbGF5TXOIAQFCEAoOX2NvbnN1bWVyX25hbWVCFAoSX3N1YnNjcmlwdGlvbl9uYW1lQ
  hEKD19wcmlvcml0eV9sZXZlbEIPCg1fc3RhcnRfcGF1c2VkQhQKEl9zdWJzY3JpcHRpb25fbW9kZUIUChJfc3Vic2NyaXB0aW9uX
  3R5cGVCIAoeX3N1YnNjcmlwdGlvbl9pbml0aWFsX3Bvc2l0aW9uQhEKD19hY2tfdGltZW91dF9tc0IbChlfYWNrX3RpbWVvdXRfd
  Glja190aW1lX21zQi8KLV9leHBpcmVfdGltZV9vZl9pbmNvbXBsZXRlX2NodW5rZWRfbWVzc2FnZV9tc0IfCh1fYWNrbm93bGVkZ
  21lbnRfZ3JvdXBfdGltZV9tc0IjCiFfbmVnYXRpdmVfYWNrX3JlZGVsaXZlcnlfZGVsYXlfbXMiUQoWQ3JlYXRlQ29uc3VtZXJSZ
  XNwb25zZRI3CgZzdGF0dXMYASABKAsyEi5nb29nbGUucnBjLlN0YXR1c0IL4j8IEgZzdGF0dXNSBnN0YXR1cyJPChVEZWxldGVDb
  25zdW1lclJlcXVlc3QSNgoNY29uc3VtZXJfbmFtZRgBIAEoCUIR4j8OEgxjb25zdW1lck5hbWVSDGNvbnN1bWVyTmFtZSJRChZEZ
  WxldGVDb25zdW1lclJlc3BvbnNlEjcKBnN0YXR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgviPwgSBnN0YXR1c1IGc3Rhd
  HVzIkcKDVJlc3VtZVJlcXVlc3QSNgoNY29uc3VtZXJfbmFtZRgBIAEoCUIR4j8OEgxjb25zdW1lck5hbWVSDGNvbnN1bWVyTmFtZ
  SKqAQoOUmVzdW1lUmVzcG9uc2USPAoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3RhdHVzSABSBnN0Y
  XR1c4gBARJPCghtZXNzYWdlcxgCIAMoCzIkLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5NZXNzYWdlQg3iPwoSCG1lc3NhZ
  2VzUghtZXNzYWdlc0IJCgdfc3RhdHVzIkYKDFBhdXNlUmVxdWVzdBI2Cg1jb25zdW1lcl9uYW1lGAEgASgJQhHiPw4SDGNvbnN1b
  WVyTmFtZVIMY29uc3VtZXJOYW1lIkgKDVBhdXNlUmVzcG9uc2USNwoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC
  +I/CBIGc3RhdHVzUgZzdGF0dXMinAEKEkRlbGV0ZVN1YnNjcmlwdGlvbhJCChFzdWJzY3JpcHRpb25fbmFtZRgBIAEoCUIV4j8SE
  hBzdWJzY3JpcHRpb25OYW1lUhBzdWJzY3JpcHRpb25OYW1lEiAKBXRvcGljGAIgASgJQgriPwcSBXRvcGljUgV0b3BpYxIgCgVmb
  3JjZRgDIAEoCEIK4j8HEgVmb3JjZVIFZm9yY2UihwEKGkRlbGV0ZVN1YnNjcmlwdGlvbnNSZXF1ZXN0EmkKDXN1YnNjcmlwdGlvb
  nMYASADKAsyLy50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuRGVsZXRlU3Vic2NyaXB0aW9uQhLiPw8SDXN1YnNjcmlwdGlvb
  nNSDXN1YnNjcmlwdGlvbnMiVgobRGVsZXRlU3Vic2NyaXB0aW9uc1Jlc3BvbnNlEjcKBnN0YXR1cxgBIAEoCzISLmdvb2dsZS5yc
  GMuU3RhdHVzQgviPwgSBnN0YXR1c1IGc3RhdHVzIsoBCgtTZWVrUmVxdWVzdBI2Cg1jb25zdW1lcl9uYW1lGAEgASgJQhHiPw4SD
  GNvbnN1bWVyTmFtZVIMY29uc3VtZXJOYW1lEkoKCXRpbWVzdGFtcBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCD
  uI/CxIJdGltZXN0YW1wSABSCXRpbWVzdGFtcBIvCgptZXNzYWdlX2lkGAMgASgMQg7iPwsSCW1lc3NhZ2VJZEgAUgltZXNzYWdlS
  WRCBgoEc2VlayJHCgxTZWVrUmVzcG9uc2USNwoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3RhdHVzU
  gZzdGF0dXMq3wEKEFN1YnNjcmlwdGlvbk1vZGUSRQodU1VCU0NSSVBUSU9OX01PREVfVU5TUEVDSUZJRUQQABoi4j8fEh1TVUJTQ
  1JJUFRJT05fTU9ERV9VTlNQRUNJRklFRBI9ChlTVUJTQ1JJUFRJT05fTU9ERV9EVVJBQkxFEAEaHuI/GxIZU1VCU0NSSVBUSU9OX
  01PREVfRFVSQUJMRRJFCh1TVUJTQ1JJUFRJT05fTU9ERV9OT05fRFVSQUJMRRACGiLiPx8SHVNVQlNDUklQVElPTl9NT0RFX05PT
  l9EVVJBQkxFKt8CChBTdWJzY3JpcHRpb25UeXBlEkUKHVNVQlNDUklQVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAAaIuI/HxIdU1VCU
  0NSSVBUSU9OX1RZUEVfVU5TUEVDSUZJRUQSQQobU1VCU0NSSVBUSU9OX1RZUEVfRVhDTFVTSVZFEAEaIOI/HRIbU1VCU0NSSVBUS
  U9OX1RZUEVfRVhDTFVTSVZFEj8KGlNVQlNDUklQVElPTl9UWVBFX0ZBSUxPVkVSEAIaH+I/HBIaU1VCU0NSSVBUSU9OX1RZUEVfR
  kFJTE9WRVISOwoYU1VCU0NSSVBUSU9OX1RZUEVfU0hBUkVEEAMaHeI/GhIYU1VCU0NSSVBUSU9OX1RZUEVfU0hBUkVEEkMKHFNVQ
  lNDUklQVElPTl9UWVBFX0tFWV9TSEFSRUQQBBoh4j8eEhxTVUJTQ1JJUFRJT05fVFlQRV9LRVlfU0hBUkVEKqoCChtTdWJzY3Jpc
  HRpb25Jbml0aWFsUG9zaXRpb24SXQopU1VCU0NSSVBUSU9OX0lOSVRJQUxfUE9TSVRJT05fVU5TUEVDSUZJRUQQABou4j8rEilTV
  UJTQ1JJUFRJT05fSU5JVElBTF9QT1NJVElPTl9VTlNQRUNJRklFRBJXCiZTVUJTQ1JJUFRJT05fSU5JVElBTF9QT1NJVElPTl9FQ
  VJMSUVTVBABGiviPygSJlNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUSU9OX0VBUkxJRVNUElMKJFNVQlNDUklQVElPTl9JTklUS
  UFMX1BPU0lUSU9OX0xBVEVTVBACGiniPyYSJFNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUSU9OX0xBVEVTVCr5AgoVUmVnZXhTd
  WJzY3JpcHRpb25Nb2RlElEKI1JFR0VYX1NVQlNDUklQVElPTl9NT0RFX1VOU1BFQ0lGSUVEEAAaKOI/JRIjUkVHRVhfU1VCU0NSS
  VBUSU9OX01PREVfVU5TUEVDSUZJRUQSWQonUkVHRVhfU1VCU0NSSVBUSU9OX01PREVfUEVSU0lTVEVOVF9PTkxZEAEaLOI/KRInU
  kVHRVhfU1VCU0NSSVBUSU9OX01PREVfUEVSU0lTVEVOVF9PTkxZEmEKK1JFR0VYX1NVQlNDUklQVElPTl9NT0RFX05PTl9QRVJTS
  VNURU5UX09OTFkQAhow4j8tEitSRUdFWF9TVUJTQ1JJUFRJT05fTU9ERV9OT05fUEVSU0lTVEVOVF9PTkxZEk8KIlJFR0VYX1NVQ
  lNDUklQVElPTl9NT0RFX0FMTF9UT1BJQ1MQAxon4j8kEiJSRUdFWF9TVUJTQ1JJUFRJT05fTU9ERV9BTExfVE9QSUNTMrQFCg9Db
  25zdW1lclNlcnZpY2USeQoOQ3JlYXRlQ29uc3VtZXISMi50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuQ3JlYXRlQ29uc3VtZ
  XJSZXF1ZXN0GjMudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkNyZWF0ZUNvbnN1bWVyUmVzcG9uc2USeQoORGVsZXRlQ29uc
  3VtZXISMi50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuRGVsZXRlQ29uc3VtZXJSZXF1ZXN0GjMudG9vbHMudGVhbC5wdWxzY
  XIudWkuYXBpLnYxLkRlbGV0ZUNvbnN1bWVyUmVzcG9uc2USYwoGUmVzdW1lEioudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxL
  lJlc3VtZVJlcXVlc3QaKy50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuUmVzdW1lUmVzcG9uc2UwARJeCgVQYXVzZRIpLnRvb
  2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5QYXVzZVJlcXVlc3QaKi50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuUGF1c2VSZ
  XNwb25zZRKIAQoTRGVsZXRlU3Vic2NyaXB0aW9ucxI3LnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5EZWxldGVTdWJzY3Jpc
  HRpb25zUmVxdWVzdBo4LnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5EZWxldGVTdWJzY3JpcHRpb25zUmVzcG9uc2USWwoEU
  2VlaxIoLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5TZWVrUmVxdWVzdBopLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52M
  S5TZWVrUmVzcG9uc2VCwwEKH2NvbS50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjFCDUNvbnN1bWVyUHJvdG9QAaICBVRUUFVBq
  gIbVG9vbHMuVGVhbC5QdWxzYXIuVWkuQXBpLlYxygIbVG9vbHNcVGVhbFxQdWxzYXJcVWlcQXBpXFYx4gInVG9vbHNcVGVhbFxQd
  WxzYXJcVWlcQXBpXFYxXEdQQk1ldGFkYXRh6gIgVG9vbHM6OlRlYWw6OlB1bHNhcjo6VWk6OkFwaTo6VjFiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.rpc.status.StatusProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}