// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

object ConsumerProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.timestamp.TimestampProto,
    com.google.rpc.status.StatusProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.tools.teal.pulsar.ui.api.v1.consumer.MessageId,
      com.tools.teal.pulsar.ui.api.v1.consumer.Message,
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cip0b29scy90ZWFsL3B1bHNhci91aS9hcGkvdjEvY29uc3VtZXIucHJvdG8SG3Rvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52M
  RofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoXZ29vZ2xlL3JwYy9zdGF0dXMucHJvdG8iwQEKCU1lc3NhZ2VJZBIqC
  glsZWRnZXJfaWQYASABKANCDeI/ChIIbGVkZ2VySWRSCGxlZGdlcklkEicKCGVudHJ5X2lkGAIgASgDQgziPwkSB2VudHJ5SWRSB
  2VudHJ5SWQSJwoIYmF0Y2hfaWQYAyABKAVCDOI/CRIHYmF0Y2hJZFIHYmF0Y2hJZBI2Cg1wYXJ0aXRpb25faWR4GAQgASgFQhHiP
  w4SDHBhcnRpdGlvbklkeFIMcGFydGl0aW9uSWR4IukKCgdNZXNzYWdlEmUKCnByb3BlcnRpZXMYASADKAsyNC50b29scy50ZWFsL
  nB1bHNhci51aS5hcGkudjEuTWVzc2FnZS5Qcm9wZXJ0aWVzRW50cnlCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxIiCgRkY
  XRhGAIgASgMQgniPwYSBGRhdGFIAFIEZGF0YYgBARIiCgRzaXplGAMgASgDQgniPwYSBHNpemVIAVIEc2l6ZYgBARIlCgV2YWx1Z
  RgEIAEoCUIK4j8HEgV2YWx1ZUgCUgV2YWx1ZYgBARJOCgpldmVudF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzd
  GFtcEIO4j8LEglldmVudFRpbWVIA1IJZXZlbnRUaW1liAEBElQKDHB1Ymxpc2hfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Z
  i5UaW1lc3RhbXBCEOI/DRILcHVibGlzaFRpbWVIBFILcHVibGlzaFRpbWWIAQESZwoTYnJva2VyX3B1Ymxpc2hfdGltZRgWIAEoC
  zIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCFuI/ExIRYnJva2VyUHVibGlzaFRpbWVIBVIRYnJva2VyUHVibGlzaFRpbWWIA
  QESMgoKbWVzc2FnZV9pZBgeIAEoDEIO4j8LEgltZXNzYWdlSWRIBlIJbWVzc2FnZUlkiAEBEjUKC3NlcXVlbmNlX2lkGAggASgBQ
  g/iPwwSCnNlcXVlbmNlSWRIB1IKc2VxdWVuY2VJZIgBARI7Cg1wcm9kdWNlcl9uYW1lGAkgASgJQhHiPw4SDHByb2R1Y2VyTmFtZ
  UgIUgxwcm9kdWNlck5hbWWIAQESHwoDa2V5GAogASgJQgjiPwUSA2tleUgJUgNrZXmIAQESOAoMb3JkZXJpbmdfa2V5GAsgASgMQ
  hDiPw0SC29yZGVyaW5nS2V5SApSC29yZGVyaW5nS2V5iAEBEiUKBXRvcGljGAwgASgJQgriPwcSBXRvcGljSAtSBXRvcGljiAEBE
  kQKEHJlZGVsaXZlcnlfY291bnQYDSABKAVCFOI/ERIPcmVkZWxpdmVyeUNvdW50SAxSD3JlZGVsaXZlcnlDb3VudIgBARI+Cg5zY
  2hlbWFfdmVyc2lvbhgOIAEoDEIS4j8PEg1zY2hlbWFWZXJzaW9uSA1SDXNjaGVtYVZlcnNpb26IAQESOwoNaXNfcmVwbGljYXRlZ
  BgUIAEoCEIR4j8OEgxpc1JlcGxpY2F0ZWRIDlIMaXNSZXBsaWNhdGVkiAEBEkEKD3JlcGxpY2F0ZWRfZnJvbRgVIAEoCUIT4j8QE
  g5yZXBsaWNhdGVkRnJvbUgPUg5yZXBsaWNhdGVkRnJvbYgBARpTCg9Qcm9wZXJ0aWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA
  2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2YWx1ZToCOAFCBwoFX2RhdGFCBwoFX3NpemVCCAoGX3ZhbHVlQ
  g0KC19ldmVudF90aW1lQg8KDV9wdWJsaXNoX3RpbWVCFgoUX2Jyb2tlcl9wdWJsaXNoX3RpbWVCDQoLX21lc3NhZ2VfaWRCDgoMX
  3NlcXVlbmNlX2lkQhAKDl9wcm9kdWNlcl9uYW1lQgYKBF9rZXlCDwoNX29yZGVyaW5nX2tleUIICgZfdG9waWNCEwoRX3JlZGVsa
  XZlcnlfY291bnRCEQoPX3NjaGVtYV92ZXJzaW9uQhAKDl9pc19yZXBsaWNhdGVkQhIKEF9yZXBsaWNhdGVkX2Zyb20iPwoNVG9wa
  WNTZWxlY3RvchIiCgV0b3BpYxgBIAEoCUIK4j8HEgV0b3BpY0gAUgV0b3BpY0IKCghzZWxlY3RvciLSDAoVQ3JlYXRlQ29uc3VtZ
  XJSZXF1ZXN0EmUKDnRvcGljX3NlbGVjdG9yGGQgASgLMioudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlRvcGljU2VsZWN0b
  3JCEuI/DxINdG9waWNTZWxlY3RvclINdG9waWNTZWxlY3RvchI7Cg1jb25zdW1lcl9uYW1lGAEgASgJQhHiPw4SDGNvbnN1bWVyT
  mFtZUgAUgxjb25zdW1lck5hbWWIAQESRwoRc3Vic2NyaXB0aW9uX25hbWUYAiABKAlCFeI/EhIQc3Vic2NyaXB0aW9uTmFtZUgBU
  hBzdWJzY3JpcHRpb25OYW1liAEBEj4KDnByaW9yaXR5X2xldmVsGAMgASgFQhLiPw8SDXByaW9yaXR5TGV2ZWxIAlINcHJpb3Jpd
  HlMZXZlbIgBARI4CgxzdGFydF9wYXVzZWQYBCABKAhCEOI/DRILc3RhcnRQYXVzZWRIA1ILc3RhcnRQYXVzZWSIAQESdgoRc3Vic
  2NyaXB0aW9uX21vZGUYBSABKA4yLS50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuU3Vic2NyaXB0aW9uTW9kZUIV4j8SEhBzd
  WJzY3JpcHRpb25Nb2RlSARSEHN1YnNjcmlwdGlvbk1vZGWIAQESdgoRc3Vic2NyaXB0aW9uX3R5cGUYBiABKA4yLS50b29scy50Z
  WFsLnB1bHNhci51aS5hcGkudjEuU3Vic2NyaXB0aW9uVHlwZUIV4j8SEhBzdWJzY3JpcHRpb25UeXBlSAVSEHN1YnNjcmlwdGlvb
  lR5cGWIAQESowEKHXN1YnNjcmlwdGlvbl9pbml0aWFsX3Bvc2l0aW9uGAcgASgOMjgudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpL
  nYxLlN1YnNjcmlwdGlvbkluaXRpYWxQb3NpdGlvbkIg4j8dEhtzdWJzY3JpcHRpb25Jbml0aWFsUG9zaXRpb25IBlIbc3Vic2Nya
  XB0aW9uSW5pdGlhbFBvc2l0aW9uiAEBEjwKDmFja190aW1lb3V0X21zGAggASgDQhHiPw4SDGFja1RpbWVvdXRNc0gHUgxhY2tUa
  W1lb3V0TXOIAQESVgoYYWNrX3RpbWVvdXRfdGlja190aW1lX21zGAkgASgDQhniPxYSFGFja1RpbWVvdXRUaWNrVGltZU1zSAhSF
  GFja1RpbWVvdXRUaWNrVGltZU1ziAEBEo4BCixleHBpcmVfdGltZV9vZl9pbmNvbXBsZXRlX2NodW5rZWRfbWVzc2FnZV9tcxgKI
  AEoA0Ir4j8oEiZleHBpcmVUaW1lT2ZJbmNvbXBsZXRlQ2h1bmtlZE1lc3NhZ2VNc0gJUiZleHBpcmVUaW1lT2ZJbmNvbXBsZXRlQ
  2h1bmtlZE1lc3NhZ2VNc4gBARJkChxhY2tub3dsZWRnbWVudF9ncm91cF90aW1lX21zGAsgASgDQh7iPxsSGWFja25vd2xlZGdtZ
  W50R3JvdXBUaW1lTXNIClIZYWNrbm93bGVkZ21lbnRHcm91cFRpbWVNc4gBARJuCiBuZWdhdGl2ZV9hY2tfcmVkZWxpdmVyeV9kZ
  WxheV9tcxgMIAEoA0Ih4j8eEhxuZWdhdGl2ZUFja1JlZGVsaXZlcnlEZWxheU1zSAtSHG5lZ2F0aXZlQWNrUmVkZWxpdmVyeURlb
  GF5TXOIAQFCEAoOX2NvbnN1bWVyX25hbWVCFAoSX3N1YnNjcmlwdGlvbl9uYW1lQhEKD19wcmlvcml0eV9sZXZlbEIPCg1fc3Rhc
  nRfcGF1c2VkQhQKEl9zdWJzY3JpcHRpb25fbW9kZUIUChJfc3Vic2NyaXB0aW9uX3R5cGVCIAoeX3N1YnNjcmlwdGlvbl9pbml0a
  WFsX3Bvc2l0aW9uQhEKD19hY2tfdGltZW91dF9tc0IbChlfYWNrX3RpbWVvdXRfdGlja190aW1lX21zQi8KLV9leHBpcmVfdGltZ
  V9vZl9pbmNvbXBsZXRlX2NodW5rZWRfbWVzc2FnZV9tc0IfCh1fYWNrbm93bGVkZ21lbnRfZ3JvdXBfdGltZV9tc0IjCiFfbmVnY
  XRpdmVfYWNrX3JlZGVsaXZlcnlfZGVsYXlfbXMiUQoWQ3JlYXRlQ29uc3VtZXJSZXNwb25zZRI3CgZzdGF0dXMYASABKAsyEi5nb
  29nbGUucnBjLlN0YXR1c0IL4j8IEgZzdGF0dXNSBnN0YXR1cyJPChVEZWxldGVDb25zdW1lclJlcXVlc3QSNgoNY29uc3VtZXJfb
  mFtZRgBIAEoCUIR4j8OEgxjb25zdW1lck5hbWVSDGNvbnN1bWVyTmFtZSJRChZEZWxldGVDb25zdW1lclJlc3BvbnNlEjcKBnN0Y
  XR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgviPwgSBnN0YXR1c1IGc3RhdHVzIkcKDVJlc3VtZVJlcXVlc3QSNgoNY29uc
  3VtZXJfbmFtZRgBIAEoCUIR4j8OEgxjb25zdW1lck5hbWVSDGNvbnN1bWVyTmFtZSKqAQoOUmVzdW1lUmVzcG9uc2USPAoGc3Rhd
  HVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3RhdHVzSABSBnN0YXR1c4gBARJPCghtZXNzYWdlcxgCIAMoCzIkL
  nRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5NZXNzYWdlQg3iPwoSCG1lc3NhZ2VzUghtZXNzYWdlc0IJCgdfc3RhdHVzIkYKD
  FBhdXNlUmVxdWVzdBI2Cg1jb25zdW1lcl9uYW1lGAEgASgJQhHiPw4SDGNvbnN1bWVyTmFtZVIMY29uc3VtZXJOYW1lIkgKDVBhd
  XNlUmVzcG9uc2USNwoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3RhdHVzUgZzdGF0dXMiowEKGURlb
  GV0ZVN1YnNjcmlwdGlvblJlcXVlc3QSQgoRc3Vic2NyaXB0aW9uX25hbWUYASABKAlCFeI/EhIQc3Vic2NyaXB0aW9uTmFtZVIQc
  3Vic2NyaXB0aW9uTmFtZRIgCgV0b3BpYxgCIAEoCUIK4j8HEgV0b3BpY1IFdG9waWMSIAoFZm9yY2UYAyABKAhCCuI/BxIFZm9yY
  2VSBWZvcmNlIlUKGkRlbGV0ZVN1YnNjcmlwdGlvblJlc3BvbnNlEjcKBnN0YXR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQ
  gviPwgSBnN0YXR1c1IGc3RhdHVzIsoBCgtTZWVrUmVxdWVzdBI2Cg1jb25zdW1lcl9uYW1lGAEgASgJQhHiPw4SDGNvbnN1bWVyT
  mFtZVIMY29uc3VtZXJOYW1lEkoKCXRpbWVzdGFtcBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDuI/CxIJdGltZ
  XN0YW1wSABSCXRpbWVzdGFtcBIvCgptZXNzYWdlX2lkGAMgASgMQg7iPwsSCW1lc3NhZ2VJZEgAUgltZXNzYWdlSWRCBgoEc2Vla
  yJHCgxTZWVrUmVzcG9uc2USNwoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3RhdHVzUgZzdGF0dXMq3
  wEKEFN1YnNjcmlwdGlvbk1vZGUSRQodU1VCU0NSSVBUSU9OX01PREVfVU5TUEVDSUZJRUQQABoi4j8fEh1TVUJTQ1JJUFRJT05fT
  U9ERV9VTlNQRUNJRklFRBI9ChlTVUJTQ1JJUFRJT05fTU9ERV9EVVJBQkxFEAEaHuI/GxIZU1VCU0NSSVBUSU9OX01PREVfRFVSQ
  UJMRRJFCh1TVUJTQ1JJUFRJT05fTU9ERV9OT05fRFVSQUJMRRACGiLiPx8SHVNVQlNDUklQVElPTl9NT0RFX05PTl9EVVJBQkxFK
  t8CChBTdWJzY3JpcHRpb25UeXBlEkUKHVNVQlNDUklQVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAAaIuI/HxIdU1VCU0NSSVBUSU9OX
  1RZUEVfVU5TUEVDSUZJRUQSQQobU1VCU0NSSVBUSU9OX1RZUEVfRVhDTFVTSVZFEAEaIOI/HRIbU1VCU0NSSVBUSU9OX1RZUEVfR
  VhDTFVTSVZFEj8KGlNVQlNDUklQVElPTl9UWVBFX0ZBSUxPVkVSEAIaH+I/HBIaU1VCU0NSSVBUSU9OX1RZUEVfRkFJTE9WRVISO
  woYU1VCU0NSSVBUSU9OX1RZUEVfU0hBUkVEEAMaHeI/GhIYU1VCU0NSSVBUSU9OX1RZUEVfU0hBUkVEEkMKHFNVQlNDUklQVElPT
  l9UWVBFX0tFWV9TSEFSRUQQBBoh4j8eEhxTVUJTQ1JJUFRJT05fVFlQRV9LRVlfU0hBUkVEKqoCChtTdWJzY3JpcHRpb25Jbml0a
  WFsUG9zaXRpb24SXQopU1VCU0NSSVBUSU9OX0lOSVRJQUxfUE9TSVRJT05fVU5TUEVDSUZJRUQQABou4j8rEilTVUJTQ1JJUFRJT
  05fSU5JVElBTF9QT1NJVElPTl9VTlNQRUNJRklFRBJXCiZTVUJTQ1JJUFRJT05fSU5JVElBTF9QT1NJVElPTl9FQVJMSUVTVBABG
  iviPygSJlNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUSU9OX0VBUkxJRVNUElMKJFNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUS
  U9OX0xBVEVTVBACGiniPyYSJFNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUSU9OX0xBVEVTVDKxBQoPQ29uc3VtZXJTZXJ2aWNlE
  nkKDkNyZWF0ZUNvbnN1bWVyEjIudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkNyZWF0ZUNvbnN1bWVyUmVxdWVzdBozLnRvb
  2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5DcmVhdGVDb25zdW1lclJlc3BvbnNlEnkKDkRlbGV0ZUNvbnN1bWVyEjIudG9vbHMud
  GVhbC5wdWxzYXIudWkuYXBpLnYxLkRlbGV0ZUNvbnN1bWVyUmVxdWVzdBozLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5EZ
  WxldGVDb25zdW1lclJlc3BvbnNlEmMKBlJlc3VtZRIqLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5SZXN1bWVSZXF1ZXN0G
  isudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlJlc3VtZVJlc3BvbnNlMAESXgoFUGF1c2USKS50b29scy50ZWFsLnB1bHNhc
  i51aS5hcGkudjEuUGF1c2VSZXF1ZXN0GioudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlBhdXNlUmVzcG9uc2UShQEKEkRlb
  GV0ZVN1YnNjcmlwdGlvbhI2LnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5EZWxldGVTdWJzY3JpcHRpb25SZXF1ZXN0Gjcud
  G9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkRlbGV0ZVN1YnNjcmlwdGlvblJlc3BvbnNlElsKBFNlZWsSKC50b29scy50ZWFsL
  nB1bHNhci51aS5hcGkudjEuU2Vla1JlcXVlc3QaKS50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuU2Vla1Jlc3BvbnNlQsMBC
  h9jb20udG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxQg1Db25zdW1lclByb3RvUAGiAgVUVFBVQaoCG1Rvb2xzLlRlYWwuUHVsc
  2FyLlVpLkFwaS5WMcoCG1Rvb2xzXFRlYWxcUHVsc2FyXFVpXEFwaVxWMeICJ1Rvb2xzXFRlYWxcUHVsc2FyXFVpXEFwaVxWMVxHU
  EJNZXRhZGF0YeoCIFRvb2xzOjpUZWFsOjpQdWxzYXI6OlVpOjpBcGk6OlYxYgZwcm90bzM="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.rpc.status.StatusProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}