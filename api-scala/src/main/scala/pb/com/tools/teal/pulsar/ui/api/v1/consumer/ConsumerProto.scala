// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer

object ConsumerProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.timestamp.TimestampProto,
    com.google.rpc.status.StatusProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.tools.teal.pulsar.ui.api.v1.consumer.MessageId,
      com.tools.teal.pulsar.ui.api.v1.consumer.Message,
      com.tools.teal.pulsar.ui.api.v1.consumer.TopicSelector,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest,
      com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cip0b29scy90ZWFsL3B1bHNhci91aS9hcGkvdjEvY29uc3VtZXIucHJvdG8SG3Rvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52M
  RofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90bxoXZ29vZ2xlL3JwYy9zdGF0dXMucHJvdG8iwQEKCU1lc3NhZ2VJZBIqC
  glsZWRnZXJfaWQYASABKANCDeI/ChIIbGVkZ2VySWRSCGxlZGdlcklkEicKCGVudHJ5X2lkGAIgASgDQgziPwkSB2VudHJ5SWRSB
  2VudHJ5SWQSJwoIYmF0Y2hfaWQYAyABKAVCDOI/CRIHYmF0Y2hJZFIHYmF0Y2hJZBI2Cg1wYXJ0aXRpb25faWR4GAQgASgFQhHiP
  w4SDHBhcnRpdGlvbklkeFIMcGFydGl0aW9uSWR4IocICgdNZXNzYWdlEmUKCnByb3BlcnRpZXMYASADKAsyNC50b29scy50ZWFsL
  nB1bHNhci51aS5hcGkudjEuTWVzc2FnZS5Qcm9wZXJ0aWVzRW50cnlCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllcxIdCgRkY
  XRhGAIgASgMQgniPwYSBGRhdGFSBGRhdGESHQoEc2l6ZRgDIAEoA0IJ4j8GEgRzaXplUgRzaXplEiAKBXZhbHVlGAQgASgJQgriP
  wcSBXZhbHVlUgV2YWx1ZRJPCgxwdWJsaXNoX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQhDiPw0SC3B1Y
  mxpc2hUaW1lUgtwdWJsaXNoVGltZRJJCgpldmVudF90aW1lGAcgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIO4j8LE
  glldmVudFRpbWVSCWV2ZW50VGltZRJGChNicm9rZXJfcHVibGlzaF90aW1lGBYgASgBQhbiPxMSEWJyb2tlclB1Ymxpc2hUaW1lU
  hFicm9rZXJQdWJsaXNoVGltZRItCgptZXNzYWdlX2lkGB4gASgMQg7iPwsSCW1lc3NhZ2VJZFIJbWVzc2FnZUlkEjAKC3NlcXVlb
  mNlX2lkGAggASgBQg/iPwwSCnNlcXVlbmNlSWRSCnNlcXVlbmNlSWQSNgoNcHJvZHVjZXJfbmFtZRgJIAEoCUIR4j8OEgxwcm9kd
  WNlck5hbWVSDHByb2R1Y2VyTmFtZRIaCgNrZXkYCiABKAlCCOI/BRIDa2V5UgNrZXkSMwoMb3JkZXJpbmdfa2V5GAsgASgJQhDiP
  w0SC29yZGVyaW5nS2V5UgtvcmRlcmluZ0tleRIgCgV0b3BpYxgMIAEoCUIK4j8HEgV0b3BpY1IFdG9waWMSPwoQcmVkZWxpdmVye
  V9jb3VudBgNIAEoBUIU4j8REg9yZWRlbGl2ZXJ5Q291bnRSD3JlZGVsaXZlcnlDb3VudBI5Cg5zY2hlbWFfdmVyc2lvbhgOIAEoD
  EIS4j8PEg1zY2hlbWFWZXJzaW9uUg1zY2hlbWFWZXJzaW9uEjYKDWlzX3JlcGxpY2F0ZWQYFCABKAhCEeI/DhIMaXNSZXBsaWNhd
  GVkUgxpc1JlcGxpY2F0ZWQSPAoPcmVwbGljYXRlZF9mcm9tGBUgASgJQhPiPxASDnJlcGxpY2F0ZWRGcm9tUg5yZXBsaWNhdGVkR
  nJvbRpTCg9Qcm9wZXJ0aWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhb
  HVlUgV2YWx1ZToCOAEiPwoNVG9waWNTZWxlY3RvchIiCgV0b3BpYxgBIAEoCUIK4j8HEgV0b3BpY0gAUgV0b3BpY0IKCghzZWxlY
  3RvciLSDAoVQ3JlYXRlQ29uc3VtZXJSZXF1ZXN0EmUKDnRvcGljX3NlbGVjdG9yGGQgASgLMioudG9vbHMudGVhbC5wdWxzYXIud
  WkuYXBpLnYxLlRvcGljU2VsZWN0b3JCEuI/DxINdG9waWNTZWxlY3RvclINdG9waWNTZWxlY3RvchI7Cg1jb25zdW1lcl9uYW1lG
  AEgASgJQhHiPw4SDGNvbnN1bWVyTmFtZUgAUgxjb25zdW1lck5hbWWIAQESRwoRc3Vic2NyaXB0aW9uX25hbWUYAiABKAlCFeI/E
  hIQc3Vic2NyaXB0aW9uTmFtZUgBUhBzdWJzY3JpcHRpb25OYW1liAEBEj4KDnByaW9yaXR5X2xldmVsGAMgASgFQhLiPw8SDXBya
  W9yaXR5TGV2ZWxIAlINcHJpb3JpdHlMZXZlbIgBARI4CgxzdGFydF9wYXVzZWQYBCABKAhCEOI/DRILc3RhcnRQYXVzZWRIA1ILc
  3RhcnRQYXVzZWSIAQESdgoRc3Vic2NyaXB0aW9uX21vZGUYBSABKA4yLS50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuU3Vic
  2NyaXB0aW9uTW9kZUIV4j8SEhBzdWJzY3JpcHRpb25Nb2RlSARSEHN1YnNjcmlwdGlvbk1vZGWIAQESdgoRc3Vic2NyaXB0aW9uX
  3R5cGUYBiABKA4yLS50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuU3Vic2NyaXB0aW9uVHlwZUIV4j8SEhBzdWJzY3JpcHRpb
  25UeXBlSAVSEHN1YnNjcmlwdGlvblR5cGWIAQESowEKHXN1YnNjcmlwdGlvbl9pbml0aWFsX3Bvc2l0aW9uGAcgASgOMjgudG9vb
  HMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlN1YnNjcmlwdGlvbkluaXRpYWxQb3NpdGlvbkIg4j8dEhtzdWJzY3JpcHRpb25Jbml0a
  WFsUG9zaXRpb25IBlIbc3Vic2NyaXB0aW9uSW5pdGlhbFBvc2l0aW9uiAEBEjwKDmFja190aW1lb3V0X21zGAggASgDQhHiPw4SD
  GFja1RpbWVvdXRNc0gHUgxhY2tUaW1lb3V0TXOIAQESVgoYYWNrX3RpbWVvdXRfdGlja190aW1lX21zGAkgASgDQhniPxYSFGFja
  1RpbWVvdXRUaWNrVGltZU1zSAhSFGFja1RpbWVvdXRUaWNrVGltZU1ziAEBEo4BCixleHBpcmVfdGltZV9vZl9pbmNvbXBsZXRlX
  2NodW5rZWRfbWVzc2FnZV9tcxgKIAEoA0Ir4j8oEiZleHBpcmVUaW1lT2ZJbmNvbXBsZXRlQ2h1bmtlZE1lc3NhZ2VNc0gJUiZle
  HBpcmVUaW1lT2ZJbmNvbXBsZXRlQ2h1bmtlZE1lc3NhZ2VNc4gBARJkChxhY2tub3dsZWRnbWVudF9ncm91cF90aW1lX21zGAsgA
  SgDQh7iPxsSGWFja25vd2xlZGdtZW50R3JvdXBUaW1lTXNIClIZYWNrbm93bGVkZ21lbnRHcm91cFRpbWVNc4gBARJuCiBuZWdhd
  Gl2ZV9hY2tfcmVkZWxpdmVyeV9kZWxheV9tcxgMIAEoA0Ih4j8eEhxuZWdhdGl2ZUFja1JlZGVsaXZlcnlEZWxheU1zSAtSHG5lZ
  2F0aXZlQWNrUmVkZWxpdmVyeURlbGF5TXOIAQFCEAoOX2NvbnN1bWVyX25hbWVCFAoSX3N1YnNjcmlwdGlvbl9uYW1lQhEKD19wc
  mlvcml0eV9sZXZlbEIPCg1fc3RhcnRfcGF1c2VkQhQKEl9zdWJzY3JpcHRpb25fbW9kZUIUChJfc3Vic2NyaXB0aW9uX3R5cGVCI
  AoeX3N1YnNjcmlwdGlvbl9pbml0aWFsX3Bvc2l0aW9uQhEKD19hY2tfdGltZW91dF9tc0IbChlfYWNrX3RpbWVvdXRfdGlja190a
  W1lX21zQi8KLV9leHBpcmVfdGltZV9vZl9pbmNvbXBsZXRlX2NodW5rZWRfbWVzc2FnZV9tc0IfCh1fYWNrbm93bGVkZ21lbnRfZ
  3JvdXBfdGltZV9tc0IjCiFfbmVnYXRpdmVfYWNrX3JlZGVsaXZlcnlfZGVsYXlfbXMiUQoWQ3JlYXRlQ29uc3VtZXJSZXNwb25zZ
  RI3CgZzdGF0dXMYASABKAsyEi5nb29nbGUucnBjLlN0YXR1c0IL4j8IEgZzdGF0dXNSBnN0YXR1cyJPChVEZWxldGVDb25zdW1lc
  lJlcXVlc3QSNgoNY29uc3VtZXJfbmFtZRgBIAEoCUIR4j8OEgxjb25zdW1lck5hbWVSDGNvbnN1bWVyTmFtZSJRChZEZWxldGVDb
  25zdW1lclJlc3BvbnNlEjcKBnN0YXR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgviPwgSBnN0YXR1c1IGc3RhdHVzIkcKD
  VJlc3VtZVJlcXVlc3QSNgoNY29uc3VtZXJfbmFtZRgBIAEoCUIR4j8OEgxjb25zdW1lck5hbWVSDGNvbnN1bWVyTmFtZSKqAQoOU
  mVzdW1lUmVzcG9uc2USPAoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc3RhdHVzSABSBnN0YXR1c4gBA
  RJPCghtZXNzYWdlcxgCIAMoCzIkLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5NZXNzYWdlQg3iPwoSCG1lc3NhZ2VzUghtZ
  XNzYWdlc0IJCgdfc3RhdHVzIkYKDFBhdXNlUmVxdWVzdBI2Cg1jb25zdW1lcl9uYW1lGAEgASgJQhHiPw4SDGNvbnN1bWVyTmFtZ
  VIMY29uc3VtZXJOYW1lIkgKDVBhdXNlUmVzcG9uc2USNwoGc3RhdHVzGAEgASgLMhIuZ29vZ2xlLnJwYy5TdGF0dXNCC+I/CBIGc
  3RhdHVzUgZzdGF0dXMq3wEKEFN1YnNjcmlwdGlvbk1vZGUSRQodU1VCU0NSSVBUSU9OX01PREVfVU5TUEVDSUZJRUQQABoi4j8fE
  h1TVUJTQ1JJUFRJT05fTU9ERV9VTlNQRUNJRklFRBI9ChlTVUJTQ1JJUFRJT05fTU9ERV9EVVJBQkxFEAEaHuI/GxIZU1VCU0NSS
  VBUSU9OX01PREVfRFVSQUJMRRJFCh1TVUJTQ1JJUFRJT05fTU9ERV9OT05fRFVSQUJMRRACGiLiPx8SHVNVQlNDUklQVElPTl9NT
  0RFX05PTl9EVVJBQkxFKt8CChBTdWJzY3JpcHRpb25UeXBlEkUKHVNVQlNDUklQVElPTl9UWVBFX1VOU1BFQ0lGSUVEEAAaIuI/H
  xIdU1VCU0NSSVBUSU9OX1RZUEVfVU5TUEVDSUZJRUQSQQobU1VCU0NSSVBUSU9OX1RZUEVfRVhDTFVTSVZFEAEaIOI/HRIbU1VCU
  0NSSVBUSU9OX1RZUEVfRVhDTFVTSVZFEj8KGlNVQlNDUklQVElPTl9UWVBFX0ZBSUxPVkVSEAIaH+I/HBIaU1VCU0NSSVBUSU9OX
  1RZUEVfRkFJTE9WRVISOwoYU1VCU0NSSVBUSU9OX1RZUEVfU0hBUkVEEAMaHeI/GhIYU1VCU0NSSVBUSU9OX1RZUEVfU0hBUkVEE
  kMKHFNVQlNDUklQVElPTl9UWVBFX0tFWV9TSEFSRUQQBBoh4j8eEhxTVUJTQ1JJUFRJT05fVFlQRV9LRVlfU0hBUkVEKqoCChtTd
  WJzY3JpcHRpb25Jbml0aWFsUG9zaXRpb24SXQopU1VCU0NSSVBUSU9OX0lOSVRJQUxfUE9TSVRJT05fVU5TUEVDSUZJRUQQABou4
  j8rEilTVUJTQ1JJUFRJT05fSU5JVElBTF9QT1NJVElPTl9VTlNQRUNJRklFRBJXCiZTVUJTQ1JJUFRJT05fSU5JVElBTF9QT1NJV
  ElPTl9FQVJMSUVTVBABGiviPygSJlNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUSU9OX0VBUkxJRVNUElMKJFNVQlNDUklQVElPT
  l9JTklUSUFMX1BPU0lUSU9OX0xBVEVTVBACGiniPyYSJFNVQlNDUklQVElPTl9JTklUSUFMX1BPU0lUSU9OX0xBVEVTVDLMAwoPQ
  29uc3VtZXJTZXJ2aWNlEnkKDkNyZWF0ZUNvbnN1bWVyEjIudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkNyZWF0ZUNvbnN1b
  WVyUmVxdWVzdBozLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5DcmVhdGVDb25zdW1lclJlc3BvbnNlEnkKDkRlbGV0ZUNvb
  nN1bWVyEjIudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkRlbGV0ZUNvbnN1bWVyUmVxdWVzdBozLnRvb2xzLnRlYWwucHVsc
  2FyLnVpLmFwaS52MS5EZWxldGVDb25zdW1lclJlc3BvbnNlEmMKBlJlc3VtZRIqLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52M
  S5SZXN1bWVSZXF1ZXN0GisudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlJlc3VtZVJlc3BvbnNlMAESXgoFUGF1c2USKS50b
  29scy50ZWFsLnB1bHNhci51aS5hcGkudjEuUGF1c2VSZXF1ZXN0GioudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlBhdXNlU
  mVzcG9uc2VCwwEKH2NvbS50b29scy50ZWFsLnB1bHNhci51aS5hcGkudjFCDUNvbnN1bWVyUHJvdG9QAaICBVRUUFVBqgIbVG9vb
  HMuVGVhbC5QdWxzYXIuVWkuQXBpLlYxygIbVG9vbHNcVGVhbFxQdWxzYXJcVWlcQXBpXFYx4gInVG9vbHNcVGVhbFxQdWxzYXJcV
  WlcQXBpXFYxXEdQQk1ldGFkYXRh6gIgVG9vbHM6OlRlYWw6OlB1bHNhcjo6VWk6OkFwaTo6VjFiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.rpc.status.StatusProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}