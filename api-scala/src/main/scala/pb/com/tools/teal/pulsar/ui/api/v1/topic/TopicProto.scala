// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.topic

object TopicProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.rpc.status.StatusProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.tools.teal.pulsar.ui.api.v1.topic.PartitionedTopicMetadata,
      com.tools.teal.pulsar.ui.api.v1.topic.PartitionedTopicInternalStats,
      com.tools.teal.pulsar.ui.api.v1.topic.PersistentTopicInternalStats,
      com.tools.teal.pulsar.ui.api.v1.topic.ManagedLedgerInternalStats,
      com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo,
      com.tools.teal.pulsar.ui.api.v1.topic.CursorStats,
      com.tools.teal.pulsar.ui.api.v1.topic.TopicInternalStats,
      com.tools.teal.pulsar.ui.api.v1.topic.GetTopicsInternalStatsRequest,
      com.tools.teal.pulsar.ui.api.v1.topic.GetTopicsInternalStatsResponse
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Cid0b29scy90ZWFsL3B1bHNhci91aS9hcGkvdjEvdG9waWMucHJvdG8SG3Rvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MRoXZ
  29vZ2xlL3JwYy9zdGF0dXMucHJvdG8irAIKGFBhcnRpdGlvbmVkVG9waWNNZXRhZGF0YRI0CgpwYXJ0aXRpb25zGAEgASgFQg/iP
  wwSCnBhcnRpdGlvbnNIAFIKcGFydGl0aW9uc4gBARJ2Cgpwcm9wZXJ0aWVzGAIgAygLMkUudG9vbHMudGVhbC5wdWxzYXIudWkuY
  XBpLnYxLlBhcnRpdGlvbmVkVG9waWNNZXRhZGF0YS5Qcm9wZXJ0aWVzRW50cnlCD+I/DBIKcHJvcGVydGllc1IKcHJvcGVydGllc
  xpTCg9Qcm9wZXJ0aWVzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5EiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlU
  gV2YWx1ZToCOAFCDQoLX3BhcnRpdGlvbnMioQMKHVBhcnRpdGlvbmVkVG9waWNJbnRlcm5hbFN0YXRzEmUKCG1ldGFkYXRhGAEgA
  SgLMjUudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlBhcnRpdGlvbmVkVG9waWNNZXRhZGF0YUIN4j8KEghtZXRhZGF0YUgAU
  ghtZXRhZGF0YYgBARJ7CgpwYXJ0aXRpb25zGAIgAygLMkoudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlBhcnRpdGlvbmVkV
  G9waWNJbnRlcm5hbFN0YXRzLlBhcnRpdGlvbnNFbnRyeUIP4j8MEgpwYXJ0aXRpb25zUgpwYXJ0aXRpb25zGo4BCg9QYXJ0aXRpb
  25zRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5ElsKBXZhbHVlGAIgASgLMjkudG9vbHMudGVhbC5wdWxzYXIudWkuY
  XBpLnYxLlBlcnNpc3RlbnRUb3BpY0ludGVybmFsU3RhdHNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4AUILCglfbWV0YWRhdGEipAMKH
  FBlcnNpc3RlbnRUb3BpY0ludGVybmFsU3RhdHMSmwEKHW1hbmFnZWRfbGVkZ2VyX2ludGVybmFsX3N0YXRzGAEgASgLMjcudG9vb
  HMudGVhbC5wdWxzYXIudWkuYXBpLnYxLk1hbmFnZWRMZWRnZXJJbnRlcm5hbFN0YXRzQh/iPxwSGm1hbmFnZWRMZWRnZXJJbnRlc
  m5hbFN0YXRzUhptYW5hZ2VkTGVkZ2VySW50ZXJuYWxTdGF0cxJiCg5zY2hlbWFfbGVkZ2VycxgCIAMoCzInLnRvb2xzLnRlYWwuc
  HVsc2FyLnVpLmFwaS52MS5MZWRnZXJJbmZvQhLiPw8SDXNjaGVtYUxlZGdlcnNSDXNjaGVtYUxlZGdlcnMSbQoQY29tcGFjdGVkX
  2xlZGdlchgDIAEoCzInLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5MZWRnZXJJbmZvQhTiPxESD2NvbXBhY3RlZExlZGdlc
  kgAUg9jb21wYWN0ZWRMZWRnZXKIAQFCEwoRX2NvbXBhY3RlZF9sZWRnZXIi5wsKGk1hbmFnZWRMZWRnZXJJbnRlcm5hbFN0YXRzE
  lEKFWVudHJpZXNfYWRkZWRfY291bnRlchgBIAEoA0IY4j8VEhNlbnRyaWVzQWRkZWRDb3VudGVySABSE2VudHJpZXNBZGRlZENvd
  W50ZXKIAQESRQoRbnVtYmVyX29mX2VudHJpZXMYAiABKANCFOI/ERIPbnVtYmVyT2ZFbnRyaWVzSAFSD251bWJlck9mRW50cmllc
  4gBARIyCgp0b3RhbF9zaXplGAMgASgDQg7iPwsSCXRvdGFsU2l6ZUgCUgl0b3RhbFNpemWIAQESVAoWY3VycmVudF9sZWRnZXJfZ
  W50cmllcxgEIAEoA0IZ4j8WEhRjdXJyZW50TGVkZ2VyRW50cmllc0gDUhRjdXJyZW50TGVkZ2VyRW50cmllc4gBARJLChNjdXJyZ
  W50X2xlZGdlcl9zaXplGAUgASgDQhbiPxMSEWN1cnJlbnRMZWRnZXJTaXplSARSEWN1cnJlbnRMZWRnZXJTaXpliAEBEmcKHWxhc
  3RfbGVkZ2VyX2NyZWF0ZWRfdGltZXN0YW1wGAYgASgJQh/iPxwSGmxhc3RMZWRnZXJDcmVhdGVkVGltZXN0YW1wSAVSGmxhc3RMZ
  WRnZXJDcmVhdGVkVGltZXN0YW1wiAEBEoABCiZsYXN0X2xlZGdlcl9jcmVhdGlvbl9mYWlsdXJlX3RpbWVzdGFtcBgHIAEoCUIn4
  j8kEiJsYXN0TGVkZ2VyQ3JlYXRpb25GYWlsdXJlVGltZXN0YW1wSAZSImxhc3RMZWRnZXJDcmVhdGlvbkZhaWx1cmVUaW1lc3Rhb
  XCIAQESUQoVd2FpdGluZ19jdXJzb3JzX2NvdW50GAggASgFQhjiPxUSE3dhaXRpbmdDdXJzb3JzQ291bnRIB1ITd2FpdGluZ0N1c
  nNvcnNDb3VudIgBARJRChVwZW5kaW5nX2VudHJpZXNfY291bnQYCSABKAVCGOI/FRITcGVuZGluZ0VudHJpZXNDb3VudEgIUhNwZ
  W5kaW5nRW50cmllc0NvdW50iAEBEk4KFGxhc3RfY29uZmlybWVkX2VudHJ5GAogASgJQhfiPxQSEmxhc3RDb25maXJtZWRFbnRye
  UgJUhJsYXN0Q29uZmlybWVkRW50cnmIAQESJQoFc3RhdGUYCyABKAlCCuI/BxIFc3RhdGVIClIFc3RhdGWIAQESTwoHbGVkZ2Vyc
  xgMIAMoCzInLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5MZWRnZXJJbmZvQgziPwkSB2xlZGdlcnNSB2xlZGdlcnMSbAoHY
  3Vyc29ycxgNIAMoCzJELnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5NYW5hZ2VkTGVkZ2VySW50ZXJuYWxTdGF0cy5DdXJzb
  3JzRW50cnlCDOI/CRIHY3Vyc29yc1IHY3Vyc29ycxp6CgxDdXJzb3JzRW50cnkSGgoDa2V5GAEgASgJQgjiPwUSA2tleVIDa2V5E
  koKBXZhbHVlGAIgASgLMigudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkN1cnNvclN0YXRzQgriPwcSBXZhbHVlUgV2YWx1Z
  ToCOAFCGAoWX2VudHJpZXNfYWRkZWRfY291bnRlckIUChJfbnVtYmVyX29mX2VudHJpZXNCDQoLX3RvdGFsX3NpemVCGQoXX2N1c
  nJlbnRfbGVkZ2VyX2VudHJpZXNCFgoUX2N1cnJlbnRfbGVkZ2VyX3NpemVCIAoeX2xhc3RfbGVkZ2VyX2NyZWF0ZWRfdGltZXN0Y
  W1wQikKJ19sYXN0X2xlZGdlcl9jcmVhdGlvbl9mYWlsdXJlX3RpbWVzdGFtcEIYChZfd2FpdGluZ19jdXJzb3JzX2NvdW50QhgKF
  l9wZW5kaW5nX2VudHJpZXNfY291bnRCFwoVX2xhc3RfY29uZmlybWVkX2VudHJ5QggKBl9zdGF0ZSKKAwoKTGVkZ2VySW5mbxIvC
  glsZWRnZXJfaWQYASABKANCDeI/ChIIbGVkZ2VySWRIAFIIbGVkZ2VySWSIAQESKwoHZW50cmllcxgCIAEoA0IM4j8JEgdlbnRya
  WVzSAFSB2VudHJpZXOIAQESIgoEc2l6ZRgDIAEoA0IJ4j8GEgRzaXplSAJSBHNpemWIAQESMQoJb2ZmbG9hZGVkGAQgASgIQg7iP
  wsSCW9mZmxvYWRlZEgDUglvZmZsb2FkZWSIAQESLgoIbWV0YWRhdGEYBSABKAlCDeI/ChIIbWV0YWRhdGFIBFIIbWV0YWRhdGGIA
  QESRAoQdW5kZXJfcmVwbGljYXRlZBgGIAEoCEIU4j8REg91bmRlclJlcGxpY2F0ZWRIBVIPdW5kZXJSZXBsaWNhdGVkiAEBQgwKC
  l9sZWRnZXJfaWRCCgoIX2VudHJpZXNCBwoFX3NpemVCDAoKX29mZmxvYWRlZEILCglfbWV0YWRhdGFCEwoRX3VuZGVyX3JlcGxpY
  2F0ZWQi/w4KC0N1cnNvclN0YXRzEk4KFG1hcmtfZGVsZXRlX3Bvc2l0aW9uGAEgASgJQhfiPxQSEm1hcmtEZWxldGVQb3NpdGlvb
  kgAUhJtYXJrRGVsZXRlUG9zaXRpb26IAQESOwoNcmVhZF9wb3NpdGlvbhgCIAEoCUIR4j8OEgxyZWFkUG9zaXRpb25IAVIMcmVhZ
  FBvc2l0aW9uiAEBEj8KD3dhaXRpbmdfcmVhZF9vcBgDIAEoCEIS4j8PEg13YWl0aW5nUmVhZE9wSAJSDXdhaXRpbmdSZWFkT3CIA
  QESQgoQcGVuZGluZ19yZWFkX29wcxgEIAEoBUIT4j8QEg5wZW5kaW5nUmVhZE9wc0gDUg5wZW5kaW5nUmVhZE9wc4gBARJdChltZ
  XNzYWdlc19jb25zdW1lZF9jb3VudGVyGAUgASgDQhziPxkSF21lc3NhZ2VzQ29uc3VtZWRDb3VudGVySARSF21lc3NhZ2VzQ29uc
  3VtZWRDb3VudGVyiAEBEjsKDWN1cnNvcl9sZWRnZXIYBiABKANCEeI/DhIMY3Vyc29yTGVkZ2VySAVSDGN1cnNvckxlZGdlcogBA
  RJYChhjdXJzb3JfbGVkZ2VyX2xhc3RfZW50cnkYByABKANCGuI/FxIVY3Vyc29yTGVkZ2VyTGFzdEVudHJ5SAZSFWN1cnNvckxlZ
  Gdlckxhc3RFbnRyeYgBARJpCh1pbmRpdmlkdWFsbHlfZGVsZXRlZF9tZXNzYWdlcxgIIAEoCUIg4j8dEhtpbmRpdmlkdWFsbHlEZ
  WxldGVkTWVzc2FnZXNIB1IbaW5kaXZpZHVhbGx5RGVsZXRlZE1lc3NhZ2VziAEBEmQKHGxhc3RfbGVkZ2VyX3N3aXRjaF90aW1lc
  3RhbXAYCSABKAlCHuI/GxIZbGFzdExlZGdlclN3aXRjaFRpbWVzdGFtcEgIUhlsYXN0TGVkZ2VyU3dpdGNoVGltZXN0YW1wiAEBE
  iUKBXN0YXRlGAogASgJQgriPwcSBXN0YXRlSAlSBXN0YXRliAEBEpUBCi9udW1iZXJfb2ZfZW50cmllc19zaW5jZV9maXJzdF9ub
  3RfYWNrZWRfbWVzc2FnZRgLIAEoA0It4j8qEihudW1iZXJPZkVudHJpZXNTaW5jZUZpcnN0Tm90QWNrZWRNZXNzYWdlSApSKG51b
  WJlck9mRW50cmllc1NpbmNlRmlyc3ROb3RBY2tlZE1lc3NhZ2WIAQESjQEKK3RvdGFsX25vbl9jb250aWd1b3VzX2RlbGV0ZWRfb
  WVzc2FnZXNfcmFuZ2UYDCABKAVCK+I/KBImdG90YWxOb25Db250aWd1b3VzRGVsZXRlZE1lc3NhZ2VzUmFuZ2VIC1ImdG90YWxOb
  25Db250aWd1b3VzRGVsZXRlZE1lc3NhZ2VzUmFuZ2WIAQESagoec3Vic2NyaXB0aW9uX2hhdmVfcGVuZGluZ19yZWFkGA0gASgIQ
  iDiPx0SG3N1YnNjcmlwdGlvbkhhdmVQZW5kaW5nUmVhZEgMUhtzdWJzY3JpcHRpb25IYXZlUGVuZGluZ1JlYWSIAQESfQolc3Vic
  2NyaXB0aW9uX2hhdmVfcGVuZGluZ19yZXBsYXlfcmVhZBgOIAEoCEIm4j8jEiFzdWJzY3JpcHRpb25IYXZlUGVuZGluZ1JlcGxhe
  VJlYWRIDVIhc3Vic2NyaXB0aW9uSGF2ZVBlbmRpbmdSZXBsYXlSZWFkiAEBEmkKCnByb3BlcnRpZXMYDyADKAsyOC50b29scy50Z
  WFsLnB1bHNhci51aS5hcGkudjEuQ3Vyc29yU3RhdHMuUHJvcGVydGllc0VudHJ5Qg/iPwwSCnByb3BlcnRpZXNSCnByb3BlcnRpZ
  XMaUwoPUHJvcGVydGllc0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRIgCgV2YWx1ZRgCIAEoA0IK4j8HEgV2YWx1Z
  VIFdmFsdWU6AjgBQhcKFV9tYXJrX2RlbGV0ZV9wb3NpdGlvbkIQCg5fcmVhZF9wb3NpdGlvbkISChBfd2FpdGluZ19yZWFkX29wQ
  hMKEV9wZW5kaW5nX3JlYWRfb3BzQhwKGl9tZXNzYWdlc19jb25zdW1lZF9jb3VudGVyQhAKDl9jdXJzb3JfbGVkZ2VyQhsKGV9jd
  XJzb3JfbGVkZ2VyX2xhc3RfZW50cnlCIAoeX2luZGl2aWR1YWxseV9kZWxldGVkX21lc3NhZ2VzQh8KHV9sYXN0X2xlZGdlcl9zd
  2l0Y2hfdGltZXN0YW1wQggKBl9zdGF0ZUIyCjBfbnVtYmVyX29mX2VudHJpZXNfc2luY2VfZmlyc3Rfbm90X2Fja2VkX21lc3NhZ
  2VCLgosX3RvdGFsX25vbl9jb250aWd1b3VzX2RlbGV0ZWRfbWVzc2FnZXNfcmFuZ2VCIQofX3N1YnNjcmlwdGlvbl9oYXZlX3Blb
  mRpbmdfcmVhZEIoCiZfc3Vic2NyaXB0aW9uX2hhdmVfcGVuZGluZ19yZXBsYXlfcmVhZCKfAgoSVG9waWNJbnRlcm5hbFN0YXRzE
  m0KC3RvcGljX3N0YXRzGAIgASgLMjkudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLlBlcnNpc3RlbnRUb3BpY0ludGVybmFsU
  3RhdHNCD+I/DBIKdG9waWNTdGF0c0gAUgp0b3BpY1N0YXRzEpABChdwYXJ0aXRpb25lZF90b3BpY19zdGF0cxgDIAEoCzI6LnRvb
  2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MS5QYXJ0aXRpb25lZFRvcGljSW50ZXJuYWxTdGF0c0Ia4j8XEhVwYXJ0aXRpb25lZFRvc
  GljU3RhdHNIAFIVcGFydGl0aW9uZWRUb3BpY1N0YXRzQgcKBXN0YXRzIkQKHUdldFRvcGljc0ludGVybmFsU3RhdHNSZXF1ZXN0E
  iMKBnRvcGljcxgBIAMoCUIL4j8IEgZ0b3BpY3NSBnRvcGljcyLEAgoeR2V0VG9waWNzSW50ZXJuYWxTdGF0c1Jlc3BvbnNlEjcKB
  nN0YXR1cxgBIAEoCzISLmdvb2dsZS5ycGMuU3RhdHVzQgviPwgSBnN0YXR1c1IGc3RhdHVzEmgKBXN0YXRzGAIgAygLMkYudG9vb
  HMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkdldFRvcGljc0ludGVybmFsU3RhdHNSZXNwb25zZS5TdGF0c0VudHJ5QgriPwcSBXN0Y
  XRzUgVzdGF0cxp/CgpTdGF0c0VudHJ5EhoKA2tleRgBIAEoCUII4j8FEgNrZXlSA2tleRJRCgV2YWx1ZRgCIAEoCzIvLnRvb2xzL
  nRlYWwucHVsc2FyLnVpLmFwaS52MS5Ub3BpY0ludGVybmFsU3RhdHNCCuI/BxIFdmFsdWVSBXZhbHVlOgI4ATKiAQoMVG9waWNTZ
  XJ2aWNlEpEBChZHZXRUb3BpY3NJbnRlcm5hbFN0YXRzEjoudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkdldFRvcGljc0lud
  GVybmFsU3RhdHNSZXF1ZXN0GjsudG9vbHMudGVhbC5wdWxzYXIudWkuYXBpLnYxLkdldFRvcGljc0ludGVybmFsU3RhdHNSZXNwb
  25zZULAAQofY29tLnRvb2xzLnRlYWwucHVsc2FyLnVpLmFwaS52MUIKVG9waWNQcm90b1ABogIFVFRQVUGqAhtUb29scy5UZWFsL
  lB1bHNhci5VaS5BcGkuVjHKAhtUb29sc1xUZWFsXFB1bHNhclxVaVxBcGlcVjHiAidUb29sc1xUZWFsXFB1bHNhclxVaVxBcGlcV
  jFcR1BCTWV0YWRhdGHqAiBUb29sczo6VGVhbDo6UHVsc2FyOjpVaTo6QXBpOjpWMWIGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
      com.google.rpc.status.StatusProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}