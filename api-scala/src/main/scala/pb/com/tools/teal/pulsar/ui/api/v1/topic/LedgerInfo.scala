// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.topic

@SerialVersionUID(0L)
final case class LedgerInfo(
    ledgerId: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    entries: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    size: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
    offloaded: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    metadata: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    underReplicated: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LedgerInfo] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (ledgerId.isDefined) {
        val __value = ledgerId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
      };
      if (entries.isDefined) {
        val __value = entries.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
      };
      if (size.isDefined) {
        val __value = size.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
      };
      if (offloaded.isDefined) {
        val __value = offloaded.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
      };
      if (metadata.isDefined) {
        val __value = metadata.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      };
      if (underReplicated.isDefined) {
        val __value = underReplicated.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ledgerId.foreach { __v =>
        val __m = __v
        _output__.writeInt64(1, __m)
      };
      entries.foreach { __v =>
        val __m = __v
        _output__.writeInt64(2, __m)
      };
      size.foreach { __v =>
        val __m = __v
        _output__.writeInt64(3, __m)
      };
      offloaded.foreach { __v =>
        val __m = __v
        _output__.writeBool(4, __m)
      };
      metadata.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      underReplicated.foreach { __v =>
        val __m = __v
        _output__.writeBool(6, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getLedgerId: _root_.scala.Long = ledgerId.getOrElse(0L)
    def clearLedgerId: LedgerInfo = copy(ledgerId = _root_.scala.None)
    def withLedgerId(__v: _root_.scala.Long): LedgerInfo = copy(ledgerId = Option(__v))
    def getEntries: _root_.scala.Long = entries.getOrElse(0L)
    def clearEntries: LedgerInfo = copy(entries = _root_.scala.None)
    def withEntries(__v: _root_.scala.Long): LedgerInfo = copy(entries = Option(__v))
    def getSize: _root_.scala.Long = size.getOrElse(0L)
    def clearSize: LedgerInfo = copy(size = _root_.scala.None)
    def withSize(__v: _root_.scala.Long): LedgerInfo = copy(size = Option(__v))
    def getOffloaded: _root_.scala.Boolean = offloaded.getOrElse(false)
    def clearOffloaded: LedgerInfo = copy(offloaded = _root_.scala.None)
    def withOffloaded(__v: _root_.scala.Boolean): LedgerInfo = copy(offloaded = Option(__v))
    def getMetadata: _root_.scala.Predef.String = metadata.getOrElse("")
    def clearMetadata: LedgerInfo = copy(metadata = _root_.scala.None)
    def withMetadata(__v: _root_.scala.Predef.String): LedgerInfo = copy(metadata = Option(__v))
    def getUnderReplicated: _root_.scala.Boolean = underReplicated.getOrElse(false)
    def clearUnderReplicated: LedgerInfo = copy(underReplicated = _root_.scala.None)
    def withUnderReplicated(__v: _root_.scala.Boolean): LedgerInfo = copy(underReplicated = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ledgerId.orNull
        case 2 => entries.orNull
        case 3 => size.orNull
        case 4 => offloaded.orNull
        case 5 => metadata.orNull
        case 6 => underReplicated.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ledgerId.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => entries.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => size.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => offloaded.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => metadata.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => underReplicated.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo.type = com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo
    // @@protoc_insertion_point(GeneratedMessage[tools.teal.pulsar.ui.api.v1.LedgerInfo])
}

object LedgerInfo extends scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo = {
    var __ledgerId: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __entries: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __size: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    var __offloaded: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    var __metadata: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __underReplicated: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __ledgerId = Option(_input__.readInt64())
        case 16 =>
          __entries = Option(_input__.readInt64())
        case 24 =>
          __size = Option(_input__.readInt64())
        case 32 =>
          __offloaded = Option(_input__.readBool())
        case 42 =>
          __metadata = Option(_input__.readStringRequireUtf8())
        case 48 =>
          __underReplicated = Option(_input__.readBool())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo(
        ledgerId = __ledgerId,
        entries = __entries,
        size = __size,
        offloaded = __offloaded,
        metadata = __metadata,
        underReplicated = __underReplicated,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo(
        ledgerId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        entries = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        size = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
        offloaded = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
        metadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        underReplicated = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TopicProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TopicProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo(
    ledgerId = _root_.scala.None,
    entries = _root_.scala.None,
    size = _root_.scala.None,
    offloaded = _root_.scala.None,
    metadata = _root_.scala.None,
    underReplicated = _root_.scala.None
  )
  implicit class LedgerInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo](_l) {
    def ledgerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getLedgerId)((c_, f_) => c_.copy(ledgerId = Option(f_)))
    def optionalLedgerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.ledgerId)((c_, f_) => c_.copy(ledgerId = f_))
    def entries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getEntries)((c_, f_) => c_.copy(entries = Option(f_)))
    def optionalEntries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.entries)((c_, f_) => c_.copy(entries = f_))
    def size: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getSize)((c_, f_) => c_.copy(size = Option(f_)))
    def optionalSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.size)((c_, f_) => c_.copy(size = f_))
    def offloaded: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getOffloaded)((c_, f_) => c_.copy(offloaded = Option(f_)))
    def optionalOffloaded: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.offloaded)((c_, f_) => c_.copy(offloaded = f_))
    def metadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getMetadata)((c_, f_) => c_.copy(metadata = Option(f_)))
    def optionalMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.metadata)((c_, f_) => c_.copy(metadata = f_))
    def underReplicated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getUnderReplicated)((c_, f_) => c_.copy(underReplicated = Option(f_)))
    def optionalUnderReplicated: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.underReplicated)((c_, f_) => c_.copy(underReplicated = f_))
  }
  final val LEDGER_ID_FIELD_NUMBER = 1
  final val ENTRIES_FIELD_NUMBER = 2
  final val SIZE_FIELD_NUMBER = 3
  final val OFFLOADED_FIELD_NUMBER = 4
  final val METADATA_FIELD_NUMBER = 5
  final val UNDER_REPLICATED_FIELD_NUMBER = 6
  def of(
    ledgerId: _root_.scala.Option[_root_.scala.Long],
    entries: _root_.scala.Option[_root_.scala.Long],
    size: _root_.scala.Option[_root_.scala.Long],
    offloaded: _root_.scala.Option[_root_.scala.Boolean],
    metadata: _root_.scala.Option[_root_.scala.Predef.String],
    underReplicated: _root_.scala.Option[_root_.scala.Boolean]
  ): _root_.com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo = _root_.com.tools.teal.pulsar.ui.api.v1.topic.LedgerInfo(
    ledgerId,
    entries,
    size,
    offloaded,
    metadata,
    underReplicated
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[tools.teal.pulsar.ui.api.v1.LedgerInfo])
}
