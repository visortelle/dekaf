// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.tools.teal.pulsar.ui.api.v1.consumer


object ConsumerServiceGrpc {
  val METHOD_CREATE_CONSUMER: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest, com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ConsumerService", "CreateConsumer"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_DELETE_CONSUMER: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest, com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ConsumerService", "DeleteConsumer"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_RESUME: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest, com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ConsumerService", "Resume"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_PAUSE: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest, com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ConsumerService", "Pause"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_DELETE_SUBSCRIPTIONS: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsRequest, com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ConsumerService", "DeleteSubscriptions"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val METHOD_SEEK: _root_.io.grpc.MethodDescriptor[com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest, com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("tools.teal.pulsar.ui.api.v1.ConsumerService", "Seek"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.javaDescriptor.getServices().get(0).getMethods().get(5)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("tools.teal.pulsar.ui.api.v1.ConsumerService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.javaDescriptor))
      .addMethod(METHOD_CREATE_CONSUMER)
      .addMethod(METHOD_DELETE_CONSUMER)
      .addMethod(METHOD_RESUME)
      .addMethod(METHOD_PAUSE)
      .addMethod(METHOD_DELETE_SUBSCRIPTIONS)
      .addMethod(METHOD_SEEK)
      .build()
  
  trait ConsumerService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion = ConsumerService
    def createConsumer(request: com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse]
    def deleteConsumer(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse]
    def resume(request: com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse]): _root_.scala.Unit
    def pause(request: com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse]
    def deleteSubscriptions(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsResponse]
    def seek(request: com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse]
  }
  
  object ConsumerService extends _root_.scalapb.grpc.ServiceCompanion[ConsumerService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ConsumerService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: ConsumerService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_CREATE_CONSUMER,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest, com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse]): _root_.scala.Unit =
            serviceImpl.createConsumer(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_DELETE_CONSUMER,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest, com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse]): _root_.scala.Unit =
            serviceImpl.deleteConsumer(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_RESUME,
        _root_.io.grpc.stub.ServerCalls.asyncServerStreamingCall(new _root_.io.grpc.stub.ServerCalls.ServerStreamingMethod[com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest, com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse]): _root_.scala.Unit =
            serviceImpl.resume(request, observer)
        }))
      .addMethod(
        METHOD_PAUSE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest, com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse]): _root_.scala.Unit =
            serviceImpl.pause(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_DELETE_SUBSCRIPTIONS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsRequest, com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsResponse]): _root_.scala.Unit =
            serviceImpl.deleteSubscriptions(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .addMethod(
        METHOD_SEEK,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall(new _root_.io.grpc.stub.ServerCalls.UnaryMethod[com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest, com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse] {
          override def invoke(request: com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest, observer: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse]): _root_.scala.Unit =
            serviceImpl.seek(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
              executionContext)
        }))
      .build()
  }
  
  trait ConsumerServiceBlockingClient {
    def serviceCompanion = ConsumerService
    def createConsumer(request: com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest): com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse
    def deleteConsumer(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest): com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse
    def resume(request: com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest): scala.collection.Iterator[com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse]
    def pause(request: com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest): com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse
    def deleteSubscriptions(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsRequest): com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsResponse
    def seek(request: com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest): com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse
  }
  
  class ConsumerServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ConsumerServiceBlockingStub](channel, options) with ConsumerServiceBlockingClient {
    override def createConsumer(request: com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest): com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_CONSUMER, options, request)
    }
    
    override def deleteConsumer(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest): com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DELETE_CONSUMER, options, request)
    }
    
    override def resume(request: com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest): scala.collection.Iterator[com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse] = {
      _root_.scalapb.grpc.ClientCalls.blockingServerStreamingCall(channel, METHOD_RESUME, options, request)
    }
    
    override def pause(request: com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest): com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_PAUSE, options, request)
    }
    
    override def deleteSubscriptions(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsRequest): com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DELETE_SUBSCRIPTIONS, options, request)
    }
    
    override def seek(request: com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest): com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SEEK, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ConsumerServiceBlockingStub = new ConsumerServiceBlockingStub(channel, options)
  }
  
  class ConsumerServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ConsumerServiceStub](channel, options) with ConsumerService {
    override def createConsumer(request: com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.CreateConsumerResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_CONSUMER, options, request)
    }
    
    override def deleteConsumer(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteConsumerResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DELETE_CONSUMER, options, request)
    }
    
    override def resume(request: com.tools.teal.pulsar.ui.api.v1.consumer.ResumeRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[com.tools.teal.pulsar.ui.api.v1.consumer.ResumeResponse]): _root_.scala.Unit = {
      _root_.scalapb.grpc.ClientCalls.asyncServerStreamingCall(channel, METHOD_RESUME, options, request, responseObserver)
    }
    
    override def pause(request: com.tools.teal.pulsar.ui.api.v1.consumer.PauseRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.PauseResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_PAUSE, options, request)
    }
    
    override def deleteSubscriptions(request: com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.DeleteSubscriptionsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DELETE_SUBSCRIPTIONS, options, request)
    }
    
    override def seek(request: com.tools.teal.pulsar.ui.api.v1.consumer.SeekRequest): scala.concurrent.Future[com.tools.teal.pulsar.ui.api.v1.consumer.SeekResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SEEK, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ConsumerServiceStub = new ConsumerServiceStub(channel, options)
  }
  
  object ConsumerServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[ConsumerServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ConsumerServiceStub = new ConsumerServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[ConsumerServiceStub] = this
  }
  
  def bindService(serviceImpl: ConsumerService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = ConsumerService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): ConsumerServiceBlockingStub = new ConsumerServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): ConsumerServiceStub = new ConsumerServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = com.tools.teal.pulsar.ui.api.v1.consumer.ConsumerProto.javaDescriptor.getServices().get(0)
  
}